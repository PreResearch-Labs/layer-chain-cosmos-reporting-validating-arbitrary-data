// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// StakingKeeper is an autogenerated mock type for the StakingKeeper type
type StakingKeeper struct {
	mock.Mock
}

// GetAllDelegatorDelegations provides a mock function with given fields: ctx, delegator
func (_m *StakingKeeper) GetAllDelegatorDelegations(ctx types.Context, delegator types.AccAddress) []stakingtypes.Delegation {
	ret := _m.Called(ctx, delegator)

	var r0 []stakingtypes.Delegation
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) []stakingtypes.Delegation); ok {
		r0 = rf(ctx, delegator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]stakingtypes.Delegation)
		}
	}

	return r0
}

// GetDelegation provides a mock function with given fields: ctx, delAddr, valAddr
func (_m *StakingKeeper) GetDelegation(ctx types.Context, delAddr types.AccAddress, valAddr types.ValAddress) (stakingtypes.Delegation, bool) {
	ret := _m.Called(ctx, delAddr, valAddr)

	var r0 stakingtypes.Delegation
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.ValAddress) (stakingtypes.Delegation, bool)); ok {
		return rf(ctx, delAddr, valAddr)
	}
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress, types.ValAddress) stakingtypes.Delegation); ok {
		r0 = rf(ctx, delAddr, valAddr)
	} else {
		r0 = ret.Get(0).(stakingtypes.Delegation)
	}

	if rf, ok := ret.Get(1).(func(types.Context, types.AccAddress, types.ValAddress) bool); ok {
		r1 = rf(ctx, delAddr, valAddr)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Validator provides a mock function with given fields: ctx, address
func (_m *StakingKeeper) Validator(ctx types.Context, address types.ValAddress) stakingtypes.ValidatorI {
	ret := _m.Called(ctx, address)

	var r0 stakingtypes.ValidatorI
	if rf, ok := ret.Get(0).(func(types.Context, types.ValAddress) stakingtypes.ValidatorI); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stakingtypes.ValidatorI)
		}
	}

	return r0
}

// NewStakingKeeper creates a new instance of StakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStakingKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *StakingKeeper {
	mock := &StakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
