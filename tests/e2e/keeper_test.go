package e2e_test

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/suite"
	setup "github.com/tellor-io/layer/tests"
	_ "github.com/tellor-io/layer/x/dispute"
	_ "github.com/tellor-io/layer/x/mint"
	_ "github.com/tellor-io/layer/x/oracle"
	_ "github.com/tellor-io/layer/x/registry/module"
	_ "github.com/tellor-io/layer/x/reporter/module"

	sdk "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/x/auth"
	_ "github.com/cosmos/cosmos-sdk/x/auth/tx/config"
	_ "github.com/cosmos/cosmos-sdk/x/consensus"
	_ "github.com/cosmos/cosmos-sdk/x/distribution"
	_ "github.com/cosmos/cosmos-sdk/x/genutil"
	_ "github.com/cosmos/cosmos-sdk/x/gov"
	_ "github.com/cosmos/cosmos-sdk/x/mint"
	_ "github.com/cosmos/cosmos-sdk/x/params"
	_ "github.com/cosmos/cosmos-sdk/x/slashing"
	stakingkeeper "github.com/cosmos/cosmos-sdk/x/staking/keeper"
)

const (
	ethQueryData = "0x
	btcQueryData = "0x
	trbQueryData = "0x
)

type E2ETestSuite struct {
	suite.Suite
	Setup *setup.SharedSetup
}

func (s *E2ETestSuite) SetupTest() {
	s.Setup = &setup.SharedSetup{}
	s.Setup.SetupTest(s.T())
}

func JailValidator(ctx sdk.Context, consensusAddress sdk.ConsAddress, validatorAddress sdk.ValAddress, k stakingkeeper.Keeper) error {
	validator, err := k.GetValidator(ctx, validatorAddress)
	if err != nil {
		return fmt.Errorf("validator %s not found", validatorAddress)
	}

	if validator.Jailed {
		return fmt.Errorf("validator %s is already jailed", validatorAddress)
	}

	err = k.Jail(ctx, consensusAddress)
	if err != nil {
		return err
	}

	return nil
}

func TestKeeperTestSuite(t *testing.T) {
	suite.Run(t, new(E2ETestSuite))
}
