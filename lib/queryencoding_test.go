package lib

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestIsQueryId64chars(t *testing.T) {
	// Test cases for valid query IDs
	validQueryIDs := []string{
		"0x1234567890123456789012345678901234567890123456789012345678901234",
		"1234567890123456789012345678901234567890123456789012345678901234",
	}
	for _, queryID := range validQueryIDs {
		if !IsQueryId64chars(queryID) {
			t.Errorf("Expected query ID %s to be valid, but it was invalid", queryID)
		}
	}

	// Test cases for invalid query IDs
	invalidQueryIDs := []string{
		"0x123456789012345678901234567890123456789012345678901234567890123",   // Length less than 64
		"0x12345678901234567890123456789012345678901234567890123456789012345", // Length greater than 64
		"0x", // Empty query ID
		"",   // Empty query ID without 0x prefix
		"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-=_+[]{}|;:'~,.<>?/", // Length greater than 64
		"0xabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789999",                         // Length 65
	}
	for _, queryID := range invalidQueryIDs {
		if IsQueryId64chars(queryID) {
			t.Errorf("Expected query ID %s to be invalid, but it was valid", queryID)
		}
	}
}
func TestHas0xPrefix(t *testing.T) {
	// Test cases for strings with 0x prefix
	stringsWith0xPrefix := []struct {
		str      string
		expected bool
	}{
		{"0x1234567890", true},
		{"0xabcdef", true},
		{"0x", true},
		{"0X1234567890", true},
		{"0Xabcdef", true},
		{"0X", true},
	}
	for _, tc := range stringsWith0xPrefix {
		result := Has0xPrefix(tc.str)
		if result != tc.expected {
			t.Errorf("Expected Has0xPrefix(%s) to be %v, but got %v", tc.str, tc.expected, result)
		}
	}

	// Test cases for strings without 0x prefix
	stringsWithout0xPrefix := []struct {
		str      string
		expected bool
	}{
		{"1234567890", false},
		{"abcdef", false},
		{"", false},
		{"X1234567890", false},
		{"Xabcdef", false},
		{"X", false},
	}
	for _, tc := range stringsWithout0xPrefix {
		result := Has0xPrefix(tc.str)
		if result != tc.expected {
			t.Errorf("Expected Has0xPrefix(%s) to be %v, but got %v", tc.str, tc.expected, result)
		}
	}
}
func TestEncodeArguments(t *testing.T) {
	queryType := []string{"string", "bytes"}
	testcases := []struct {
		name        string
		queryType   string
		dataTypes   []string
		dataFields  []string
		expectedHex string
	}{
		{
			"Test case eth/usd",
			"SpotPrice",
			[]string{"string", "string"},
			[]string{"eth", "usd"},
			"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003657468000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000",
		},
		{
			"Test case btc/usd",
			"SpotPrice",
			[]string{"string", "string"},
			[]string{"btc", "usd"},
			"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003627463000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000",
		},
		{
			"Test case trb/usd",
			"SpotPrice",
			[]string{"string", "string"},
			[]string{"trb", "usd"},
			"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003747262000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000",
		},
		{
			"Test case BTCbalance",
			"BTCBalance",
			[]string{"string", "uint256"},
			[]string{"3Cyd2ExaAEoTzmLNyixJxBsJ4X16t1VePc", "1705954706"},
			"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a42544342616c616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000065aecd920000000000000000000000000000000000000000000000000000000000000022334379643245786141456f547a6d4c4e7969784a7842734a34583136743156655063000000000000000000000000000000000000000000000000000000000000",
		},
		{
			"Test case cross chain balance",
			"CrossChainBalance",
			[]string{"uint256", "address", "uint256"},
			[]string{"1", "0x88dF592F8eb5D7Bd38bFeF7dEb0fBc02cf3778a0", "15998590"},
			"00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001143726f7373436861696e42616c616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000088df592f8eb5d7bd38bfef7deb0fbc02cf3778a00000000000000000000000000000000000000000000000000000000000f41e7e",
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			res, err := EncodeArguments(tc.dataTypes, tc.dataFields)
			require.NoError(t, err)
			queryTypeField := []string{tc.queryType, string(res)}
			res2, err := EncodeArguments(queryType, queryTypeField)
			require.NoError(t, err)
			qdata := hex.EncodeToString(res2)
			require.Equal(t, tc.expectedHex, qdata)
		})
	}
}
