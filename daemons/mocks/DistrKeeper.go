// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	distributiontypes "github.com/cosmos/cosmos-sdk/x/distribution/types"
	mock "github.com/stretchr/testify/mock"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// DistrKeeper is an autogenerated mock type for the DistrKeeper type
type DistrKeeper struct {
	mock.Mock
}

// AllocateTokensToValidator provides a mock function with given fields: ctx, val, tokens
func (_m *DistrKeeper) AllocateTokensToValidator(ctx types.Context, val stakingtypes.ValidatorI, tokens types.DecCoins) {
	_m.Called(ctx, val, tokens)
}

// GetFeePool provides a mock function with given fields: ctx
func (_m *DistrKeeper) GetFeePool(ctx types.Context) distributiontypes.FeePool {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFeePool")
	}

	var r0 distributiontypes.FeePool
	if rf, ok := ret.Get(0).(func(types.Context) distributiontypes.FeePool); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(distributiontypes.FeePool)
	}

	return r0
}

// GetFeePoolCommunityCoins provides a mock function with given fields: ctx
func (_m *DistrKeeper) GetFeePoolCommunityCoins(ctx types.Context) types.DecCoins {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFeePoolCommunityCoins")
	}

	var r0 types.DecCoins
	if rf, ok := ret.Get(0).(func(types.Context) types.DecCoins); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.DecCoins)
		}
	}

	return r0
}

// SetFeePool provides a mock function with given fields: ctx, feePool
func (_m *DistrKeeper) SetFeePool(ctx types.Context, feePool distributiontypes.FeePool) {
	_m.Called(ctx, feePool)
}

// NewDistrKeeper creates a new instance of DistrKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDistrKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *DistrKeeper {
	mock := &DistrKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
