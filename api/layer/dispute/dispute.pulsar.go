// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package dispute

import (
	fmt "fmt"
	io "io"
	reflect "reflect"
	sync "sync"

	v1beta1 "cosmossdk.io/api/cosmos/base/v1beta1"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

var _ protoreflect.List = (*_Dispute_13_list)(nil)

type _Dispute_13_list struct {
	list *[]*PayerInfo
}

func (x *_Dispute_13_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Dispute_13_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_Dispute_13_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PayerInfo)
	(*x.list)[i] = concreteValue
}

func (x *_Dispute_13_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*PayerInfo)
	*x.list = append(*x.list, concreteValue)
}

func (x *_Dispute_13_list) AppendMutable() protoreflect.Value {
	v := new(PayerInfo)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Dispute_13_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_Dispute_13_list) NewElement() protoreflect.Value {
	v := new(PayerInfo)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_Dispute_13_list) IsValid() bool {
	return x.list != nil
}

var _ protoreflect.List = (*_Dispute_15_list)(nil)

type _Dispute_15_list struct {
	list *[]uint64
}

func (x *_Dispute_15_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_Dispute_15_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfUint64((*x.list)[i])
}

func (x *_Dispute_15_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	(*x.list)[i] = concreteValue
}

func (x *_Dispute_15_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Uint()
	concreteValue := valueUnwrapped
	*x.list = append(*x.list, concreteValue)
}

func (x *_Dispute_15_list) AppendMutable() protoreflect.Value {
	panic(fmt.Errorf("AppendMutable can not be called on message Dispute at list field PrevDisputeIds as it is not of Message kind"))
}

func (x *_Dispute_15_list) Truncate(n int) {
	*x.list = (*x.list)[:n]
}

func (x *_Dispute_15_list) NewElement() protoreflect.Value {
	v := uint64(0)
	return protoreflect.ValueOfUint64(v)
}

func (x *_Dispute_15_list) IsValid() bool {
	return x.list != nil
}

var (
	md_Dispute                   protoreflect.MessageDescriptor
	fd_Dispute_hashId            protoreflect.FieldDescriptor
	fd_Dispute_disputeId         protoreflect.FieldDescriptor
	fd_Dispute_disputeCategory   protoreflect.FieldDescriptor
	fd_Dispute_disputeFee        protoreflect.FieldDescriptor
	fd_Dispute_disputeStatus     protoreflect.FieldDescriptor
	fd_Dispute_disputeStartTime  protoreflect.FieldDescriptor
	fd_Dispute_disputeEndTime    protoreflect.FieldDescriptor
	fd_Dispute_disputeStartBlock protoreflect.FieldDescriptor
	fd_Dispute_disputeRound      protoreflect.FieldDescriptor
	fd_Dispute_slashAmount       protoreflect.FieldDescriptor
	fd_Dispute_burnAmount        protoreflect.FieldDescriptor
	fd_Dispute_reportEvidence    protoreflect.FieldDescriptor
	fd_Dispute_feePayers         protoreflect.FieldDescriptor
	fd_Dispute_feeTotal          protoreflect.FieldDescriptor
	fd_Dispute_prevDisputeIds    protoreflect.FieldDescriptor
)

func init() {
	file_layer_dispute_dispute_proto_init()
	md_Dispute = File_layer_dispute_dispute_proto.Messages().ByName("Dispute")
	fd_Dispute_hashId = md_Dispute.Fields().ByName("hashId")
	fd_Dispute_disputeId = md_Dispute.Fields().ByName("disputeId")
	fd_Dispute_disputeCategory = md_Dispute.Fields().ByName("disputeCategory")
	fd_Dispute_disputeFee = md_Dispute.Fields().ByName("disputeFee")
	fd_Dispute_disputeStatus = md_Dispute.Fields().ByName("disputeStatus")
	fd_Dispute_disputeStartTime = md_Dispute.Fields().ByName("disputeStartTime")
	fd_Dispute_disputeEndTime = md_Dispute.Fields().ByName("disputeEndTime")
	fd_Dispute_disputeStartBlock = md_Dispute.Fields().ByName("disputeStartBlock")
	fd_Dispute_disputeRound = md_Dispute.Fields().ByName("disputeRound")
	fd_Dispute_slashAmount = md_Dispute.Fields().ByName("slashAmount")
	fd_Dispute_burnAmount = md_Dispute.Fields().ByName("burnAmount")
	fd_Dispute_reportEvidence = md_Dispute.Fields().ByName("reportEvidence")
	fd_Dispute_feePayers = md_Dispute.Fields().ByName("feePayers")
	fd_Dispute_feeTotal = md_Dispute.Fields().ByName("feeTotal")
	fd_Dispute_prevDisputeIds = md_Dispute.Fields().ByName("prevDisputeIds")
}

var _ protoreflect.Message = (*fastReflection_Dispute)(nil)

type fastReflection_Dispute Dispute

func (x *Dispute) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Dispute)(x)
}

func (x *Dispute) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Dispute_messageType fastReflection_Dispute_messageType
var _ protoreflect.MessageType = fastReflection_Dispute_messageType{}

type fastReflection_Dispute_messageType struct{}

func (x fastReflection_Dispute_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Dispute)(nil)
}
func (x fastReflection_Dispute_messageType) New() protoreflect.Message {
	return new(fastReflection_Dispute)
}
func (x fastReflection_Dispute_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Dispute
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Dispute) Descriptor() protoreflect.MessageDescriptor {
	return md_Dispute
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Dispute) Type() protoreflect.MessageType {
	return _fastReflection_Dispute_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Dispute) New() protoreflect.Message {
	return new(fastReflection_Dispute)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Dispute) Interface() protoreflect.ProtoMessage {
	return (*Dispute)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Dispute) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if len(x.HashId) != 0 {
		value := protoreflect.ValueOfBytes(x.HashId)
		if !f(fd_Dispute_hashId, value) {
			return
		}
	}
	if x.DisputeId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DisputeId)
		if !f(fd_Dispute_disputeId, value) {
			return
		}
	}
	if x.DisputeCategory != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.DisputeCategory))
		if !f(fd_Dispute_disputeCategory, value) {
			return
		}
	}
	if x.DisputeFee != "" {
		value := protoreflect.ValueOfString(x.DisputeFee)
		if !f(fd_Dispute_disputeFee, value) {
			return
		}
	}
	if x.DisputeStatus != 0 {
		value := protoreflect.ValueOfEnum((protoreflect.EnumNumber)(x.DisputeStatus))
		if !f(fd_Dispute_disputeStatus, value) {
			return
		}
	}
	if x.DisputeStartTime != nil {
		value := protoreflect.ValueOfMessage(x.DisputeStartTime.ProtoReflect())
		if !f(fd_Dispute_disputeStartTime, value) {
			return
		}
	}
	if x.DisputeEndTime != nil {
		value := protoreflect.ValueOfMessage(x.DisputeEndTime.ProtoReflect())
		if !f(fd_Dispute_disputeEndTime, value) {
			return
		}
	}
	if x.DisputeStartBlock != int64(0) {
		value := protoreflect.ValueOfInt64(x.DisputeStartBlock)
		if !f(fd_Dispute_disputeStartBlock, value) {
			return
		}
	}
	if x.DisputeRound != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DisputeRound)
		if !f(fd_Dispute_disputeRound, value) {
			return
		}
	}
	if x.SlashAmount != "" {
		value := protoreflect.ValueOfString(x.SlashAmount)
		if !f(fd_Dispute_slashAmount, value) {
			return
		}
	}
	if x.BurnAmount != "" {
		value := protoreflect.ValueOfString(x.BurnAmount)
		if !f(fd_Dispute_burnAmount, value) {
			return
		}
	}
	if x.ReportEvidence != nil {
		value := protoreflect.ValueOfMessage(x.ReportEvidence.ProtoReflect())
		if !f(fd_Dispute_reportEvidence, value) {
			return
		}
	}
	if len(x.FeePayers) != 0 {
		value := protoreflect.ValueOfList(&_Dispute_13_list{list: &x.FeePayers})
		if !f(fd_Dispute_feePayers, value) {
			return
		}
	}
	if x.FeeTotal != "" {
		value := protoreflect.ValueOfString(x.FeeTotal)
		if !f(fd_Dispute_feeTotal, value) {
			return
		}
	}
	if len(x.PrevDisputeIds) != 0 {
		value := protoreflect.ValueOfList(&_Dispute_15_list{list: &x.PrevDisputeIds})
		if !f(fd_Dispute_prevDisputeIds, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Dispute) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hashId":
		return len(x.HashId) != 0
	case "layer.dispute.Dispute.disputeId":
		return x.DisputeId != uint64(0)
	case "layer.dispute.Dispute.disputeCategory":
		return x.DisputeCategory != 0
	case "layer.dispute.Dispute.disputeFee":
		return x.DisputeFee != ""
	case "layer.dispute.Dispute.disputeStatus":
		return x.DisputeStatus != 0
	case "layer.dispute.Dispute.disputeStartTime":
		return x.DisputeStartTime != nil
	case "layer.dispute.Dispute.disputeEndTime":
		return x.DisputeEndTime != nil
	case "layer.dispute.Dispute.disputeStartBlock":
		return x.DisputeStartBlock != int64(0)
	case "layer.dispute.Dispute.disputeRound":
		return x.DisputeRound != uint64(0)
	case "layer.dispute.Dispute.slashAmount":
		return x.SlashAmount != ""
	case "layer.dispute.Dispute.burnAmount":
		return x.BurnAmount != ""
	case "layer.dispute.Dispute.reportEvidence":
		return x.ReportEvidence != nil
	case "layer.dispute.Dispute.feePayers":
		return len(x.FeePayers) != 0
	case "layer.dispute.Dispute.feeTotal":
		return x.FeeTotal != ""
	case "layer.dispute.Dispute.prevDisputeIds":
		return len(x.PrevDisputeIds) != 0
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hashId":
		x.HashId = nil
	case "layer.dispute.Dispute.disputeId":
		x.DisputeId = uint64(0)
	case "layer.dispute.Dispute.disputeCategory":
		x.DisputeCategory = 0
	case "layer.dispute.Dispute.disputeFee":
		x.DisputeFee = ""
	case "layer.dispute.Dispute.disputeStatus":
		x.DisputeStatus = 0
	case "layer.dispute.Dispute.disputeStartTime":
		x.DisputeStartTime = nil
	case "layer.dispute.Dispute.disputeEndTime":
		x.DisputeEndTime = nil
	case "layer.dispute.Dispute.disputeStartBlock":
		x.DisputeStartBlock = int64(0)
	case "layer.dispute.Dispute.disputeRound":
		x.DisputeRound = uint64(0)
	case "layer.dispute.Dispute.slashAmount":
		x.SlashAmount = ""
	case "layer.dispute.Dispute.burnAmount":
		x.BurnAmount = ""
	case "layer.dispute.Dispute.reportEvidence":
		x.ReportEvidence = nil
	case "layer.dispute.Dispute.feePayers":
		x.FeePayers = nil
	case "layer.dispute.Dispute.feeTotal":
		x.FeeTotal = ""
	case "layer.dispute.Dispute.prevDisputeIds":
		x.PrevDisputeIds = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Dispute) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.dispute.Dispute.hashId":
		value := x.HashId
		return protoreflect.ValueOfBytes(value)
	case "layer.dispute.Dispute.disputeId":
		value := x.DisputeId
		return protoreflect.ValueOfUint64(value)
	case "layer.dispute.Dispute.disputeCategory":
		value := x.DisputeCategory
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "layer.dispute.Dispute.disputeFee":
		value := x.DisputeFee
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.disputeStatus":
		value := x.DisputeStatus
		return protoreflect.ValueOfEnum((protoreflect.EnumNumber)(value))
	case "layer.dispute.Dispute.disputeStartTime":
		value := x.DisputeStartTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.Dispute.disputeEndTime":
		value := x.DisputeEndTime
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.Dispute.disputeStartBlock":
		value := x.DisputeStartBlock
		return protoreflect.ValueOfInt64(value)
	case "layer.dispute.Dispute.disputeRound":
		value := x.DisputeRound
		return protoreflect.ValueOfUint64(value)
	case "layer.dispute.Dispute.slashAmount":
		value := x.SlashAmount
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.burnAmount":
		value := x.BurnAmount
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.reportEvidence":
		value := x.ReportEvidence
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.Dispute.feePayers":
		if len(x.FeePayers) == 0 {
			return protoreflect.ValueOfList(&_Dispute_13_list{})
		}
		listValue := &_Dispute_13_list{list: &x.FeePayers}
		return protoreflect.ValueOfList(listValue)
	case "layer.dispute.Dispute.feeTotal":
		value := x.FeeTotal
		return protoreflect.ValueOfString(value)
	case "layer.dispute.Dispute.prevDisputeIds":
		if len(x.PrevDisputeIds) == 0 {
			return protoreflect.ValueOfList(&_Dispute_15_list{})
		}
		listValue := &_Dispute_15_list{list: &x.PrevDisputeIds}
		return protoreflect.ValueOfList(listValue)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hashId":
		x.HashId = value.Bytes()
	case "layer.dispute.Dispute.disputeId":
		x.DisputeId = value.Uint()
	case "layer.dispute.Dispute.disputeCategory":
		x.DisputeCategory = (DisputeCategory)(value.Enum())
	case "layer.dispute.Dispute.disputeFee":
		x.DisputeFee = value.Interface().(string)
	case "layer.dispute.Dispute.disputeStatus":
		x.DisputeStatus = (DisputeStatus)(value.Enum())
	case "layer.dispute.Dispute.disputeStartTime":
		x.DisputeStartTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "layer.dispute.Dispute.disputeEndTime":
		x.DisputeEndTime = value.Message().Interface().(*timestamppb.Timestamp)
	case "layer.dispute.Dispute.disputeStartBlock":
		x.DisputeStartBlock = value.Int()
	case "layer.dispute.Dispute.disputeRound":
		x.DisputeRound = value.Uint()
	case "layer.dispute.Dispute.slashAmount":
		x.SlashAmount = value.Interface().(string)
	case "layer.dispute.Dispute.burnAmount":
		x.BurnAmount = value.Interface().(string)
	case "layer.dispute.Dispute.reportEvidence":
		x.ReportEvidence = value.Message().Interface().(*MicroReport)
	case "layer.dispute.Dispute.feePayers":
		lv := value.List()
		clv := lv.(*_Dispute_13_list)
		x.FeePayers = *clv.list
	case "layer.dispute.Dispute.feeTotal":
		x.FeeTotal = value.Interface().(string)
	case "layer.dispute.Dispute.prevDisputeIds":
		lv := value.List()
		clv := lv.(*_Dispute_15_list)
		x.PrevDisputeIds = *clv.list
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.Dispute.disputeStartTime":
		if x.DisputeStartTime == nil {
			x.DisputeStartTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.DisputeStartTime.ProtoReflect())
	case "layer.dispute.Dispute.disputeEndTime":
		if x.DisputeEndTime == nil {
			x.DisputeEndTime = new(timestamppb.Timestamp)
		}
		return protoreflect.ValueOfMessage(x.DisputeEndTime.ProtoReflect())
	case "layer.dispute.Dispute.reportEvidence":
		if x.ReportEvidence == nil {
			x.ReportEvidence = new(MicroReport)
		}
		return protoreflect.ValueOfMessage(x.ReportEvidence.ProtoReflect())
	case "layer.dispute.Dispute.feePayers":
		if x.FeePayers == nil {
			x.FeePayers = []*PayerInfo{}
		}
		value := &_Dispute_13_list{list: &x.FeePayers}
		return protoreflect.ValueOfList(value)
	case "layer.dispute.Dispute.prevDisputeIds":
		if x.PrevDisputeIds == nil {
			x.PrevDisputeIds = []uint64{}
		}
		value := &_Dispute_15_list{list: &x.PrevDisputeIds}
		return protoreflect.ValueOfList(value)
	case "layer.dispute.Dispute.hashId":
		panic(fmt.Errorf("field hashId of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.disputeId":
		panic(fmt.Errorf("field disputeId of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.disputeCategory":
		panic(fmt.Errorf("field disputeCategory of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.disputeFee":
		panic(fmt.Errorf("field disputeFee of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.disputeStatus":
		panic(fmt.Errorf("field disputeStatus of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.disputeStartBlock":
		panic(fmt.Errorf("field disputeStartBlock of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.disputeRound":
		panic(fmt.Errorf("field disputeRound of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.slashAmount":
		panic(fmt.Errorf("field slashAmount of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.burnAmount":
		panic(fmt.Errorf("field burnAmount of message layer.dispute.Dispute is not mutable"))
	case "layer.dispute.Dispute.feeTotal":
		panic(fmt.Errorf("field feeTotal of message layer.dispute.Dispute is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Dispute) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.Dispute.hashId":
		return protoreflect.ValueOfBytes(nil)
	case "layer.dispute.Dispute.disputeId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.dispute.Dispute.disputeCategory":
		return protoreflect.ValueOfEnum(0)
	case "layer.dispute.Dispute.disputeFee":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.disputeStatus":
		return protoreflect.ValueOfEnum(0)
	case "layer.dispute.Dispute.disputeStartTime":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.Dispute.disputeEndTime":
		m := new(timestamppb.Timestamp)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.Dispute.disputeStartBlock":
		return protoreflect.ValueOfInt64(int64(0))
	case "layer.dispute.Dispute.disputeRound":
		return protoreflect.ValueOfUint64(uint64(0))
	case "layer.dispute.Dispute.slashAmount":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.burnAmount":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.reportEvidence":
		m := new(MicroReport)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.Dispute.feePayers":
		list := []*PayerInfo{}
		return protoreflect.ValueOfList(&_Dispute_13_list{list: &list})
	case "layer.dispute.Dispute.feeTotal":
		return protoreflect.ValueOfString("")
	case "layer.dispute.Dispute.prevDisputeIds":
		list := []uint64{}
		return protoreflect.ValueOfList(&_Dispute_15_list{list: &list})
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.Dispute"))
		}
		panic(fmt.Errorf("message layer.dispute.Dispute does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Dispute) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.dispute.Dispute", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Dispute) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Dispute) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Dispute) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Dispute) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Dispute)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.HashId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeId != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeId))
		}
		if x.DisputeCategory != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeCategory))
		}
		l = len(x.DisputeFee)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeStatus != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeStatus))
		}
		if x.DisputeStartTime != nil {
			l = options.Size(x.DisputeStartTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeEndTime != nil {
			l = options.Size(x.DisputeEndTime)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.DisputeStartBlock != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeStartBlock))
		}
		if x.DisputeRound != 0 {
			n += 1 + runtime.Sov(uint64(x.DisputeRound))
		}
		l = len(x.SlashAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.BurnAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.ReportEvidence != nil {
			l = options.Size(x.ReportEvidence)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.FeePayers) > 0 {
			for _, e := range x.FeePayers {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.FeeTotal)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if len(x.PrevDisputeIds) > 0 {
			l = 0
			for _, e := range x.PrevDisputeIds {
				l += runtime.Sov(uint64(e))
			}
			n += 1 + runtime.Sov(uint64(l)) + l
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Dispute)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.PrevDisputeIds) > 0 {
			var pksize2 int
			for _, num := range x.PrevDisputeIds {
				pksize2 += runtime.Sov(uint64(num))
			}
			i -= pksize2
			j1 := i
			for _, num := range x.PrevDisputeIds {
				for num >= 1<<7 {
					dAtA[j1] = uint8(uint64(num)&0x7f | 0x80)
					num >>= 7
					j1++
				}
				dAtA[j1] = uint8(num)
				j1++
			}
			i = runtime.EncodeVarint(dAtA, i, uint64(pksize2))
			i--
			dAtA[i] = 0x7a
		}
		if len(x.FeeTotal) > 0 {
			i -= len(x.FeeTotal)
			copy(dAtA[i:], x.FeeTotal)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeTotal)))
			i--
			dAtA[i] = 0x72
		}
		if len(x.FeePayers) > 0 {
			for iNdEx := len(x.FeePayers) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.FeePayers[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x6a
			}
		}
		if x.ReportEvidence != nil {
			encoded, err := options.Marshal(x.ReportEvidence)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.BurnAmount) > 0 {
			i -= len(x.BurnAmount)
			copy(dAtA[i:], x.BurnAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.BurnAmount)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.SlashAmount) > 0 {
			i -= len(x.SlashAmount)
			copy(dAtA[i:], x.SlashAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SlashAmount)))
			i--
			dAtA[i] = 0x52
		}
		if x.DisputeRound != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeRound))
			i--
			dAtA[i] = 0x48
		}
		if x.DisputeStartBlock != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeStartBlock))
			i--
			dAtA[i] = 0x40
		}
		if x.DisputeEndTime != nil {
			encoded, err := options.Marshal(x.DisputeEndTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.DisputeStartTime != nil {
			encoded, err := options.Marshal(x.DisputeStartTime)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if x.DisputeStatus != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeStatus))
			i--
			dAtA[i] = 0x28
		}
		if len(x.DisputeFee) > 0 {
			i -= len(x.DisputeFee)
			copy(dAtA[i:], x.DisputeFee)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DisputeFee)))
			i--
			dAtA[i] = 0x22
		}
		if x.DisputeCategory != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeCategory))
			i--
			dAtA[i] = 0x18
		}
		if x.DisputeId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DisputeId))
			i--
			dAtA[i] = 0x10
		}
		if len(x.HashId) > 0 {
			i -= len(x.HashId)
			copy(dAtA[i:], x.HashId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HashId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Dispute)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Dispute: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
				}
				var byteLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					byteLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if byteLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + byteLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HashId = append(x.HashId[:0], dAtA[iNdEx:postIndex]...)
				if x.HashId == nil {
					x.HashId = []byte{}
				}
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
				}
				x.DisputeId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeCategory", wireType)
				}
				x.DisputeCategory = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeCategory |= DisputeCategory(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeFee", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DisputeFee = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeStatus", wireType)
				}
				x.DisputeStatus = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeStatus |= DisputeStatus(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeStartTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DisputeStartTime == nil {
					x.DisputeStartTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DisputeStartTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeEndTime", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.DisputeEndTime == nil {
					x.DisputeEndTime = &timestamppb.Timestamp{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.DisputeEndTime); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeStartBlock", wireType)
				}
				x.DisputeStartBlock = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeStartBlock |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DisputeRound", wireType)
				}
				x.DisputeRound = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DisputeRound |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SlashAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SlashAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.BurnAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReportEvidence", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.ReportEvidence == nil {
					x.ReportEvidence = &MicroReport{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.ReportEvidence); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeePayers", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeePayers = append(x.FeePayers, &PayerInfo{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.FeePayers[len(x.FeePayers)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 14:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeTotal", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeTotal = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 15:
				if wireType == 0 {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					x.PrevDisputeIds = append(x.PrevDisputeIds, v)
				} else if wireType == 2 {
					var packedLen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
						}
						if iNdEx >= l {
							return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						packedLen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if packedLen < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					postIndex := iNdEx + packedLen
					if postIndex < 0 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
					}
					if postIndex > l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					var elementCount int
					var count int
					for _, integer := range dAtA[iNdEx:postIndex] {
						if integer < 128 {
							count++
						}
					}
					elementCount = count
					if elementCount != 0 && len(x.PrevDisputeIds) == 0 {
						x.PrevDisputeIds = make([]uint64, 0, elementCount)
					}
					for iNdEx < postIndex {
						var v uint64
						for shift := uint(0); ; shift += 7 {
							if shift >= 64 {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
							}
							if iNdEx >= l {
								return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
							}
							b := dAtA[iNdEx]
							iNdEx++
							v |= uint64(b&0x7F) << shift
							if b < 0x80 {
								break
							}
						}
						x.PrevDisputeIds = append(x.PrevDisputeIds, v)
					}
				} else {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PrevDisputeIds", wireType)
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_MicroReport           protoreflect.MessageDescriptor
	fd_MicroReport_reporter  protoreflect.FieldDescriptor
	fd_MicroReport_power     protoreflect.FieldDescriptor
	fd_MicroReport_queryId   protoreflect.FieldDescriptor
	fd_MicroReport_value     protoreflect.FieldDescriptor
	fd_MicroReport_timestamp protoreflect.FieldDescriptor
)

func init() {
	file_layer_dispute_dispute_proto_init()
	md_MicroReport = File_layer_dispute_dispute_proto.Messages().ByName("MicroReport")
	fd_MicroReport_reporter = md_MicroReport.Fields().ByName("reporter")
	fd_MicroReport_power = md_MicroReport.Fields().ByName("power")
	fd_MicroReport_queryId = md_MicroReport.Fields().ByName("queryId")
	fd_MicroReport_value = md_MicroReport.Fields().ByName("value")
	fd_MicroReport_timestamp = md_MicroReport.Fields().ByName("timestamp")
}

var _ protoreflect.Message = (*fastReflection_MicroReport)(nil)

type fastReflection_MicroReport MicroReport

func (x *MicroReport) ProtoReflect() protoreflect.Message {
	return (*fastReflection_MicroReport)(x)
}

func (x *MicroReport) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_MicroReport_messageType fastReflection_MicroReport_messageType
var _ protoreflect.MessageType = fastReflection_MicroReport_messageType{}

type fastReflection_MicroReport_messageType struct{}

func (x fastReflection_MicroReport_messageType) Zero() protoreflect.Message {
	return (*fastReflection_MicroReport)(nil)
}
func (x fastReflection_MicroReport_messageType) New() protoreflect.Message {
	return new(fastReflection_MicroReport)
}
func (x fastReflection_MicroReport_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_MicroReport
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_MicroReport) Descriptor() protoreflect.MessageDescriptor {
	return md_MicroReport
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_MicroReport) Type() protoreflect.MessageType {
	return _fastReflection_MicroReport_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_MicroReport) New() protoreflect.Message {
	return new(fastReflection_MicroReport)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_MicroReport) Interface() protoreflect.ProtoMessage {
	return (*MicroReport)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_MicroReport) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Reporter != "" {
		value := protoreflect.ValueOfString(x.Reporter)
		if !f(fd_MicroReport_reporter, value) {
			return
		}
	}
	if x.Power != int64(0) {
		value := protoreflect.ValueOfInt64(x.Power)
		if !f(fd_MicroReport_power, value) {
			return
		}
	}
	if x.QueryId != "" {
		value := protoreflect.ValueOfString(x.QueryId)
		if !f(fd_MicroReport_queryId, value) {
			return
		}
	}
	if x.Value != "" {
		value := protoreflect.ValueOfString(x.Value)
		if !f(fd_MicroReport_value, value) {
			return
		}
	}
	if x.Timestamp != int64(0) {
		value := protoreflect.ValueOfInt64(x.Timestamp)
		if !f(fd_MicroReport_timestamp, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_MicroReport) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.dispute.MicroReport.reporter":
		return x.Reporter != ""
	case "layer.dispute.MicroReport.power":
		return x.Power != int64(0)
	case "layer.dispute.MicroReport.queryId":
		return x.QueryId != ""
	case "layer.dispute.MicroReport.value":
		return x.Value != ""
	case "layer.dispute.MicroReport.timestamp":
		return x.Timestamp != int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.MicroReport"))
		}
		panic(fmt.Errorf("message layer.dispute.MicroReport does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MicroReport) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.dispute.MicroReport.reporter":
		x.Reporter = ""
	case "layer.dispute.MicroReport.power":
		x.Power = int64(0)
	case "layer.dispute.MicroReport.queryId":
		x.QueryId = ""
	case "layer.dispute.MicroReport.value":
		x.Value = ""
	case "layer.dispute.MicroReport.timestamp":
		x.Timestamp = int64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.MicroReport"))
		}
		panic(fmt.Errorf("message layer.dispute.MicroReport does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_MicroReport) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.dispute.MicroReport.reporter":
		value := x.Reporter
		return protoreflect.ValueOfString(value)
	case "layer.dispute.MicroReport.power":
		value := x.Power
		return protoreflect.ValueOfInt64(value)
	case "layer.dispute.MicroReport.queryId":
		value := x.QueryId
		return protoreflect.ValueOfString(value)
	case "layer.dispute.MicroReport.value":
		value := x.Value
		return protoreflect.ValueOfString(value)
	case "layer.dispute.MicroReport.timestamp":
		value := x.Timestamp
		return protoreflect.ValueOfInt64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.MicroReport"))
		}
		panic(fmt.Errorf("message layer.dispute.MicroReport does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MicroReport) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.dispute.MicroReport.reporter":
		x.Reporter = value.Interface().(string)
	case "layer.dispute.MicroReport.power":
		x.Power = value.Int()
	case "layer.dispute.MicroReport.queryId":
		x.QueryId = value.Interface().(string)
	case "layer.dispute.MicroReport.value":
		x.Value = value.Interface().(string)
	case "layer.dispute.MicroReport.timestamp":
		x.Timestamp = value.Int()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.MicroReport"))
		}
		panic(fmt.Errorf("message layer.dispute.MicroReport does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MicroReport) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.MicroReport.reporter":
		panic(fmt.Errorf("field reporter of message layer.dispute.MicroReport is not mutable"))
	case "layer.dispute.MicroReport.power":
		panic(fmt.Errorf("field power of message layer.dispute.MicroReport is not mutable"))
	case "layer.dispute.MicroReport.queryId":
		panic(fmt.Errorf("field queryId of message layer.dispute.MicroReport is not mutable"))
	case "layer.dispute.MicroReport.value":
		panic(fmt.Errorf("field value of message layer.dispute.MicroReport is not mutable"))
	case "layer.dispute.MicroReport.timestamp":
		panic(fmt.Errorf("field timestamp of message layer.dispute.MicroReport is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.MicroReport"))
		}
		panic(fmt.Errorf("message layer.dispute.MicroReport does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_MicroReport) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.MicroReport.reporter":
		return protoreflect.ValueOfString("")
	case "layer.dispute.MicroReport.power":
		return protoreflect.ValueOfInt64(int64(0))
	case "layer.dispute.MicroReport.queryId":
		return protoreflect.ValueOfString("")
	case "layer.dispute.MicroReport.value":
		return protoreflect.ValueOfString("")
	case "layer.dispute.MicroReport.timestamp":
		return protoreflect.ValueOfInt64(int64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.MicroReport"))
		}
		panic(fmt.Errorf("message layer.dispute.MicroReport does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_MicroReport) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.dispute.MicroReport", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_MicroReport) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_MicroReport) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_MicroReport) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_MicroReport) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*MicroReport)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Reporter)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Power != 0 {
			n += 1 + runtime.Sov(uint64(x.Power))
		}
		l = len(x.QueryId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Value)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Timestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.Timestamp))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*MicroReport)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.Timestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Timestamp))
			i--
			dAtA[i] = 0x28
		}
		if len(x.Value) > 0 {
			i -= len(x.Value)
			copy(dAtA[i:], x.Value)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Value)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.QueryId) > 0 {
			i -= len(x.QueryId)
			copy(dAtA[i:], x.QueryId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.QueryId)))
			i--
			dAtA[i] = 0x1a
		}
		if x.Power != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.Power))
			i--
			dAtA[i] = 0x10
		}
		if len(x.Reporter) > 0 {
			i -= len(x.Reporter)
			copy(dAtA[i:], x.Reporter)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Reporter)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*MicroReport)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MicroReport: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: MicroReport: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Reporter = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
				}
				x.Power = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Power |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.QueryId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Value = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
				}
				x.Timestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.Timestamp |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_PayerInfo              protoreflect.MessageDescriptor
	fd_PayerInfo_payerAddress protoreflect.FieldDescriptor
	fd_PayerInfo_amount       protoreflect.FieldDescriptor
	fd_PayerInfo_fromBond     protoreflect.FieldDescriptor
)

func init() {
	file_layer_dispute_dispute_proto_init()
	md_PayerInfo = File_layer_dispute_dispute_proto.Messages().ByName("PayerInfo")
	fd_PayerInfo_payerAddress = md_PayerInfo.Fields().ByName("payerAddress")
	fd_PayerInfo_amount = md_PayerInfo.Fields().ByName("amount")
	fd_PayerInfo_fromBond = md_PayerInfo.Fields().ByName("fromBond")
}

var _ protoreflect.Message = (*fastReflection_PayerInfo)(nil)

type fastReflection_PayerInfo PayerInfo

func (x *PayerInfo) ProtoReflect() protoreflect.Message {
	return (*fastReflection_PayerInfo)(x)
}

func (x *PayerInfo) slowProtoReflect() protoreflect.Message {
	mi := &file_layer_dispute_dispute_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_PayerInfo_messageType fastReflection_PayerInfo_messageType
var _ protoreflect.MessageType = fastReflection_PayerInfo_messageType{}

type fastReflection_PayerInfo_messageType struct{}

func (x fastReflection_PayerInfo_messageType) Zero() protoreflect.Message {
	return (*fastReflection_PayerInfo)(nil)
}
func (x fastReflection_PayerInfo_messageType) New() protoreflect.Message {
	return new(fastReflection_PayerInfo)
}
func (x fastReflection_PayerInfo_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_PayerInfo
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_PayerInfo) Descriptor() protoreflect.MessageDescriptor {
	return md_PayerInfo
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_PayerInfo) Type() protoreflect.MessageType {
	return _fastReflection_PayerInfo_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_PayerInfo) New() protoreflect.Message {
	return new(fastReflection_PayerInfo)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_PayerInfo) Interface() protoreflect.ProtoMessage {
	return (*PayerInfo)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_PayerInfo) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PayerAddress != "" {
		value := protoreflect.ValueOfString(x.PayerAddress)
		if !f(fd_PayerInfo_payerAddress, value) {
			return
		}
	}
	if x.Amount != nil {
		value := protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
		if !f(fd_PayerInfo_amount, value) {
			return
		}
	}
	if x.FromBond != false {
		value := protoreflect.ValueOfBool(x.FromBond)
		if !f(fd_PayerInfo_fromBond, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_PayerInfo) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.payerAddress":
		return x.PayerAddress != ""
	case "layer.dispute.PayerInfo.amount":
		return x.Amount != nil
	case "layer.dispute.PayerInfo.fromBond":
		return x.FromBond != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.payerAddress":
		x.PayerAddress = ""
	case "layer.dispute.PayerInfo.amount":
		x.Amount = nil
	case "layer.dispute.PayerInfo.fromBond":
		x.FromBond = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_PayerInfo) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "layer.dispute.PayerInfo.payerAddress":
		value := x.PayerAddress
		return protoreflect.ValueOfString(value)
	case "layer.dispute.PayerInfo.amount":
		value := x.Amount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "layer.dispute.PayerInfo.fromBond":
		value := x.FromBond
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.payerAddress":
		x.PayerAddress = value.Interface().(string)
	case "layer.dispute.PayerInfo.amount":
		x.Amount = value.Message().Interface().(*v1beta1.Coin)
	case "layer.dispute.PayerInfo.fromBond":
		x.FromBond = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.amount":
		if x.Amount == nil {
			x.Amount = new(v1beta1.Coin)
		}
		return protoreflect.ValueOfMessage(x.Amount.ProtoReflect())
	case "layer.dispute.PayerInfo.payerAddress":
		panic(fmt.Errorf("field payerAddress of message layer.dispute.PayerInfo is not mutable"))
	case "layer.dispute.PayerInfo.fromBond":
		panic(fmt.Errorf("field fromBond of message layer.dispute.PayerInfo is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_PayerInfo) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "layer.dispute.PayerInfo.payerAddress":
		return protoreflect.ValueOfString("")
	case "layer.dispute.PayerInfo.amount":
		m := new(v1beta1.Coin)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "layer.dispute.PayerInfo.fromBond":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: layer.dispute.PayerInfo"))
		}
		panic(fmt.Errorf("message layer.dispute.PayerInfo does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_PayerInfo) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in layer.dispute.PayerInfo", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_PayerInfo) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_PayerInfo) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_PayerInfo) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_PayerInfo) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*PayerInfo)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.PayerAddress)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.Amount != nil {
			l = options.Size(x.Amount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.FromBond {
			n += 2
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*PayerInfo)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.FromBond {
			i--
			if x.FromBond {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x18
		}
		if x.Amount != nil {
			encoded, err := options.Marshal(x.Amount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.PayerAddress) > 0 {
			i -= len(x.PayerAddress)
			copy(dAtA[i:], x.PayerAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PayerAddress)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*PayerInfo)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PayerInfo: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: PayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PayerAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PayerAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.Amount == nil {
					x.Amount = &v1beta1.Coin{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Amount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FromBond", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.FromBond = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: layer/dispute/dispute.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DisputeCategory int32

const (
	// UNSPECIFIED defines an invalid dispute category.
	DisputeCategory_DISPUTE_CATEGORY_UNSPECIFIED DisputeCategory = 0
	// WARNING defines a 1 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_WARNING DisputeCategory = 1
	// MINOR defines a 5 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_MINOR DisputeCategory = 2
	// MAJOR defines a 100 percent slashing.
	DisputeCategory_DISPUTE_CATEGORY_MAJOR DisputeCategory = 3
)

// Enum value maps for DisputeCategory.
var (
	DisputeCategory_name = map[int32]string{
		0: "DISPUTE_CATEGORY_UNSPECIFIED",
		1: "DISPUTE_CATEGORY_WARNING",
		2: "DISPUTE_CATEGORY_MINOR",
		3: "DISPUTE_CATEGORY_MAJOR",
	}
	DisputeCategory_value = map[string]int32{
		"DISPUTE_CATEGORY_UNSPECIFIED": 0,
		"DISPUTE_CATEGORY_WARNING":     1,
		"DISPUTE_CATEGORY_MINOR":       2,
		"DISPUTE_CATEGORY_MAJOR":       3,
	}
)

func (x DisputeCategory) Enum() *DisputeCategory {
	p := new(DisputeCategory)
	*p = x
	return p
}

func (x DisputeCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_layer_dispute_dispute_proto_enumTypes[0].Descriptor()
}

func (DisputeCategory) Type() protoreflect.EnumType {
	return &file_layer_dispute_dispute_proto_enumTypes[0]
}

func (x DisputeCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeCategory.Descriptor instead.
func (DisputeCategory) EnumDescriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{0}
}

type DisputeStatus int32

const (
	// PREVOTE defines a dispute that hasn't started voting (ie in funding).
	DisputeStatus_DISPUTE_STATUS_PREVOTE DisputeStatus = 0
	// VOTING defines a dispute that has been funded and is in voting.
	DisputeStatus_DISPUTE_STATUS_VOTING DisputeStatus = 1
	// RESOLVED defines a dispute that has completed voting and reached quroum
	DisputeStatus_DISPUTE_STATUS_RESOLVED DisputeStatus = 2
	// UNRESOLVED defines a dispute that has completed voting and but hasn't reached quroum
	DisputeStatus_DISPUTE_STATUS_UNRESOLVED DisputeStatus = 3
	// FAILED defines a dispute that failed to pay the dispute fee to start vote.
	DisputeStatus_DISPUTE_STATUS_FAILED DisputeStatus = 4
)

// Enum value maps for DisputeStatus.
var (
	DisputeStatus_name = map[int32]string{
		0: "DISPUTE_STATUS_PREVOTE",
		1: "DISPUTE_STATUS_VOTING",
		2: "DISPUTE_STATUS_RESOLVED",
		3: "DISPUTE_STATUS_UNRESOLVED",
		4: "DISPUTE_STATUS_FAILED",
	}
	DisputeStatus_value = map[string]int32{
		"DISPUTE_STATUS_PREVOTE":    0,
		"DISPUTE_STATUS_VOTING":     1,
		"DISPUTE_STATUS_RESOLVED":   2,
		"DISPUTE_STATUS_UNRESOLVED": 3,
		"DISPUTE_STATUS_FAILED":     4,
	}
)

func (x DisputeStatus) Enum() *DisputeStatus {
	p := new(DisputeStatus)
	*p = x
	return p
}

func (x DisputeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DisputeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_layer_dispute_dispute_proto_enumTypes[1].Descriptor()
}

func (DisputeStatus) Type() protoreflect.EnumType {
	return &file_layer_dispute_dispute_proto_enumTypes[1]
}

func (x DisputeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DisputeStatus.Descriptor instead.
func (DisputeStatus) EnumDescriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{1}
}

type Dispute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashId            []byte                 `protobuf:"bytes,1,opt,name=hashId,proto3" json:"hashId,omitempty"`
	DisputeId         uint64                 `protobuf:"varint,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	DisputeCategory   DisputeCategory        `protobuf:"varint,3,opt,name=disputeCategory,proto3,enum=layer.dispute.DisputeCategory" json:"disputeCategory,omitempty"`
	DisputeFee        string                 `protobuf:"bytes,4,opt,name=disputeFee,proto3" json:"disputeFee,omitempty"`
	DisputeStatus     DisputeStatus          `protobuf:"varint,5,opt,name=disputeStatus,proto3,enum=layer.dispute.DisputeStatus" json:"disputeStatus,omitempty"`
	DisputeStartTime  *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=disputeStartTime,proto3" json:"disputeStartTime,omitempty"`
	DisputeEndTime    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=disputeEndTime,proto3" json:"disputeEndTime,omitempty"`
	DisputeStartBlock int64                  `protobuf:"varint,8,opt,name=disputeStartBlock,proto3" json:"disputeStartBlock,omitempty"`
	DisputeRound      uint64                 `protobuf:"varint,9,opt,name=disputeRound,proto3" json:"disputeRound,omitempty"`
	SlashAmount       string                 `protobuf:"bytes,10,opt,name=slashAmount,proto3" json:"slashAmount,omitempty"`
	BurnAmount        string                 `protobuf:"bytes,11,opt,name=burnAmount,proto3" json:"burnAmount,omitempty"`
	ReportEvidence    *MicroReport           `protobuf:"bytes,12,opt,name=reportEvidence,proto3" json:"reportEvidence,omitempty"`
	FeePayers         []*PayerInfo           `protobuf:"bytes,13,rep,name=feePayers,proto3" json:"feePayers,omitempty"`
	FeeTotal          string                 `protobuf:"bytes,14,opt,name=feeTotal,proto3" json:"feeTotal,omitempty"`
	PrevDisputeIds    []uint64               `protobuf:"varint,15,rep,packed,name=prevDisputeIds,proto3" json:"prevDisputeIds,omitempty"`
}

func (x *Dispute) Reset() {
	*x = Dispute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dispute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dispute) ProtoMessage() {}

// Deprecated: Use Dispute.ProtoReflect.Descriptor instead.
func (*Dispute) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{0}
}

func (x *Dispute) GetHashId() []byte {
	if x != nil {
		return x.HashId
	}
	return nil
}

func (x *Dispute) GetDisputeId() uint64 {
	if x != nil {
		return x.DisputeId
	}
	return 0
}

func (x *Dispute) GetDisputeCategory() DisputeCategory {
	if x != nil {
		return x.DisputeCategory
	}
	return DisputeCategory_DISPUTE_CATEGORY_UNSPECIFIED
}

func (x *Dispute) GetDisputeFee() string {
	if x != nil {
		return x.DisputeFee
	}
	return ""
}

func (x *Dispute) GetDisputeStatus() DisputeStatus {
	if x != nil {
		return x.DisputeStatus
	}
	return DisputeStatus_DISPUTE_STATUS_PREVOTE
}

func (x *Dispute) GetDisputeStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputeStartTime
	}
	return nil
}

func (x *Dispute) GetDisputeEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DisputeEndTime
	}
	return nil
}

func (x *Dispute) GetDisputeStartBlock() int64 {
	if x != nil {
		return x.DisputeStartBlock
	}
	return 0
}

func (x *Dispute) GetDisputeRound() uint64 {
	if x != nil {
		return x.DisputeRound
	}
	return 0
}

func (x *Dispute) GetSlashAmount() string {
	if x != nil {
		return x.SlashAmount
	}
	return ""
}

func (x *Dispute) GetBurnAmount() string {
	if x != nil {
		return x.BurnAmount
	}
	return ""
}

func (x *Dispute) GetReportEvidence() *MicroReport {
	if x != nil {
		return x.ReportEvidence
	}
	return nil
}

func (x *Dispute) GetFeePayers() []*PayerInfo {
	if x != nil {
		return x.FeePayers
	}
	return nil
}

func (x *Dispute) GetFeeTotal() string {
	if x != nil {
		return x.FeeTotal
	}
	return ""
}

func (x *Dispute) GetPrevDisputeIds() []uint64 {
	if x != nil {
		return x.PrevDisputeIds
	}
	return nil
}

type MicroReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reporter  string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Power     int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	QueryId   string `protobuf:"bytes,3,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *MicroReport) Reset() {
	*x = MicroReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MicroReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MicroReport) ProtoMessage() {}

// Deprecated: Use MicroReport.ProtoReflect.Descriptor instead.
func (*MicroReport) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{1}
}

func (x *MicroReport) GetReporter() string {
	if x != nil {
		return x.Reporter
	}
	return ""
}

func (x *MicroReport) GetPower() int64 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *MicroReport) GetQueryId() string {
	if x != nil {
		return x.QueryId
	}
	return ""
}

func (x *MicroReport) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *MicroReport) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PayerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayerAddress string        `protobuf:"bytes,1,opt,name=payerAddress,proto3" json:"payerAddress,omitempty"`
	Amount       *v1beta1.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromBond     bool          `protobuf:"varint,3,opt,name=fromBond,proto3" json:"fromBond,omitempty"`
}

func (x *PayerInfo) Reset() {
	*x = PayerInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_layer_dispute_dispute_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayerInfo) ProtoMessage() {}

// Deprecated: Use PayerInfo.ProtoReflect.Descriptor instead.
func (*PayerInfo) Descriptor() ([]byte, []int) {
	return file_layer_dispute_dispute_proto_rawDescGZIP(), []int{2}
}

func (x *PayerInfo) GetPayerAddress() string {
	if x != nil {
		return x.PayerAddress
	}
	return ""
}

func (x *PayerInfo) GetAmount() *v1beta1.Coin {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *PayerInfo) GetFromBond() bool {
	if x != nil {
		return x.FromBond
	}
	return false
}

var File_layer_dispute_dispute_proto protoreflect.FileDescriptor

var file_layer_dispute_dispute_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2f,
	0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x1a, 0x14, 0x67, 0x6f,
	0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2f, 0x76, 0x31, 0x62, 0x65,
	0x74, 0x61, 0x31, 0x2f, 0x63, 0x6f, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa1,
	0x07, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61,
	0x73, 0x68, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64,
	0x12, 0x48, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x4b, 0x0a, 0x0a, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b,
	0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64,
	0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2, 0xb4, 0x2d,
	0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x70, 0x75,
	0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x64, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x50, 0x0a, 0x10, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x10, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4c, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x08, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x4d, 0x0a,
	0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e,
	0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52,
	0x0b, 0x73, 0x6c, 0x61, 0x73, 0x68, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x0a,
	0x62, 0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0a, 0x62,
	0x75, 0x72, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x04, 0xc8,
	0xde, 0x1f, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64,
	0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x09, 0x66, 0x65, 0x65, 0x50, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x47, 0x0a, 0x08, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2b, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49,
	0x6e, 0x74, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x08, 0x66, 0x65, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x72,
	0x65, 0x76, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49, 0x64, 0x73, 0x18, 0x0f, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x76, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x49,
	0x64, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x0b, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x22, 0x84, 0x01, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x62, 0x65, 0x74, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x42,
	0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x6f, 0x6e, 0x64, 0x2a, 0xc3, 0x01, 0x0a, 0x0f, 0x44, 0x69,
	0x73, 0x70, 0x75, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a,
	0x1c, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52,
	0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x1a,
	0x0f, 0x8a, 0x9d, 0x20, 0x0b, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x29, 0x0a, 0x18, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45,
	0x47, 0x4f, 0x52, 0x59, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0b,
	0x8a, 0x9d, 0x20, 0x07, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x16, 0x44,
	0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f,
	0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x10, 0x02, 0x1a, 0x09, 0x8a, 0x9d, 0x20, 0x05, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x12, 0x25, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x43, 0x41,
	0x54, 0x45, 0x47, 0x4f, 0x52, 0x59, 0x5f, 0x4d, 0x41, 0x4a, 0x4f, 0x52, 0x10, 0x03, 0x1a, 0x09,
	0x8a, 0x9d, 0x20, 0x05, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x2a,
	0xe6, 0x01, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x27, 0x0a, 0x16, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x00, 0x1a, 0x0b, 0x8a,
	0x9d, 0x20, 0x07, 0x50, 0x72, 0x65, 0x76, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x15, 0x44, 0x49,
	0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x56, 0x4f, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x12, 0x29, 0x0a, 0x17, 0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x02, 0x1a, 0x0c,
	0x8a, 0x9d, 0x20, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x19,
	0x44, 0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55,
	0x4e, 0x52, 0x45, 0x53, 0x4f, 0x4c, 0x56, 0x45, 0x44, 0x10, 0x03, 0x1a, 0x0e, 0x8a, 0x9d, 0x20,
	0x0a, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x15, 0x44,
	0x49, 0x53, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x1a, 0x0a, 0x8a, 0x9d, 0x20, 0x06, 0x46, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x1a, 0x04, 0x88, 0xa3, 0x1e, 0x00, 0x42, 0x96, 0x01, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x2e, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x42, 0x0c,
	0x44, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x1e,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x2f, 0x64, 0x69, 0x73, 0x70, 0x75, 0x74, 0x65, 0xa2, 0x02,
	0x03, 0x4c, 0x44, 0x58, 0xaa, 0x02, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0xca, 0x02, 0x0d, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x44, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0xe2, 0x02, 0x19, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x5c, 0x44, 0x69, 0x73,
	0x70, 0x75, 0x74, 0x65, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x0e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x3a, 0x3a, 0x44, 0x69, 0x73, 0x70, 0x75, 0x74,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_layer_dispute_dispute_proto_rawDescOnce sync.Once
	file_layer_dispute_dispute_proto_rawDescData = file_layer_dispute_dispute_proto_rawDesc
)

func file_layer_dispute_dispute_proto_rawDescGZIP() []byte {
	file_layer_dispute_dispute_proto_rawDescOnce.Do(func() {
		file_layer_dispute_dispute_proto_rawDescData = protoimpl.X.CompressGZIP(file_layer_dispute_dispute_proto_rawDescData)
	})
	return file_layer_dispute_dispute_proto_rawDescData
}

var file_layer_dispute_dispute_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_layer_dispute_dispute_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_layer_dispute_dispute_proto_goTypes = []interface{}{
	(DisputeCategory)(0),          // 0: layer.dispute.DisputeCategory
	(DisputeStatus)(0),            // 1: layer.dispute.DisputeStatus
	(*Dispute)(nil),               // 2: layer.dispute.Dispute
	(*MicroReport)(nil),           // 3: layer.dispute.MicroReport
	(*PayerInfo)(nil),             // 4: layer.dispute.PayerInfo
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
	(*v1beta1.Coin)(nil),          // 6: cosmos.base.v1beta1.Coin
}
var file_layer_dispute_dispute_proto_depIdxs = []int32{
	0, // 0: layer.dispute.Dispute.disputeCategory:type_name -> layer.dispute.DisputeCategory
	1, // 1: layer.dispute.Dispute.disputeStatus:type_name -> layer.dispute.DisputeStatus
	5, // 2: layer.dispute.Dispute.disputeStartTime:type_name -> google.protobuf.Timestamp
	5, // 3: layer.dispute.Dispute.disputeEndTime:type_name -> google.protobuf.Timestamp
	3, // 4: layer.dispute.Dispute.reportEvidence:type_name -> layer.dispute.MicroReport
	4, // 5: layer.dispute.Dispute.feePayers:type_name -> layer.dispute.PayerInfo
	6, // 6: layer.dispute.PayerInfo.amount:type_name -> cosmos.base.v1beta1.Coin
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_layer_dispute_dispute_proto_init() }
func file_layer_dispute_dispute_proto_init() {
	if File_layer_dispute_dispute_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_layer_dispute_dispute_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dispute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_dispute_dispute_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MicroReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_layer_dispute_dispute_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayerInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_layer_dispute_dispute_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_layer_dispute_dispute_proto_goTypes,
		DependencyIndexes: file_layer_dispute_dispute_proto_depIdxs,
		EnumInfos:         file_layer_dispute_dispute_proto_enumTypes,
		MessageInfos:      file_layer_dispute_dispute_proto_msgTypes,
	}.Build()
	File_layer_dispute_dispute_proto = out.File
	file_layer_dispute_dispute_proto_rawDesc = nil
	file_layer_dispute_dispute_proto_goTypes = nil
	file_layer_dispute_dispute_proto_depIdxs = nil
}
