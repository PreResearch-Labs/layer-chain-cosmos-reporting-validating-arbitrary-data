// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/dispute/dispute.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DisputeCategory int32

const (
	// UNSPECIFIED defines an invalid dispute category.
	Unspecified DisputeCategory = 0
	// WARNING defines a 1 percent slashing.
	Warning DisputeCategory = 1
	// MINOR defines a 5 percent slashing.
	Minor DisputeCategory = 2
	// MAJOR defines a 100 percent slashing.
	Major DisputeCategory = 3
)

var DisputeCategory_name = map[int32]string{
	0: "DISPUTE_CATEGORY_UNSPECIFIED",
	1: "DISPUTE_CATEGORY_WARNING",
	2: "DISPUTE_CATEGORY_MINOR",
	3: "DISPUTE_CATEGORY_MAJOR",
}

var DisputeCategory_value = map[string]int32{
	"DISPUTE_CATEGORY_UNSPECIFIED": 0,
	"DISPUTE_CATEGORY_WARNING":     1,
	"DISPUTE_CATEGORY_MINOR":       2,
	"DISPUTE_CATEGORY_MAJOR":       3,
}

func (x DisputeCategory) String() string {
	return proto.EnumName(DisputeCategory_name, int32(x))
}

func (DisputeCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{0}
}

type DisputeStatus int32

const (
	// PREVOTE defines a dispute that hasn't started voting (ie in funding).
	Prevote DisputeStatus = 0
	// VOTING defines a dispute that has been funded and is in voting.
	Voting DisputeStatus = 1
	// RESOLVED defines a dispute that has completed voting and reached quroum
	Resolved DisputeStatus = 2
	// UNRESOLVED defines a dispute that has completed voting and but hasn't reached quroum
	Unresolved DisputeStatus = 3
	// FAILED defines a dispute that failed to pay the dispute fee to start vote.
	Failed DisputeStatus = 4
)

var DisputeStatus_name = map[int32]string{
	0: "DISPUTE_STATUS_PREVOTE",
	1: "DISPUTE_STATUS_VOTING",
	2: "DISPUTE_STATUS_RESOLVED",
	3: "DISPUTE_STATUS_UNRESOLVED",
	4: "DISPUTE_STATUS_FAILED",
}

var DisputeStatus_value = map[string]int32{
	"DISPUTE_STATUS_PREVOTE":    0,
	"DISPUTE_STATUS_VOTING":     1,
	"DISPUTE_STATUS_RESOLVED":   2,
	"DISPUTE_STATUS_UNRESOLVED": 3,
	"DISPUTE_STATUS_FAILED":     4,
}

func (x DisputeStatus) String() string {
	return proto.EnumName(DisputeStatus_name, int32(x))
}

func (DisputeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{1}
}

type Dispute struct {
	HashId            []byte                `protobuf:"bytes,1,opt,name=hashId,proto3" json:"hashId,omitempty"`
	DisputeId         uint64                `protobuf:"varint,2,opt,name=disputeId,proto3" json:"disputeId,omitempty"`
	DisputeCategory   DisputeCategory       `protobuf:"varint,3,opt,name=disputeCategory,proto3,enum=layer.dispute.DisputeCategory" json:"disputeCategory,omitempty"`
	DisputeFee        cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=disputeFee,proto3,customtype=cosmossdk.io/math.Int" json:"disputeFee"`
	DisputeStatus     DisputeStatus         `protobuf:"varint,5,opt,name=disputeStatus,proto3,enum=layer.dispute.DisputeStatus" json:"disputeStatus,omitempty"`
	DisputeStartTime  time.Time             `protobuf:"bytes,6,opt,name=disputeStartTime,proto3,stdtime" json:"disputeStartTime"`
	DisputeEndTime    time.Time             `protobuf:"bytes,7,opt,name=disputeEndTime,proto3,stdtime" json:"disputeEndTime"`
	DisputeStartBlock int64                 `protobuf:"varint,8,opt,name=disputeStartBlock,proto3" json:"disputeStartBlock,omitempty"`
	DisputeRound      uint64                `protobuf:"varint,9,opt,name=disputeRound,proto3" json:"disputeRound,omitempty"`
	SlashAmount       cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=slashAmount,proto3,customtype=cosmossdk.io/math.Int" json:"slashAmount"`
	BurnAmount        cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=burnAmount,proto3,customtype=cosmossdk.io/math.Int" json:"burnAmount"`
	ReportEvidence    MicroReport           `protobuf:"bytes,12,opt,name=reportEvidence,proto3" json:"reportEvidence"`
	FeePayers         []PayerInfo           `protobuf:"bytes,13,rep,name=feePayers,proto3" json:"feePayers"`
	FeeTotal          cosmossdk_io_math.Int `protobuf:"bytes,14,opt,name=feeTotal,proto3,customtype=cosmossdk.io/math.Int" json:"feeTotal"`
	PrevDisputeIds    []uint64              `protobuf:"varint,15,rep,packed,name=prevDisputeIds,proto3" json:"prevDisputeIds,omitempty"`
}

func (m *Dispute) Reset()         { *m = Dispute{} }
func (m *Dispute) String() string { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()    {}
func (*Dispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{0}
}
func (m *Dispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispute.Merge(m, src)
}
func (m *Dispute) XXX_Size() int {
	return m.Size()
}
func (m *Dispute) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispute.DiscardUnknown(m)
}

var xxx_messageInfo_Dispute proto.InternalMessageInfo

func (m *Dispute) GetHashId() []byte {
	if m != nil {
		return m.HashId
	}
	return nil
}

func (m *Dispute) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Dispute) GetDisputeCategory() DisputeCategory {
	if m != nil {
		return m.DisputeCategory
	}
	return Unspecified
}

func (m *Dispute) GetDisputeStatus() DisputeStatus {
	if m != nil {
		return m.DisputeStatus
	}
	return Prevote
}

func (m *Dispute) GetDisputeStartTime() time.Time {
	if m != nil {
		return m.DisputeStartTime
	}
	return time.Time{}
}

func (m *Dispute) GetDisputeEndTime() time.Time {
	if m != nil {
		return m.DisputeEndTime
	}
	return time.Time{}
}

func (m *Dispute) GetDisputeStartBlock() int64 {
	if m != nil {
		return m.DisputeStartBlock
	}
	return 0
}

func (m *Dispute) GetDisputeRound() uint64 {
	if m != nil {
		return m.DisputeRound
	}
	return 0
}

func (m *Dispute) GetReportEvidence() MicroReport {
	if m != nil {
		return m.ReportEvidence
	}
	return MicroReport{}
}

func (m *Dispute) GetFeePayers() []PayerInfo {
	if m != nil {
		return m.FeePayers
	}
	return nil
}

func (m *Dispute) GetPrevDisputeIds() []uint64 {
	if m != nil {
		return m.PrevDisputeIds
	}
	return nil
}

type MicroReport struct {
	Reporter  string `protobuf:"bytes,1,opt,name=reporter,proto3" json:"reporter,omitempty"`
	Power     int64  `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
	QueryId   string `protobuf:"bytes,3,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Value     string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Timestamp int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MicroReport) Reset()         { *m = MicroReport{} }
func (m *MicroReport) String() string { return proto.CompactTextString(m) }
func (*MicroReport) ProtoMessage()    {}
func (*MicroReport) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{1}
}
func (m *MicroReport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MicroReport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MicroReport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MicroReport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MicroReport.Merge(m, src)
}
func (m *MicroReport) XXX_Size() int {
	return m.Size()
}
func (m *MicroReport) XXX_DiscardUnknown() {
	xxx_messageInfo_MicroReport.DiscardUnknown(m)
}

var xxx_messageInfo_MicroReport proto.InternalMessageInfo

func (m *MicroReport) GetReporter() string {
	if m != nil {
		return m.Reporter
	}
	return ""
}

func (m *MicroReport) GetPower() int64 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *MicroReport) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *MicroReport) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *MicroReport) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type PayerInfo struct {
	PayerAddress string     `protobuf:"bytes,1,opt,name=payerAddress,proto3" json:"payerAddress,omitempty"`
	Amount       types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	FromBond     bool       `protobuf:"varint,3,opt,name=fromBond,proto3" json:"fromBond,omitempty"`
}

func (m *PayerInfo) Reset()         { *m = PayerInfo{} }
func (m *PayerInfo) String() string { return proto.CompactTextString(m) }
func (*PayerInfo) ProtoMessage()    {}
func (*PayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{2}
}
func (m *PayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayerInfo.Merge(m, src)
}
func (m *PayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayerInfo proto.InternalMessageInfo

func (m *PayerInfo) GetPayerAddress() string {
	if m != nil {
		return m.PayerAddress
	}
	return ""
}

func (m *PayerInfo) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *PayerInfo) GetFromBond() bool {
	if m != nil {
		return m.FromBond
	}
	return false
}

func init() {
	proto.RegisterEnum("layer.dispute.DisputeCategory", DisputeCategory_name, DisputeCategory_value)
	proto.RegisterEnum("layer.dispute.DisputeStatus", DisputeStatus_name, DisputeStatus_value)
	proto.RegisterType((*Dispute)(nil), "layer.dispute.Dispute")
	proto.RegisterType((*MicroReport)(nil), "layer.dispute.MicroReport")
	proto.RegisterType((*PayerInfo)(nil), "layer.dispute.PayerInfo")
}

func init() { proto.RegisterFile("layer/dispute/dispute.proto", fileDescriptor_2a5d4b70d69c78b5) }

var fileDescriptor_2a5d4b70d69c78b5 = []byte{
	// 931 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6f, 0xe2, 0x46,
	0x14, 0xc7, 0x81, 0xf0, 0x67, 0x48, 0x08, 0x1d, 0xed, 0x6e, 0x1d, 0x37, 0x22, 0x56, 0xa4, 0x6d,
	0xd9, 0xb4, 0xb1, 0x95, 0xf4, 0xd0, 0x4b, 0x2f, 0x10, 0x9c, 0xac, 0xdb, 0x04, 0xd0, 0x00, 0x59,
	0xb5, 0x97, 0xc8, 0xe0, 0x01, 0xdc, 0x35, 0x1e, 0x3a, 0x1e, 0xd3, 0xe6, 0xde, 0x43, 0x85, 0x54,
	0x69, 0xbf, 0x00, 0x87, 0xaa, 0x5f, 0xa1, 0xdf, 0xa0, 0x97, 0x3d, 0xae, 0x7a, 0xaa, 0x7a, 0xd8,
	0x56, 0x89, 0xd4, 0xcf, 0x51, 0xd9, 0x33, 0x40, 0x30, 0x7b, 0xc9, 0x9e, 0xe0, 0xf7, 0xde, 0xef,
	0x37, 0xfe, 0xbd, 0x37, 0x7e, 0xcf, 0xe0, 0x23, 0xd7, 0xba, 0xc1, 0x54, 0xb7, 0x1d, 0x7f, 0x1c,
	0x30, 0x3c, 0xff, 0xd5, 0xc6, 0x94, 0x30, 0x02, 0xb7, 0xa3, 0xa4, 0x26, 0x82, 0xca, 0xa3, 0x01,
	0x19, 0x90, 0x28, 0xa3, 0x87, 0xff, 0x38, 0x49, 0xd9, 0xed, 0x11, 0x7f, 0x44, 0xfc, 0x6b, 0x9e,
	0xe0, 0x40, 0xa4, 0xf6, 0x07, 0x84, 0x0c, 0x5c, 0xac, 0x47, 0xa8, 0x1b, 0xf4, 0x75, 0xe6, 0x8c,
	0xb0, 0xcf, 0xac, 0xd1, 0x58, 0x10, 0x4a, 0x9c, 0xae, 0x77, 0x2d, 0x1f, 0xeb, 0x93, 0xe3, 0x2e,
	0x66, 0xd6, 0xb1, 0xde, 0x23, 0x8e, 0xc7, 0xf3, 0x07, 0xbf, 0x66, 0x40, 0xa6, 0xc6, 0x9f, 0x0e,
	0x9f, 0x80, 0xf4, 0xd0, 0xf2, 0x87, 0xa6, 0x2d, 0x4b, 0xaa, 0x54, 0xde, 0x42, 0x02, 0xc1, 0x3d,
	0x90, 0x13, 0x06, 0x4d, 0x5b, 0xde, 0x50, 0xa5, 0x72, 0x0a, 0x2d, 0x03, 0xf0, 0x39, 0xd8, 0x11,
	0xe0, 0xd4, 0x62, 0x78, 0x40, 0xe8, 0x8d, 0x9c, 0x54, 0xa5, 0x72, 0xe1, 0xa4, 0xa4, 0xad, 0x14,
	0xa7, 0xd5, 0x56, 0x59, 0x28, 0x2e, 0x83, 0x5f, 0x03, 0x20, 0x42, 0x67, 0x18, 0xcb, 0x29, 0x55,
	0x2a, 0xe7, 0xaa, 0x9f, 0xbe, 0x7e, 0xbb, 0x9f, 0xf8, 0xfb, 0xed, 0xfe, 0x63, 0x5e, 0x87, 0x6f,
	0xbf, 0xd4, 0x1c, 0xa2, 0x8f, 0x2c, 0x36, 0xd4, 0x4c, 0x8f, 0xfd, 0xf9, 0xfb, 0x11, 0x10, 0xfd,
	0x30, 0x3d, 0x86, 0xee, 0xc9, 0x61, 0x15, 0x6c, 0x0b, 0xd4, 0x62, 0x16, 0x0b, 0x7c, 0x79, 0x33,
	0x32, 0xb5, 0xf7, 0x6e, 0x53, 0x9c, 0x83, 0x56, 0x25, 0xb0, 0x09, 0x8a, 0xcb, 0x00, 0x65, 0x6d,
	0x67, 0x84, 0xe5, 0xb4, 0x2a, 0x95, 0xf3, 0x27, 0x8a, 0xc6, 0x1b, 0xaf, 0xcd, 0x1b, 0xaf, 0xb5,
	0xe7, 0x8d, 0xaf, 0x66, 0x43, 0xcb, 0xaf, 0xfe, 0xd9, 0x97, 0xd0, 0x9a, 0x1a, 0x5e, 0x80, 0x82,
	0x88, 0x19, 0x9e, 0x1d, 0x9d, 0x97, 0x79, 0xc0, 0x79, 0x31, 0x2d, 0xfc, 0x0c, 0x7c, 0x70, 0xff,
	0x09, 0x55, 0x97, 0xf4, 0x5e, 0xca, 0x59, 0x55, 0x2a, 0x27, 0xd1, 0x7a, 0x02, 0x1e, 0x80, 0x2d,
	0x11, 0x44, 0x24, 0xf0, 0x6c, 0x39, 0x17, 0xdd, 0xe4, 0x4a, 0x0c, 0x5e, 0x82, 0xbc, 0xef, 0x5a,
	0xfe, 0xb0, 0x32, 0x22, 0x81, 0xc7, 0x64, 0xf0, 0xf0, 0x3b, 0xb8, 0xaf, 0x0f, 0x6f, 0xb4, 0x1b,
	0x50, 0x4f, 0x9c, 0x96, 0x7f, 0x8f, 0x1b, 0x5d, 0xca, 0xe1, 0x73, 0x50, 0xa0, 0x78, 0x4c, 0x28,
	0x33, 0x26, 0x8e, 0x8d, 0xbd, 0x1e, 0x96, 0xb7, 0x44, 0xef, 0x56, 0xaf, 0xf4, 0xd2, 0xe9, 0x51,
	0x82, 0x22, 0x66, 0x35, 0x15, 0x3e, 0x0c, 0xc5, 0x74, 0xf0, 0x4b, 0x90, 0xeb, 0x63, 0xdc, 0x0c,
	0x55, 0xbe, 0xbc, 0xad, 0x26, 0xcb, 0xf9, 0x13, 0x39, 0x76, 0x48, 0x94, 0x34, 0xbd, 0x3e, 0x11,
	0x47, 0x2c, 0x05, 0xf0, 0x1c, 0x64, 0xfb, 0x18, 0xb7, 0x09, 0xb3, 0x5c, 0xb9, 0xf0, 0xf0, 0x92,
	0x16, 0x62, 0xf8, 0x31, 0x28, 0x8c, 0x29, 0x9e, 0xd4, 0xe6, 0xa3, 0xe4, 0xcb, 0x3b, 0x6a, 0xb2,
	0x9c, 0x42, 0xb1, 0xe8, 0xc1, 0x2f, 0x12, 0xc8, 0xdf, 0x2b, 0x0a, 0x2a, 0x20, 0xcb, 0x0b, 0xc2,
	0x34, 0x9a, 0xd4, 0x1c, 0x5a, 0x60, 0xf8, 0x08, 0x6c, 0x8e, 0xc9, 0x0f, 0x98, 0x46, 0x73, 0x9a,
	0x44, 0x1c, 0x40, 0x19, 0x64, 0xbe, 0x0f, 0x30, 0xbd, 0x31, 0xed, 0x68, 0x36, 0x73, 0x68, 0x0e,
	0x43, 0xfe, 0xc4, 0x72, 0x03, 0x31, 0x6e, 0x88, 0x83, 0x70, 0xe2, 0x17, 0x8b, 0x24, 0x1a, 0x9c,
	0x24, 0x5a, 0x06, 0x0e, 0x7e, 0x92, 0x40, 0x6e, 0xd1, 0x9f, 0xf0, 0xb5, 0x1a, 0x87, 0xa0, 0x62,
	0xdb, 0x14, 0xfb, 0xbe, 0x70, 0xb4, 0x12, 0x83, 0x5f, 0x80, 0xb4, 0xc5, 0xdf, 0x81, 0x8d, 0xe8,
	0xca, 0x76, 0x35, 0xd1, 0x90, 0x70, 0x2d, 0x69, 0x62, 0x2d, 0x69, 0xa7, 0xc4, 0xf1, 0x44, 0xbb,
	0x05, 0x3d, 0x2c, 0xb5, 0x4f, 0xc9, 0xa8, 0x4a, 0x3c, 0xee, 0x3c, 0x8b, 0x16, 0xf8, 0xf0, 0x0f,
	0x09, 0xec, 0xc4, 0x76, 0x0a, 0x3c, 0x06, 0x7b, 0x35, 0xb3, 0xd5, 0xec, 0xb4, 0x8d, 0xeb, 0xd3,
	0x4a, 0xdb, 0x38, 0x6f, 0xa0, 0x6f, 0xae, 0x3b, 0xf5, 0x56, 0xd3, 0x38, 0x35, 0xcf, 0x4c, 0xa3,
	0x56, 0x4c, 0x28, 0x3b, 0xd3, 0x99, 0x9a, 0xef, 0x78, 0xfe, 0x18, 0xf7, 0x9c, 0xbe, 0x83, 0x6d,
	0xf8, 0x0c, 0xc8, 0x6b, 0x92, 0x17, 0x15, 0x54, 0x37, 0xeb, 0xe7, 0x45, 0x49, 0xc9, 0x4f, 0x67,
	0x6a, 0xe6, 0x85, 0x45, 0x3d, 0xc7, 0x1b, 0xc0, 0xa7, 0xe0, 0xc9, 0x1a, 0xf5, 0xd2, 0xac, 0x37,
	0x50, 0x71, 0x43, 0xc9, 0x4d, 0x67, 0xea, 0xe6, 0xa5, 0xe3, 0x11, 0xfa, 0x6e, 0x5a, 0xe5, 0xab,
	0x06, 0x2a, 0x26, 0x05, 0xcd, 0xfa, 0x8e, 0x50, 0x25, 0xf5, 0xf3, 0x6f, 0xa5, 0xc4, 0xe1, 0x7f,
	0x12, 0xd8, 0x5e, 0x59, 0x42, 0xf0, 0x93, 0xa5, 0xbc, 0xd5, 0xae, 0xb4, 0x3b, 0xad, 0xeb, 0x26,
	0x32, 0xae, 0x1a, 0x6d, 0xa3, 0x98, 0xe0, 0x76, 0x9a, 0x14, 0x4f, 0x08, 0xc3, 0xf0, 0x29, 0x78,
	0x1c, 0x23, 0x5e, 0x35, 0xda, 0xdc, 0x36, 0x98, 0xce, 0xd4, 0xf4, 0x15, 0x61, 0xa1, 0xeb, 0x67,
	0xe0, 0xc3, 0x18, 0x0d, 0x19, 0xad, 0xc6, 0xc5, 0x95, 0x51, 0x2b, 0x6e, 0x28, 0x5b, 0xd3, 0x99,
	0x9a, 0x45, 0xd8, 0x27, 0xee, 0x04, 0xdb, 0xf0, 0x08, 0xec, 0xc6, 0xa8, 0x9d, 0xfa, 0x82, 0x9c,
	0x54, 0x0a, 0xd3, 0x99, 0x0a, 0x3a, 0x1e, 0x9d, 0xd3, 0xd7, 0x0d, 0x9c, 0x55, 0xcc, 0x0b, 0xa3,
	0x56, 0x4c, 0x71, 0x03, 0x67, 0x96, 0xe3, 0x62, 0x9b, 0x17, 0x5a, 0xad, 0xbd, 0xbe, 0x2d, 0x49,
	0x6f, 0x6e, 0x4b, 0xd2, 0xbf, 0xb7, 0x25, 0xe9, 0xd5, 0x5d, 0x29, 0xf1, 0xe6, 0xae, 0x94, 0xf8,
	0xeb, 0xae, 0x94, 0xf8, 0xf6, 0x70, 0xe0, 0xb0, 0x61, 0xd0, 0xd5, 0x7a, 0x64, 0xa4, 0x33, 0xec,
	0xba, 0x84, 0x1e, 0x39, 0x44, 0xe7, 0x9f, 0xcd, 0x1f, 0x17, 0x1f, 0x4e, 0x76, 0x33, 0xc6, 0x7e,
	0x37, 0x1d, 0x2d, 0xc8, 0xcf, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xc6, 0xa0, 0x11, 0xd2, 0x56,
	0x07, 0x00, 0x00,
}

func (m *Dispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PrevDisputeIds) > 0 {
		dAtA2 := make([]byte, len(m.PrevDisputeIds)*10)
		var j1 int
		for _, num := range m.PrevDisputeIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDispute(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x7a
	}
	{
		size := m.FeeTotal.Size()
		i -= size
		if _, err := m.FeeTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.FeePayers) > 0 {
		for iNdEx := len(m.FeePayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeePayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDispute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	{
		size, err := m.ReportEvidence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.SlashAmount.Size()
		i -= size
		if _, err := m.SlashAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.DisputeRound != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeRound))
		i--
		dAtA[i] = 0x48
	}
	if m.DisputeStartBlock != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeStartBlock))
		i--
		dAtA[i] = 0x40
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DisputeEndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeEndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDispute(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DisputeStartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintDispute(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if m.DisputeStatus != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeStatus))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.DisputeFee.Size()
		i -= size
		if _, err := m.DisputeFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DisputeCategory != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeCategory))
		i--
		dAtA[i] = 0x18
	}
	if m.DisputeId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MicroReport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MicroReport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MicroReport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Power != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Reporter) > 0 {
		i -= len(m.Reporter)
		copy(dAtA[i:], m.Reporter)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.Reporter)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FromBond {
		i--
		if m.FromBond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PayerAddress) > 0 {
		i -= len(m.PayerAddress)
		copy(dAtA[i:], m.PayerAddress)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.PayerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovDispute(uint64(m.DisputeId))
	}
	if m.DisputeCategory != 0 {
		n += 1 + sovDispute(uint64(m.DisputeCategory))
	}
	l = m.DisputeFee.Size()
	n += 1 + l + sovDispute(uint64(l))
	if m.DisputeStatus != 0 {
		n += 1 + sovDispute(uint64(m.DisputeStatus))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeStartTime)
	n += 1 + l + sovDispute(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeEndTime)
	n += 1 + l + sovDispute(uint64(l))
	if m.DisputeStartBlock != 0 {
		n += 1 + sovDispute(uint64(m.DisputeStartBlock))
	}
	if m.DisputeRound != 0 {
		n += 1 + sovDispute(uint64(m.DisputeRound))
	}
	l = m.SlashAmount.Size()
	n += 1 + l + sovDispute(uint64(l))
	l = m.BurnAmount.Size()
	n += 1 + l + sovDispute(uint64(l))
	l = m.ReportEvidence.Size()
	n += 1 + l + sovDispute(uint64(l))
	if len(m.FeePayers) > 0 {
		for _, e := range m.FeePayers {
			l = e.Size()
			n += 1 + l + sovDispute(uint64(l))
		}
	}
	l = m.FeeTotal.Size()
	n += 1 + l + sovDispute(uint64(l))
	if len(m.PrevDisputeIds) > 0 {
		l = 0
		for _, e := range m.PrevDisputeIds {
			l += sovDispute(uint64(e))
		}
		n += 1 + sovDispute(uint64(l)) + l
	}
	return n
}

func (m *MicroReport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Reporter)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovDispute(uint64(m.Power))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovDispute(uint64(m.Timestamp))
	}
	return n
}

func (m *PayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayerAddress)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDispute(uint64(l))
	if m.FromBond {
		n += 2
	}
	return n
}

func sovDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispute(x uint64) (n int) {
	return sovDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = append(m.HashId[:0], dAtA[iNdEx:postIndex]...)
			if m.HashId == nil {
				m.HashId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeCategory", wireType)
			}
			m.DisputeCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeCategory |= DisputeCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DisputeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeStatus", wireType)
			}
			m.DisputeStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeStatus |= DisputeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DisputeStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DisputeEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeStartBlock", wireType)
			}
			m.DisputeStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeRound", wireType)
			}
			m.DisputeRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportEvidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReportEvidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayers = append(m.FeePayers, PayerInfo{})
			if err := m.FeePayers[len(m.FeePayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispute
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrevDisputeIds = append(m.PrevDisputeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispute
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispute
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispute
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrevDisputeIds) == 0 {
					m.PrevDisputeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispute
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrevDisputeIds = append(m.PrevDisputeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevDisputeIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MicroReport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MicroReport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MicroReport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reporter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reporter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromBond = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispute = fmt.Errorf("proto: unexpected end of group")
)
