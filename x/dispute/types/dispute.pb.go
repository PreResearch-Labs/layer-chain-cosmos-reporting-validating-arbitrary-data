// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/dispute/dispute.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types "github.com/tellor-io/layer/x/oracle/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DisputeCategory defines the severity of a dispute.
type DisputeCategory int32

const (
	// UNSPECIFIED defines an invalid dispute category.
	Unspecified DisputeCategory = 0
	// WARNING defines a 1 percent slashing.
	Warning DisputeCategory = 1
	// MINOR defines a 5 percent slashing.
	Minor DisputeCategory = 2
	// MAJOR defines a 100 percent slashing.
	Major DisputeCategory = 3
)

var DisputeCategory_name = map[int32]string{
	0: "DISPUTE_CATEGORY_UNSPECIFIED",
	1: "DISPUTE_CATEGORY_WARNING",
	2: "DISPUTE_CATEGORY_MINOR",
	3: "DISPUTE_CATEGORY_MAJOR",
}

var DisputeCategory_value = map[string]int32{
	"DISPUTE_CATEGORY_UNSPECIFIED": 0,
	"DISPUTE_CATEGORY_WARNING":     1,
	"DISPUTE_CATEGORY_MINOR":       2,
	"DISPUTE_CATEGORY_MAJOR":       3,
}

func (x DisputeCategory) String() string {
	return proto.EnumName(DisputeCategory_name, int32(x))
}

func (DisputeCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{0}
}

// DisputeStatus defines the status of a dispute.
type DisputeStatus int32

const (
	// PREVOTE defines a dispute that hasn't started voting (ie in funding).
	Prevote DisputeStatus = 0
	// VOTING defines a dispute that has been funded and is in voting.
	Voting DisputeStatus = 1
	// RESOLVED defines a dispute that has completed voting and reached quroum
	Resolved DisputeStatus = 2
	// UNRESOLVED defines a dispute that has completed voting and but hasn't reached quroum
	Unresolved DisputeStatus = 3
	// FAILED defines a dispute that failed to pay the dispute fee to start vote.
	Failed DisputeStatus = 4
)

var DisputeStatus_name = map[int32]string{
	0: "DISPUTE_STATUS_PREVOTE",
	1: "DISPUTE_STATUS_VOTING",
	2: "DISPUTE_STATUS_RESOLVED",
	3: "DISPUTE_STATUS_UNRESOLVED",
	4: "DISPUTE_STATUS_FAILED",
}

var DisputeStatus_value = map[string]int32{
	"DISPUTE_STATUS_PREVOTE":    0,
	"DISPUTE_STATUS_VOTING":     1,
	"DISPUTE_STATUS_RESOLVED":   2,
	"DISPUTE_STATUS_UNRESOLVED": 3,
	"DISPUTE_STATUS_FAILED":     4,
}

func (x DisputeStatus) String() string {
	return proto.EnumName(DisputeStatus_name, int32(x))
}

func (DisputeStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{1}
}

// Dispute defines a dispute.
type Dispute struct {
	// unique dispute hash identifier
	HashId []byte `protobuf:"bytes,1,opt,name=hash_id,json=hashId,proto3" json:"hash_id,omitempty"`
	// current dispute id
	DisputeId uint64 `protobuf:"varint,2,opt,name=dispute_id,json=disputeId,proto3" json:"dispute_id,omitempty"`
	// dispute severity level
	DisputeCategory DisputeCategory `protobuf:"varint,3,opt,name=dispute_category,json=disputeCategory,proto3,enum=layer.dispute.DisputeCategory" json:"dispute_category,omitempty"`
	// cost to start dispute
	DisputeFee cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=dispute_fee,json=disputeFee,proto3,customtype=cosmossdk.io/math.Int" json:"dispute_fee"`
	// current dispute status
	DisputeStatus DisputeStatus `protobuf:"varint,5,opt,name=dispute_status,json=disputeStatus,proto3,enum=layer.dispute.DisputeStatus" json:"dispute_status,omitempty"`
	// start time of the dispute that begins after dispute fee is fully paid
	DisputeStartTime time.Time `protobuf:"bytes,6,opt,name=dispute_start_time,json=disputeStartTime,proto3,stdtime" json:"dispute_start_time"`
	// end time that the dispute stop taking votes and creating new rounds
	DisputeEndTime time.Time `protobuf:"bytes,7,opt,name=dispute_end_time,json=disputeEndTime,proto3,stdtime" json:"dispute_end_time"`
	// height of the block that started the dispute
	DisputeStartBlock int64 `protobuf:"varint,8,opt,name=dispute_start_block,json=disputeStartBlock,proto3" json:"dispute_start_block,omitempty"`
	// current dispute round
	DisputeRound uint64 `protobuf:"varint,9,opt,name=dispute_round,json=disputeRound,proto3" json:"dispute_round,omitempty"`
	// reporter's slashed amount
	SlashAmount cosmossdk_io_math.Int `protobuf:"bytes,10,opt,name=slash_amount,json=slashAmount,proto3,customtype=cosmossdk.io/math.Int" json:"slash_amount"`
	// burn amount that will be divided in half and paid to voters and the other half burned
	BurnAmount cosmossdk_io_math.Int `protobuf:"bytes,11,opt,name=burn_amount,json=burnAmount,proto3,customtype=cosmossdk.io/math.Int" json:"burn_amount"`
	// single report evidence
	ReportEvidence types.MicroReport `protobuf:"bytes,12,opt,name=report_evidence,json=reportEvidence,proto3" json:"report_evidence"`
	// fee payers that were involved in paying the dispute fee in order to start the dispute
	FeePayers []PayerInfo `protobuf:"bytes,13,rep,name=fee_payers,json=feePayers,proto3" json:"fee_payers"`
	// total fee paid tracked to know if dispute fee is fully paid to start dispute
	FeeTotal cosmossdk_io_math.Int `protobuf:"bytes,14,opt,name=fee_total,json=feeTotal,proto3,customtype=cosmossdk.io/math.Int" json:"fee_total"`
	// list of dispute ids that preceded before this current round began
	PrevDisputeIds []uint64 `protobuf:"varint,15,rep,packed,name=prev_dispute_ids,json=prevDisputeIds,proto3" json:"prev_dispute_ids,omitempty"`
	// block number when this specific dispute was created
	BlockNumber int64 `protobuf:"varint,16,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	Open        bool  `protobuf:"varint,17,opt,name=open,proto3" json:"open,omitempty"`
}

func (m *Dispute) Reset()         { *m = Dispute{} }
func (m *Dispute) String() string { return proto.CompactTextString(m) }
func (*Dispute) ProtoMessage()    {}
func (*Dispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{0}
}
func (m *Dispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Dispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Dispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Dispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Dispute.Merge(m, src)
}
func (m *Dispute) XXX_Size() int {
	return m.Size()
}
func (m *Dispute) XXX_DiscardUnknown() {
	xxx_messageInfo_Dispute.DiscardUnknown(m)
}

var xxx_messageInfo_Dispute proto.InternalMessageInfo

func (m *Dispute) GetHashId() []byte {
	if m != nil {
		return m.HashId
	}
	return nil
}

func (m *Dispute) GetDisputeId() uint64 {
	if m != nil {
		return m.DisputeId
	}
	return 0
}

func (m *Dispute) GetDisputeCategory() DisputeCategory {
	if m != nil {
		return m.DisputeCategory
	}
	return Unspecified
}

func (m *Dispute) GetDisputeStatus() DisputeStatus {
	if m != nil {
		return m.DisputeStatus
	}
	return Prevote
}

func (m *Dispute) GetDisputeStartTime() time.Time {
	if m != nil {
		return m.DisputeStartTime
	}
	return time.Time{}
}

func (m *Dispute) GetDisputeEndTime() time.Time {
	if m != nil {
		return m.DisputeEndTime
	}
	return time.Time{}
}

func (m *Dispute) GetDisputeStartBlock() int64 {
	if m != nil {
		return m.DisputeStartBlock
	}
	return 0
}

func (m *Dispute) GetDisputeRound() uint64 {
	if m != nil {
		return m.DisputeRound
	}
	return 0
}

func (m *Dispute) GetReportEvidence() types.MicroReport {
	if m != nil {
		return m.ReportEvidence
	}
	return types.MicroReport{}
}

func (m *Dispute) GetFeePayers() []PayerInfo {
	if m != nil {
		return m.FeePayers
	}
	return nil
}

func (m *Dispute) GetPrevDisputeIds() []uint64 {
	if m != nil {
		return m.PrevDisputeIds
	}
	return nil
}

func (m *Dispute) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *Dispute) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

// PayerInfo defines the payer info of a dispute
// fee payer's info that was involved in paying the dispute fee in order to start the dispute
type PayerInfo struct {
	// fee payer's Account address
	PayerAddress []byte `protobuf:"bytes,1,opt,name=payer_address,json=payerAddress,proto3" json:"payer_address,omitempty"`
	// amount paid
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// source of funds either from bond or free floating funds
	FromBond bool `protobuf:"varint,3,opt,name=from_bond,json=fromBond,proto3" json:"from_bond,omitempty"`
	// block number when this specific fee was paid
	// keeping track of this in case the bond was used
	// in order to reward the reporters' delegators in the future
	BlockNumber int64 `protobuf:"varint,4,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
}

func (m *PayerInfo) Reset()         { *m = PayerInfo{} }
func (m *PayerInfo) String() string { return proto.CompactTextString(m) }
func (*PayerInfo) ProtoMessage()    {}
func (*PayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{1}
}
func (m *PayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PayerInfo.Merge(m, src)
}
func (m *PayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PayerInfo proto.InternalMessageInfo

func (m *PayerInfo) GetPayerAddress() []byte {
	if m != nil {
		return m.PayerAddress
	}
	return nil
}

func (m *PayerInfo) GetFromBond() bool {
	if m != nil {
		return m.FromBond
	}
	return false
}

func (m *PayerInfo) GetBlockNumber() int64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type BlockInfo struct {
	// total reporter power at block
	TotalReporterPower cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_reporter_power,json=totalReporterPower,proto3,customtype=cosmossdk.io/math.Int" json:"total_reporter_power"`
	// total user tips at block
	TotalUserTips cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=total_user_tips,json=totalUserTips,proto3,customtype=cosmossdk.io/math.Int" json:"total_user_tips"`
}

func (m *BlockInfo) Reset()         { *m = BlockInfo{} }
func (m *BlockInfo) String() string { return proto.CompactTextString(m) }
func (*BlockInfo) ProtoMessage()    {}
func (*BlockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_2a5d4b70d69c78b5, []int{2}
}
func (m *BlockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockInfo.Merge(m, src)
}
func (m *BlockInfo) XXX_Size() int {
	return m.Size()
}
func (m *BlockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_BlockInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("layer.dispute.DisputeCategory", DisputeCategory_name, DisputeCategory_value)
	proto.RegisterEnum("layer.dispute.DisputeStatus", DisputeStatus_name, DisputeStatus_value)
	proto.RegisterType((*Dispute)(nil), "layer.dispute.Dispute")
	proto.RegisterType((*PayerInfo)(nil), "layer.dispute.PayerInfo")
	proto.RegisterType((*BlockInfo)(nil), "layer.dispute.BlockInfo")
}

func init() { proto.RegisterFile("layer/dispute/dispute.proto", fileDescriptor_2a5d4b70d69c78b5) }

var fileDescriptor_2a5d4b70d69c78b5 = []byte{
	// 1018 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x3d, 0x6f, 0xdb, 0x46,
	0x18, 0x16, 0x2d, 0xc5, 0x96, 0x4e, 0xb2, 0xc4, 0x5c, 0x93, 0x86, 0x56, 0x52, 0x99, 0x75, 0x11,
	0x54, 0x71, 0x61, 0x12, 0x76, 0xe7, 0x0e, 0x92, 0x45, 0x27, 0x2c, 0x6c, 0x49, 0x38, 0x49, 0x0e,
	0x5a, 0xa0, 0x20, 0x28, 0xf1, 0x24, 0xb3, 0xa1, 0x78, 0xc4, 0xdd, 0xc9, 0xad, 0xff, 0x41, 0xa1,
	0x29, 0x7f, 0x40, 0x53, 0xff, 0x42, 0x3b, 0x77, 0xe8, 0x92, 0x31, 0xe8, 0x54, 0x74, 0x48, 0x0b,
	0x1b, 0xe8, 0xd0, 0x5f, 0x51, 0xdc, 0x91, 0xf4, 0x67, 0x16, 0x65, 0x32, 0xdf, 0xe7, 0x9e, 0xf7,
	0xe1, 0xf3, 0x7e, 0xf0, 0x2c, 0xf0, 0x38, 0x70, 0xcf, 0x30, 0x35, 0x3d, 0x9f, 0x45, 0x33, 0x8e,
	0xd3, 0xbf, 0x46, 0x44, 0x09, 0x27, 0x70, 0x5d, 0x1e, 0x1a, 0x09, 0x58, 0xad, 0x8d, 0x08, 0x9b,
	0x12, 0x66, 0x0e, 0x5d, 0x86, 0xcd, 0xd3, 0xdd, 0x21, 0xe6, 0xee, 0xae, 0x39, 0x22, 0x7e, 0x18,
	0xd3, 0xab, 0x1b, 0xf1, 0xb9, 0x23, 0x23, 0x33, 0x0e, 0x92, 0xa3, 0x07, 0x13, 0x32, 0x21, 0x31,
	0x2e, 0x9e, 0x12, 0x74, 0x73, 0x42, 0xc8, 0x24, 0xc0, 0xa6, 0x8c, 0x86, 0xb3, 0xb1, 0xc9, 0xfd,
	0x29, 0x66, 0xdc, 0x9d, 0x46, 0x29, 0x21, 0x76, 0x47, 0xa8, 0x3b, 0x0a, 0xb0, 0x39, 0xf5, 0x47,
	0x94, 0x38, 0x14, 0x47, 0x84, 0xf2, 0x98, 0xb0, 0xf5, 0xdf, 0x1a, 0x58, 0x6b, 0xc5, 0xf6, 0xe0,
	0x23, 0xb0, 0x76, 0xe2, 0xb2, 0x13, 0xc7, 0xf7, 0x34, 0x45, 0x57, 0xea, 0x25, 0xb4, 0x2a, 0x42,
	0xdb, 0x83, 0x9f, 0x00, 0x90, 0x94, 0x20, 0xce, 0x56, 0x74, 0xa5, 0x9e, 0x43, 0x85, 0x04, 0xb1,
	0x3d, 0x68, 0x03, 0x35, 0x3d, 0x1e, 0xb9, 0x1c, 0x4f, 0x08, 0x3d, 0xd3, 0xb2, 0xba, 0x52, 0x2f,
	0xef, 0xd5, 0x8c, 0x1b, 0x0d, 0x30, 0x92, 0x37, 0xed, 0x27, 0x2c, 0x54, 0xf1, 0x6e, 0x02, 0xf0,
	0x10, 0x14, 0x53, 0xa9, 0x31, 0xc6, 0x5a, 0x4e, 0x57, 0xea, 0x85, 0xe6, 0x17, 0x6f, 0xde, 0x6d,
	0x66, 0xfe, 0x7a, 0xb7, 0xf9, 0x30, 0xee, 0x08, 0xf3, 0x5e, 0x19, 0x3e, 0x31, 0xa7, 0x2e, 0x3f,
	0x31, 0xec, 0x90, 0xff, 0xf1, 0xcb, 0x0e, 0x48, 0x5a, 0x65, 0x87, 0x1c, 0xa5, 0x4e, 0x0f, 0x30,
	0x86, 0xfb, 0xa0, 0x9c, 0xaa, 0x31, 0xee, 0xf2, 0x19, 0xd3, 0xee, 0x49, 0x5b, 0x4f, 0xde, 0x6f,
	0xab, 0x27, 0x39, 0x68, 0xdd, 0xbb, 0x1e, 0x42, 0x04, 0xe0, 0x35, 0x11, 0xca, 0x1d, 0xd1, 0x63,
	0x6d, 0x55, 0x57, 0xea, 0xc5, 0xbd, 0xaa, 0x11, 0x0f, 0xc0, 0x48, 0x07, 0x60, 0xf4, 0xd3, 0x01,
	0x34, 0xf3, 0xc2, 0xf5, 0xeb, 0xbf, 0x37, 0x15, 0xa4, 0x5e, 0x09, 0x52, 0x2e, 0x08, 0xb0, 0x7d,
	0xd5, 0x31, 0x1c, 0x7a, 0xb1, 0xe2, 0xda, 0x12, 0x8a, 0x69, 0x59, 0x56, 0xe8, 0x49, 0x3d, 0x03,
	0x7c, 0x74, 0xd3, 0xe3, 0x30, 0x20, 0xa3, 0x57, 0x5a, 0x5e, 0x57, 0xea, 0x59, 0x74, 0xff, 0xfa,
	0xeb, 0x9b, 0xe2, 0x00, 0x7e, 0x06, 0xd2, 0x22, 0x1d, 0x4a, 0x66, 0xa1, 0xa7, 0x15, 0xe4, 0x4c,
	0x4b, 0x09, 0x88, 0x04, 0x06, 0xdb, 0xa0, 0xc4, 0x02, 0xb1, 0x0f, 0xee, 0x94, 0xcc, 0x42, 0xae,
	0x81, 0xe5, 0x87, 0x51, 0x94, 0x02, 0x0d, 0x99, 0x2f, 0x66, 0x3b, 0x9c, 0xd1, 0x30, 0x95, 0x2b,
	0x7e, 0xc0, 0x6c, 0x45, 0x7e, 0xa2, 0xf6, 0x02, 0x54, 0xe2, 0x45, 0x76, 0xf0, 0xa9, 0xef, 0xe1,
	0x70, 0x84, 0xb5, 0x92, 0xec, 0xe0, 0x46, 0x32, 0xdc, 0x78, 0xe7, 0x8d, 0x23, 0xb1, 0xf3, 0x48,
	0x32, 0x9b, 0x39, 0xf1, 0x32, 0x54, 0x8e, 0xf3, 0xac, 0x24, 0x0d, 0x7e, 0x05, 0xc0, 0x18, 0x63,
	0x27, 0x12, 0x59, 0x4c, 0x5b, 0xd7, 0xb3, 0xf5, 0xe2, 0x9e, 0x76, 0x6b, 0x43, 0xba, 0x22, 0xb2,
	0xc3, 0x31, 0x49, 0x34, 0x0a, 0x63, 0x8c, 0x25, 0xc6, 0xe0, 0x0b, 0x20, 0x02, 0x87, 0x13, 0xee,
	0x06, 0x5a, 0x79, 0xf9, 0xa2, 0xf2, 0x63, 0x8c, 0xfb, 0x22, 0x19, 0xd6, 0x81, 0x1a, 0x51, 0x7c,
	0xea, 0x5c, 0x7d, 0x6b, 0x4c, 0xab, 0xe8, 0xd9, 0x7a, 0x0e, 0x95, 0x05, 0xde, 0x4a, 0x3f, 0x38,
	0x06, 0x3f, 0x05, 0x25, 0x39, 0x61, 0x27, 0x9c, 0x4d, 0x87, 0x98, 0x6a, 0xaa, 0x1c, 0x74, 0x51,
	0x62, 0x6d, 0x09, 0x41, 0x08, 0x72, 0x24, 0xc2, 0xa1, 0x76, 0x5f, 0x57, 0xea, 0x79, 0x24, 0x9f,
	0xb7, 0x7e, 0x55, 0x40, 0xe1, 0xb2, 0x12, 0xb1, 0x04, 0xb2, 0x66, 0xc7, 0xf5, 0x3c, 0x8a, 0x19,
	0x4b, 0x3e, 0xfa, 0x92, 0x04, 0x1b, 0x31, 0x06, 0xf7, 0xc1, 0x6a, 0x32, 0xaf, 0x95, 0xe5, 0x4b,
	0x4b, 0x52, 0xe1, 0x63, 0x50, 0x18, 0x53, 0x32, 0x75, 0x86, 0x24, 0xf4, 0xe4, 0xcd, 0x90, 0x47,
	0x79, 0x01, 0x34, 0x49, 0xe8, 0xdd, 0xa9, 0x25, 0x77, 0xa7, 0x96, 0xad, 0xdf, 0x14, 0x50, 0x90,
	0x8b, 0x2b, 0x7d, 0x7f, 0x07, 0x1e, 0xc8, 0x66, 0x27, 0x17, 0x19, 0xa6, 0x4e, 0x44, 0x7e, 0xc0,
	0x54, 0xda, 0x5f, 0xd2, 0x20, 0x94, 0x42, 0x28, 0xd1, 0xe9, 0x0a, 0x19, 0xd8, 0x03, 0x95, 0x58,
	0x7e, 0xc6, 0x30, 0x75, 0xb8, 0x1f, 0xb1, 0x0f, 0x29, 0x7d, 0x5d, 0x6a, 0x0c, 0x18, 0xa6, 0x7d,
	0x3f, 0x62, 0xdb, 0xbf, 0x2b, 0xa0, 0x72, 0xeb, 0xf2, 0x83, 0xbb, 0xe0, 0x49, 0xcb, 0xee, 0x75,
	0x07, 0x7d, 0xcb, 0xd9, 0x6f, 0xf4, 0xad, 0xe7, 0x1d, 0xf4, 0x8d, 0x33, 0x68, 0xf7, 0xba, 0xd6,
	0xbe, 0x7d, 0x60, 0x5b, 0x2d, 0x35, 0x53, 0xad, 0xcc, 0x17, 0x7a, 0x71, 0x10, 0xb2, 0x08, 0x8f,
	0xfc, 0xb1, 0x8f, 0x3d, 0xf8, 0x0c, 0x68, 0x77, 0x52, 0x5e, 0x36, 0x50, 0xdb, 0x6e, 0x3f, 0x57,
	0x95, 0x6a, 0x71, 0xbe, 0xd0, 0xd7, 0x5e, 0xba, 0x34, 0xf4, 0xc3, 0x09, 0x7c, 0x0a, 0x3e, 0xbe,
	0x43, 0x3d, 0xb2, 0xdb, 0x1d, 0xa4, 0xae, 0x54, 0x0b, 0xf3, 0x85, 0x7e, 0xef, 0xc8, 0x0f, 0x09,
	0x7d, 0x3f, 0xad, 0xf1, 0x75, 0x07, 0xa9, 0xd9, 0x84, 0xe6, 0x7e, 0x4f, 0x68, 0x35, 0xf7, 0xd3,
	0xcf, 0xb5, 0xcc, 0xf6, 0xbf, 0x0a, 0x58, 0xbf, 0x71, 0x57, 0xc2, 0xcf, 0xaf, 0xd2, 0x7b, 0xfd,
	0x46, 0x7f, 0xd0, 0x73, 0xba, 0xc8, 0x3a, 0xee, 0xf4, 0x2d, 0x35, 0x13, 0xdb, 0xe9, 0x52, 0x7c,
	0x4a, 0x38, 0x86, 0x4f, 0xc1, 0xc3, 0x5b, 0xc4, 0xe3, 0x4e, 0x3f, 0xb6, 0x0d, 0xe6, 0x0b, 0x7d,
	0xf5, 0x98, 0x70, 0xe1, 0xfa, 0x19, 0x78, 0x74, 0x8b, 0x86, 0xac, 0x5e, 0xe7, 0xf0, 0xd8, 0x6a,
	0xa9, 0x2b, 0xd5, 0xd2, 0x7c, 0xa1, 0xe7, 0x11, 0x66, 0x24, 0x38, 0xc5, 0x1e, 0xdc, 0x01, 0x1b,
	0xb7, 0xa8, 0x83, 0xf6, 0x25, 0x39, 0x5b, 0x2d, 0xcf, 0x17, 0x3a, 0x18, 0x84, 0x34, 0xa5, 0xdf,
	0x35, 0x70, 0xd0, 0xb0, 0x0f, 0xad, 0x96, 0x9a, 0x8b, 0x0d, 0x1c, 0xb8, 0x7e, 0x80, 0xbd, 0xb8,
	0xd0, 0x66, 0xeb, 0xcd, 0x79, 0x4d, 0x79, 0x7b, 0x5e, 0x53, 0xfe, 0x39, 0xaf, 0x29, 0xaf, 0x2f,
	0x6a, 0x99, 0xb7, 0x17, 0xb5, 0xcc, 0x9f, 0x17, 0xb5, 0xcc, 0xb7, 0xdb, 0x13, 0x9f, 0x9f, 0xcc,
	0x86, 0xc6, 0x88, 0x4c, 0x4d, 0x8e, 0x83, 0x80, 0xd0, 0x1d, 0x9f, 0x98, 0xf1, 0x7f, 0xd9, 0x1f,
	0x2f, 0x7f, 0x05, 0xf0, 0xb3, 0x08, 0xb3, 0xe1, 0xaa, 0xbc, 0xc3, 0xbf, 0xfc, 0x3f, 0x00, 0x00,
	0xff, 0xff, 0xcb, 0xac, 0xa6, 0x5b, 0x23, 0x08, 0x00, 0x00,
}

func (m *Dispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Dispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BlockNumber != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.PrevDisputeIds) > 0 {
		dAtA2 := make([]byte, len(m.PrevDisputeIds)*10)
		var j1 int
		for _, num := range m.PrevDisputeIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDispute(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x7a
	}
	{
		size := m.FeeTotal.Size()
		i -= size
		if _, err := m.FeeTotal.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	if len(m.FeePayers) > 0 {
		for iNdEx := len(m.FeePayers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeePayers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDispute(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	{
		size, err := m.ReportEvidence.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	{
		size := m.BurnAmount.Size()
		i -= size
		if _, err := m.BurnAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.SlashAmount.Size()
		i -= size
		if _, err := m.SlashAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.DisputeRound != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeRound))
		i--
		dAtA[i] = 0x48
	}
	if m.DisputeStartBlock != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeStartBlock))
		i--
		dAtA[i] = 0x40
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DisputeEndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeEndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintDispute(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.DisputeStartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeStartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintDispute(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x32
	if m.DisputeStatus != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeStatus))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.DisputeFee.Size()
		i -= size
		if _, err := m.DisputeFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.DisputeCategory != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeCategory))
		i--
		dAtA[i] = 0x18
	}
	if m.DisputeId != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.DisputeId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HashId) > 0 {
		i -= len(m.HashId)
		copy(dAtA[i:], m.HashId)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.HashId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PayerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PayerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintDispute(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.FromBond {
		i--
		if m.FromBond {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PayerAddress) > 0 {
		i -= len(m.PayerAddress)
		copy(dAtA[i:], m.PayerAddress)
		i = encodeVarintDispute(dAtA, i, uint64(len(m.PayerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalUserTips.Size()
		i -= size
		if _, err := m.TotalUserTips.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalReporterPower.Size()
		i -= size
		if _, err := m.TotalReporterPower.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDispute(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintDispute(dAtA []byte, offset int, v uint64) int {
	offset -= sovDispute(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Dispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HashId)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	if m.DisputeId != 0 {
		n += 1 + sovDispute(uint64(m.DisputeId))
	}
	if m.DisputeCategory != 0 {
		n += 1 + sovDispute(uint64(m.DisputeCategory))
	}
	l = m.DisputeFee.Size()
	n += 1 + l + sovDispute(uint64(l))
	if m.DisputeStatus != 0 {
		n += 1 + sovDispute(uint64(m.DisputeStatus))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeStartTime)
	n += 1 + l + sovDispute(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.DisputeEndTime)
	n += 1 + l + sovDispute(uint64(l))
	if m.DisputeStartBlock != 0 {
		n += 1 + sovDispute(uint64(m.DisputeStartBlock))
	}
	if m.DisputeRound != 0 {
		n += 1 + sovDispute(uint64(m.DisputeRound))
	}
	l = m.SlashAmount.Size()
	n += 1 + l + sovDispute(uint64(l))
	l = m.BurnAmount.Size()
	n += 1 + l + sovDispute(uint64(l))
	l = m.ReportEvidence.Size()
	n += 1 + l + sovDispute(uint64(l))
	if len(m.FeePayers) > 0 {
		for _, e := range m.FeePayers {
			l = e.Size()
			n += 1 + l + sovDispute(uint64(l))
		}
	}
	l = m.FeeTotal.Size()
	n += 1 + l + sovDispute(uint64(l))
	if len(m.PrevDisputeIds) > 0 {
		l = 0
		for _, e := range m.PrevDisputeIds {
			l += sovDispute(uint64(e))
		}
		n += 1 + sovDispute(uint64(l)) + l
	}
	if m.BlockNumber != 0 {
		n += 2 + sovDispute(uint64(m.BlockNumber))
	}
	if m.Open {
		n += 3
	}
	return n
}

func (m *PayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PayerAddress)
	if l > 0 {
		n += 1 + l + sovDispute(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovDispute(uint64(l))
	if m.FromBond {
		n += 2
	}
	if m.BlockNumber != 0 {
		n += 1 + sovDispute(uint64(m.BlockNumber))
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalReporterPower.Size()
	n += 1 + l + sovDispute(uint64(l))
	l = m.TotalUserTips.Size()
	n += 1 + l + sovDispute(uint64(l))
	return n
}

func sovDispute(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDispute(x uint64) (n int) {
	return sovDispute(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Dispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HashId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HashId = append(m.HashId[:0], dAtA[iNdEx:postIndex]...)
			if m.HashId == nil {
				m.HashId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeId", wireType)
			}
			m.DisputeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeCategory", wireType)
			}
			m.DisputeCategory = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeCategory |= DisputeCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DisputeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeStatus", wireType)
			}
			m.DisputeStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeStatus |= DisputeStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DisputeStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.DisputeEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeStartBlock", wireType)
			}
			m.DisputeStartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeStartBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisputeRound", wireType)
			}
			m.DisputeRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DisputeRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportEvidence", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReportEvidence.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeePayers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeePayers = append(m.FeePayers, PayerInfo{})
			if err := m.FeePayers[len(m.FeePayers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeTotal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeTotal.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispute
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PrevDisputeIds = append(m.PrevDisputeIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDispute
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDispute
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDispute
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PrevDisputeIds) == 0 {
					m.PrevDisputeIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDispute
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PrevDisputeIds = append(m.PrevDisputeIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevDisputeIds", wireType)
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayerAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PayerAddress = append(m.PayerAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.PayerAddress == nil {
				m.PayerAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromBond", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromBond = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReporterPower", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalReporterPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUserTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDispute
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDispute
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalUserTips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDispute(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDispute
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDispute(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDispute
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDispute
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDispute
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDispute
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDispute
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDispute        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDispute          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDispute = fmt.Errorf("proto: unexpected end of group")
)
