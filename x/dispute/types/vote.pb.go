// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/dispute/vote.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VoteResult int32

const (
	VoteResult_NO_TALLY         VoteResult = 0
	VoteResult_PASSED           VoteResult = 1
	VoteResult_FAILED           VoteResult = 2
	VoteResult_UNRESOLVEDPASSED VoteResult = 3
	VoteResult_UNRESOLVEDFAILED VoteResult = 4
)

var VoteResult_name = map[int32]string{
	0: "NO_TALLY",
	1: "PASSED",
	2: "FAILED",
	3: "UNRESOLVEDPASSED",
	4: "UNRESOLVEDFAILED",
}

var VoteResult_value = map[string]int32{
	"NO_TALLY":         0,
	"PASSED":           1,
	"FAILED":           2,
	"UNRESOLVEDPASSED": 3,
	"UNRESOLVEDFAILED": 4,
}

func (x VoteResult) String() string {
	return proto.EnumName(VoteResult_name, int32(x))
}

func (VoteResult) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1b528b9404bfff75, []int{0}
}

type Vote struct {
	Id         uint64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	VoteStart  time.Time  `protobuf:"bytes,2,opt,name=voteStart,proto3,stdtime" json:"voteStart"`
	VoteEnd    time.Time  `protobuf:"bytes,3,opt,name=voteEnd,proto3,stdtime" json:"voteEnd"`
	VoteResult VoteResult `protobuf:"varint,4,opt,name=voteResult,proto3,enum=layer.dispute.VoteResult" json:"voteResult,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b528b9404bfff75, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Vote) GetVoteStart() time.Time {
	if m != nil {
		return m.VoteStart
	}
	return time.Time{}
}

func (m *Vote) GetVoteEnd() time.Time {
	if m != nil {
		return m.VoteEnd
	}
	return time.Time{}
}

func (m *Vote) GetVoteResult() VoteResult {
	if m != nil {
		return m.VoteResult
	}
	return VoteResult_NO_TALLY
}

func init() {
	proto.RegisterEnum("layer.dispute.VoteResult", VoteResult_name, VoteResult_value)
	proto.RegisterType((*Vote)(nil), "layer.dispute.Vote")
}

func init() { proto.RegisterFile("layer/dispute/vote.proto", fileDescriptor_1b528b9404bfff75) }

var fileDescriptor_1b528b9404bfff75 = []byte{
	// 339 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xc1, 0x4a, 0xf3, 0x40,
	0x14, 0x85, 0x33, 0x69, 0xe8, 0xdf, 0xff, 0xaa, 0x25, 0x0c, 0x5d, 0xc4, 0x2e, 0xd2, 0xe2, 0xaa,
	0x14, 0x9c, 0x81, 0xba, 0x72, 0x23, 0xb4, 0x24, 0x82, 0x10, 0x5a, 0x49, 0x6a, 0x41, 0x17, 0x4a,
	0x6b, 0xc6, 0x18, 0x48, 0x9d, 0x90, 0x4c, 0xc4, 0xbe, 0x45, 0x1f, 0xab, 0xcb, 0x6e, 0x04, 0x57,
	0x2a, 0xed, 0x8b, 0x48, 0x92, 0xa6, 0xb5, 0x4b, 0x77, 0x67, 0xee, 0xf9, 0xee, 0x1c, 0x66, 0x0e,
	0x68, 0xc1, 0x78, 0xc6, 0x22, 0xea, 0xfa, 0x71, 0x98, 0x08, 0x46, 0x5f, 0xb9, 0x60, 0x24, 0x8c,
	0xb8, 0xe0, 0xf8, 0x28, 0x73, 0xc8, 0xc6, 0xa9, 0x37, 0x3c, 0xce, 0xbd, 0x80, 0xd1, 0xcc, 0x9c,
	0x24, 0x4f, 0x54, 0xf8, 0x53, 0x16, 0x8b, 0xf1, 0x34, 0xcc, 0xf9, 0x7a, 0xcd, 0xe3, 0x1e, 0xcf,
	0x24, 0x4d, 0x55, 0x3e, 0x3d, 0x79, 0x47, 0xa0, 0x8c, 0xb8, 0x60, 0xb8, 0x0a, 0xb2, 0xef, 0x6a,
	0xa8, 0x89, 0x5a, 0x8a, 0x2d, 0xfb, 0x2e, 0xee, 0xc1, 0xff, 0x34, 0xcc, 0x11, 0xe3, 0x48, 0x68,
	0x72, 0x13, 0xb5, 0x0e, 0x3a, 0x75, 0x92, 0x67, 0x90, 0x22, 0x83, 0x0c, 0x8b, 0x8c, 0x5e, 0x65,
	0xf1, 0xd9, 0x90, 0xe6, 0x5f, 0x0d, 0x64, 0xef, 0xd6, 0xf0, 0x05, 0xfc, 0x4b, 0x0f, 0xe6, 0x8b,
	0xab, 0x95, 0xfe, 0x70, 0x43, 0xb1, 0x84, 0xcf, 0x01, 0x52, 0x69, 0xb3, 0x38, 0x09, 0x84, 0xa6,
	0x34, 0x51, 0xab, 0xda, 0x39, 0x26, 0x7b, 0xef, 0x26, 0xa3, 0x2d, 0x60, 0xff, 0x82, 0xdb, 0xf7,
	0x00, 0x3b, 0x07, 0x1f, 0x42, 0xa5, 0x3f, 0x78, 0x18, 0x76, 0x2d, 0xeb, 0x56, 0x95, 0x30, 0x40,
	0xf9, 0xba, 0xeb, 0x38, 0xa6, 0xa1, 0xa2, 0x54, 0x5f, 0x76, 0xaf, 0x2c, 0xd3, 0x50, 0x65, 0x5c,
	0x03, 0xf5, 0xa6, 0x6f, 0x9b, 0xce, 0xc0, 0x1a, 0x99, 0xc6, 0x86, 0x28, 0xed, 0x4f, 0x37, 0xac,
	0xd2, 0x33, 0x16, 0x2b, 0x1d, 0x2d, 0x57, 0x3a, 0xfa, 0x5e, 0xe9, 0x68, 0xbe, 0xd6, 0xa5, 0xe5,
	0x5a, 0x97, 0x3e, 0xd6, 0xba, 0x74, 0xd7, 0xf6, 0x7c, 0xf1, 0x9c, 0x4c, 0xc8, 0x23, 0x9f, 0x52,
	0xc1, 0x82, 0x80, 0x47, 0xa7, 0x3e, 0xa7, 0x79, 0x8d, 0x6f, 0xdb, 0x22, 0xc5, 0x2c, 0x64, 0xf1,
	0xa4, 0x9c, 0xfd, 0xc3, 0xd9, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x6e, 0x27, 0x28, 0xe6,
	0x01, 0x00, 0x00,
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.VoteResult != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.VoteResult))
		i--
		dAtA[i] = 0x20
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.VoteEnd, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VoteEnd):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintVote(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.VoteStart, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VoteStart):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintVote(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovVote(uint64(m.Id))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VoteStart)
	n += 1 + l + sovVote(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.VoteEnd)
	n += 1 + l + sovVote(uint64(l))
	if m.VoteResult != 0 {
		n += 1 + sovVote(uint64(m.VoteResult))
	}
	return n
}

func sovVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVote(x uint64) (n int) {
	return sovVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteStart", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.VoteStart, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteEnd", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.VoteEnd, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VoteResult", wireType)
			}
			m.VoteResult = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VoteResult |= VoteResult(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVote = fmt.Errorf("proto: unexpected end of group")
)
