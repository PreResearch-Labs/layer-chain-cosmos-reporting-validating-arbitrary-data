// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	address "cosmossdk.io/core/address"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	math "cosmossdk.io/math"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/staking/types"
)

// StakingKeeper is an autogenerated mock type for the StakingKeeper type
type StakingKeeper struct {
	mock.Mock
}

// AddValidatorTokensAndShares provides a mock function with given fields: ctx, validator, tokensToAdd
func (_m *StakingKeeper) AddValidatorTokensAndShares(ctx context.Context, validator types.Validator, tokensToAdd math.Int) (types.Validator, math.LegacyDec, error) {
	ret := _m.Called(ctx, validator, tokensToAdd)

	var r0 types.Validator
	var r1 math.LegacyDec
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator, math.Int) (types.Validator, math.LegacyDec, error)); ok {
		return rf(ctx, validator, tokensToAdd)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator, math.Int) types.Validator); ok {
		r0 = rf(ctx, validator, tokensToAdd)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Validator, math.Int) math.LegacyDec); ok {
		r1 = rf(ctx, validator, tokensToAdd)
	} else {
		r1 = ret.Get(1).(math.LegacyDec)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.Validator, math.Int) error); ok {
		r2 = rf(ctx, validator, tokensToAdd)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ConsensusAddressCodec provides a mock function with given fields:
func (_m *StakingKeeper) ConsensusAddressCodec() address.Codec {
	ret := _m.Called()

	var r0 address.Codec
	if rf, ok := ret.Get(0).(func() address.Codec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(address.Codec)
		}
	}

	return r0
}

// Delegate provides a mock function with given fields: ctx, delAddr, bondAmt, tokenSrc, validator, subtractAccount
func (_m *StakingKeeper) Delegate(ctx context.Context, delAddr cosmos_sdktypes.AccAddress, bondAmt math.Int, tokenSrc types.BondStatus, validator types.Validator, subtractAccount bool) (math.LegacyDec, error) {
	ret := _m.Called(ctx, delAddr, bondAmt, tokenSrc, validator, subtractAccount)

	var r0 math.LegacyDec
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, math.Int, types.BondStatus, types.Validator, bool) (math.LegacyDec, error)); ok {
		return rf(ctx, delAddr, bondAmt, tokenSrc, validator, subtractAccount)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, math.Int, types.BondStatus, types.Validator, bool) math.LegacyDec); ok {
		r0 = rf(ctx, delAddr, bondAmt, tokenSrc, validator, subtractAccount)
	} else {
		r0 = ret.Get(0).(math.LegacyDec)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress, math.Int, types.BondStatus, types.Validator, bool) error); ok {
		r1 = rf(ctx, delAddr, bondAmt, tokenSrc, validator, subtractAccount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteValidatorByPowerIndex provides a mock function with given fields: ctx, validator
func (_m *StakingKeeper) DeleteValidatorByPowerIndex(ctx context.Context, validator types.Validator) error {
	ret := _m.Called(ctx, validator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator) error); ok {
		r0 = rf(ctx, validator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDelegation provides a mock function with given fields: ctx, delAddr, valAddr
func (_m *StakingKeeper) GetDelegation(ctx context.Context, delAddr cosmos_sdktypes.AccAddress, valAddr cosmos_sdktypes.ValAddress) (types.Delegation, error) {
	ret := _m.Called(ctx, delAddr, valAddr)

	var r0 types.Delegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) (types.Delegation, error)); ok {
		return rf(ctx, delAddr, valAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) types.Delegation); ok {
		r0 = rf(ctx, delAddr, valAddr)
	} else {
		r0 = ret.Get(0).(types.Delegation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, delAddr, valAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastTotalPower provides a mock function with given fields: ctx
func (_m *StakingKeeper) GetLastTotalPower(ctx context.Context) (math.Int, error) {
	ret := _m.Called(ctx)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (math.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidator provides a mock function with given fields: ctx, addr
func (_m *StakingKeeper) GetValidator(ctx context.Context, addr cosmos_sdktypes.ValAddress) (types.Validator, error) {
	ret := _m.Called(ctx, addr)

	var r0 types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) (types.Validator, error)); ok {
		return rf(ctx, addr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ValAddress) types.Validator); ok {
		r0 = rf(ctx, addr)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, addr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetValidatorByConsAddr provides a mock function with given fields: ctx, consAddr
func (_m *StakingKeeper) GetValidatorByConsAddr(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress) (types.Validator, error) {
	ret := _m.Called(ctx, consAddr)

	var r0 types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) (types.Validator, error)); ok {
		return rf(ctx, consAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) types.Validator); ok {
		r0 = rf(ctx, consAddr)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.ConsAddress) error); ok {
		r1 = rf(ctx, consAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IterateDelegatorDelegations provides a mock function with given fields: ctx, delegator, cb
func (_m *StakingKeeper) IterateDelegatorDelegations(ctx context.Context, delegator cosmos_sdktypes.AccAddress, cb func(types.Delegation) bool) error {
	ret := _m.Called(ctx, delegator, cb)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, func(types.Delegation) bool) error); ok {
		r0 = rf(ctx, delegator, cb)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Jail provides a mock function with given fields: ctx, consAddr
func (_m *StakingKeeper) Jail(ctx context.Context, consAddr cosmos_sdktypes.ConsAddress) error {
	ret := _m.Called(ctx, consAddr)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.ConsAddress) error); ok {
		r0 = rf(ctx, consAddr)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveDelegation provides a mock function with given fields: ctx, delegation
func (_m *StakingKeeper) RemoveDelegation(ctx context.Context, delegation types.Delegation) error {
	ret := _m.Called(ctx, delegation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Delegation) error); ok {
		r0 = rf(ctx, delegation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RemoveValidatorTokens provides a mock function with given fields: ctx, validator, tokensToRemove
func (_m *StakingKeeper) RemoveValidatorTokens(ctx context.Context, validator types.Validator, tokensToRemove math.Int) (types.Validator, error) {
	ret := _m.Called(ctx, validator, tokensToRemove)

	var r0 types.Validator
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator, math.Int) (types.Validator, error)); ok {
		return rf(ctx, validator, tokensToRemove)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator, math.Int) types.Validator); ok {
		r0 = rf(ctx, validator, tokensToRemove)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Validator, math.Int) error); ok {
		r1 = rf(ctx, validator, tokensToRemove)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveValidatorTokensAndShares provides a mock function with given fields: ctx, validator, sharesToRemove
func (_m *StakingKeeper) RemoveValidatorTokensAndShares(ctx context.Context, validator types.Validator, sharesToRemove math.LegacyDec) (types.Validator, math.Int, error) {
	ret := _m.Called(ctx, validator, sharesToRemove)

	var r0 types.Validator
	var r1 math.Int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator, math.LegacyDec) (types.Validator, math.Int, error)); ok {
		return rf(ctx, validator, sharesToRemove)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator, math.LegacyDec) types.Validator); ok {
		r0 = rf(ctx, validator, sharesToRemove)
	} else {
		r0 = ret.Get(0).(types.Validator)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.Validator, math.LegacyDec) math.Int); ok {
		r1 = rf(ctx, validator, sharesToRemove)
	} else {
		r1 = ret.Get(1).(math.Int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, types.Validator, math.LegacyDec) error); ok {
		r2 = rf(ctx, validator, sharesToRemove)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SetDelegation provides a mock function with given fields: ctx, delegation
func (_m *StakingKeeper) SetDelegation(ctx context.Context, delegation types.Delegation) error {
	ret := _m.Called(ctx, delegation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Delegation) error); ok {
		r0 = rf(ctx, delegation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetValidator provides a mock function with given fields: ctx, validator
func (_m *StakingKeeper) SetValidator(ctx context.Context, validator types.Validator) error {
	ret := _m.Called(ctx, validator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator) error); ok {
		r0 = rf(ctx, validator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetValidatorByPowerIndex provides a mock function with given fields: ctx, validator
func (_m *StakingKeeper) SetValidatorByPowerIndex(ctx context.Context, validator types.Validator) error {
	ret := _m.Called(ctx, validator)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Validator) error); ok {
		r0 = rf(ctx, validator)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TokensFromConsensusPower provides a mock function with given fields: ctx, power
func (_m *StakingKeeper) TokensFromConsensusPower(ctx context.Context, power int64) math.Int {
	ret := _m.Called(ctx, power)

	var r0 math.Int
	if rf, ok := ret.Get(0).(func(context.Context, int64) math.Int); ok {
		r0 = rf(ctx, power)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	return r0
}

type mockConstructorTestingTNewStakingKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewStakingKeeper creates a new instance of StakingKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStakingKeeper(t mockConstructorTestingTNewStakingKeeper) *StakingKeeper {
	mock := &StakingKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
