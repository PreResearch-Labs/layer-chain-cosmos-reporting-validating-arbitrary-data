// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"
	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	reportertypes "github.com/tellor-io/layer/x/reporter/types"
)

// ReporterKeeper is an autogenerated mock type for the ReporterKeeper type
type ReporterKeeper struct {
	mock.Mock
}

// AddAmountToStake provides a mock function with given fields: ctx, addr, amt
func (_m *ReporterKeeper) AddAmountToStake(ctx context.Context, addr string, amt math.Int) error {
	ret := _m.Called(ctx, addr, amt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, math.Int) error); ok {
		r0 = rf(ctx, addr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delegation provides a mock function with given fields: ctx, delegator
func (_m *ReporterKeeper) Delegation(ctx context.Context, delegator cosmos_sdktypes.AccAddress) (reportertypes.Delegation, error) {
	ret := _m.Called(ctx, delegator)

	var r0 reportertypes.Delegation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) (reportertypes.Delegation, error)); ok {
		return rf(ctx, delegator)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) reportertypes.Delegation); ok {
		r0 = rf(ctx, delegator)
	} else {
		r0 = ret.Get(0).(reportertypes.Delegation)
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress) error); ok {
		r1 = rf(ctx, delegator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EscrowReporterStake provides a mock function with given fields: ctx, reporterAddr, power, height, amt
func (_m *ReporterKeeper) EscrowReporterStake(ctx context.Context, reporterAddr cosmos_sdktypes.AccAddress, power int64, height int64, amt math.Int) error {
	ret := _m.Called(ctx, reporterAddr, power, height, amt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, int64, int64, math.Int) error); ok {
		r0 = rf(ctx, reporterAddr, power, height, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FeefromReporterStake provides a mock function with given fields: ctx, reporterAddr, amt
func (_m *ReporterKeeper) FeefromReporterStake(ctx context.Context, reporterAddr cosmos_sdktypes.AccAddress, amt math.Int) error {
	ret := _m.Called(ctx, reporterAddr, amt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, math.Int) error); ok {
		r0 = rf(ctx, reporterAddr, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// JailReporter provides a mock function with given fields: ctx, reporterAddr, jailDuration
func (_m *ReporterKeeper) JailReporter(ctx context.Context, reporterAddr cosmos_sdktypes.AccAddress, jailDuration int64) error {
	ret := _m.Called(ctx, reporterAddr, jailDuration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, int64) error); ok {
		r0 = rf(ctx, reporterAddr, jailDuration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reporter provides a mock function with given fields: ctx, repAddr
func (_m *ReporterKeeper) Reporter(ctx context.Context, repAddr cosmos_sdktypes.AccAddress) (*reportertypes.OracleReporter, error) {
	ret := _m.Called(ctx, repAddr)

	var r0 *reportertypes.OracleReporter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) (*reportertypes.OracleReporter, error)); ok {
		return rf(ctx, repAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) *reportertypes.OracleReporter); ok {
		r0 = rf(ctx, repAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reportertypes.OracleReporter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress) error); ok {
		r1 = rf(ctx, repAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReturnSlashedTokens provides a mock function with given fields: ctx, repAddr, blockHeight, amt
func (_m *ReporterKeeper) ReturnSlashedTokens(ctx context.Context, repAddr string, blockHeight int64, amt math.Int) error {
	ret := _m.Called(ctx, repAddr, blockHeight, amt)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int64, math.Int) error); ok {
		r0 = rf(ctx, repAddr, blockHeight, amt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TotalReporterPower provides a mock function with given fields: ctx
func (_m *ReporterKeeper) TotalReporterPower(ctx context.Context) (math.Int, error) {
	ret := _m.Called(ctx)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (math.Int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReporterKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewReporterKeeper creates a new instance of ReporterKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReporterKeeper(t mockConstructorTestingTNewReporterKeeper) *ReporterKeeper {
	mock := &ReporterKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
