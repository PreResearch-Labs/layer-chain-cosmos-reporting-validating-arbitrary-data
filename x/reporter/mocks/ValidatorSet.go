// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"
	crypto "github.com/cometbft/cometbft/proto/tendermint/crypto"

	mock "github.com/stretchr/testify/mock"

	stakingtypes "github.com/cosmos/cosmos-sdk/x/staking/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ValidatorSet is an autogenerated mock type for the ValidatorSet type
type ValidatorSet struct {
	mock.Mock
}

// Delegation provides a mock function with given fields: _a0, _a1, _a2
func (_m *ValidatorSet) Delegation(_a0 context.Context, _a1 types.AccAddress, _a2 types.ValAddress) (stakingtypes.DelegationI, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 stakingtypes.DelegationI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.ValAddress) (stakingtypes.DelegationI, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, types.ValAddress) stakingtypes.DelegationI); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stakingtypes.DelegationI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccAddress, types.ValAddress) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPubKeyByConsAddr provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) GetPubKeyByConsAddr(_a0 context.Context, _a1 types.ConsAddress) (crypto.PublicKey, error) {
	ret := _m.Called(_a0, _a1)

	var r0 crypto.PublicKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) (crypto.PublicKey, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) crypto.PublicKey); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(crypto.PublicKey)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConsAddress) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IterateBondedValidatorsByPower provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) IterateBondedValidatorsByPower(_a0 context.Context, _a1 func(int64, stakingtypes.ValidatorI) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(int64, stakingtypes.ValidatorI) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IterateLastValidators provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) IterateLastValidators(_a0 context.Context, _a1 func(int64, stakingtypes.ValidatorI) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(int64, stakingtypes.ValidatorI) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IterateValidators provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) IterateValidators(_a0 context.Context, _a1 func(int64, stakingtypes.ValidatorI) bool) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(int64, stakingtypes.ValidatorI) bool) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Jail provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) Jail(_a0 context.Context, _a1 types.ConsAddress) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MaxValidators provides a mock function with given fields: _a0
func (_m *ValidatorSet) MaxValidators(_a0 context.Context) (uint32, error) {
	ret := _m.Called(_a0)

	var r0 uint32
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint32, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint32); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Slash provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *ValidatorSet) Slash(_a0 context.Context, _a1 types.ConsAddress, _a2 int64, _a3 int64, _a4 math.LegacyDec) (math.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress, int64, int64, math.LegacyDec) (math.Int, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress, int64, int64, math.LegacyDec) math.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConsAddress, int64, int64, math.LegacyDec) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlashWithInfractionReason provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4, _a5
func (_m *ValidatorSet) SlashWithInfractionReason(_a0 context.Context, _a1 types.ConsAddress, _a2 int64, _a3 int64, _a4 math.LegacyDec, _a5 stakingtypes.Infraction) (math.Int, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4, _a5)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress, int64, int64, math.LegacyDec, stakingtypes.Infraction) (math.Int, error)); ok {
		return rf(_a0, _a1, _a2, _a3, _a4, _a5)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress, int64, int64, math.LegacyDec, stakingtypes.Infraction) math.Int); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConsAddress, int64, int64, math.LegacyDec, stakingtypes.Infraction) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3, _a4, _a5)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StakingTokenSupply provides a mock function with given fields: _a0
func (_m *ValidatorSet) StakingTokenSupply(_a0 context.Context) (math.Int, error) {
	ret := _m.Called(_a0)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (math.Int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TotalBondedTokens provides a mock function with given fields: _a0
func (_m *ValidatorSet) TotalBondedTokens(_a0 context.Context) (math.Int, error) {
	ret := _m.Called(_a0)

	var r0 math.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (math.Int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) math.Int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(math.Int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unjail provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) Unjail(_a0 context.Context, _a1 types.ConsAddress) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) Validator(_a0 context.Context, _a1 types.ValAddress) (stakingtypes.ValidatorI, error) {
	ret := _m.Called(_a0, _a1)

	var r0 stakingtypes.ValidatorI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ValAddress) (stakingtypes.ValidatorI, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ValAddress) stakingtypes.ValidatorI); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stakingtypes.ValidatorI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ValAddress) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatorByConsAddr provides a mock function with given fields: _a0, _a1
func (_m *ValidatorSet) ValidatorByConsAddr(_a0 context.Context, _a1 types.ConsAddress) (stakingtypes.ValidatorI, error) {
	ret := _m.Called(_a0, _a1)

	var r0 stakingtypes.ValidatorI
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) (stakingtypes.ValidatorI, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConsAddress) stakingtypes.ValidatorI); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(stakingtypes.ValidatorI)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConsAddress) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewValidatorSet interface {
	mock.TestingT
	Cleanup(func())
}

// NewValidatorSet creates a new instance of ValidatorSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewValidatorSet(t mockConstructorTestingTNewValidatorSet) *ValidatorSet {
	mock := &ValidatorSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
