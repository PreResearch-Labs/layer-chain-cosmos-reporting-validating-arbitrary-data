// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"

	math "cosmossdk.io/math"

	mock "github.com/stretchr/testify/mock"

	reportertypes "github.com/tellor-io/layer/x/reporter/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// ReporterKeeper is an autogenerated mock type for the ReporterKeeper type
type ReporterKeeper struct {
	mock.Mock
}

// AllocateTokensToReporter provides a mock function with given fields: ctx, reporterAddr, tokens
func (_m *ReporterKeeper) AllocateTokensToReporter(ctx context.Context, reporterAddr types.ValAddress, tokens types.DecCoins) error {
	ret := _m.Called(ctx, reporterAddr, tokens)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ValAddress, types.DecCoins) error); ok {
		r0 = rf(ctx, reporterAddr, tokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DivvyingTips provides a mock function with given fields: ctx, reporterAddr, reward
func (_m *ReporterKeeper) DivvyingTips(ctx context.Context, reporterAddr types.AccAddress, reward math.Int) error {
	ret := _m.Called(ctx, reporterAddr, reward)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress, math.Int) error); ok {
		r0 = rf(ctx, reporterAddr, reward)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Reporter provides a mock function with given fields: ctx, repAddress
func (_m *ReporterKeeper) Reporter(ctx context.Context, repAddress types.AccAddress) (*reportertypes.OracleReporter, error) {
	ret := _m.Called(ctx, repAddress)

	var r0 *reportertypes.OracleReporter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress) (*reportertypes.OracleReporter, error)); ok {
		return rf(ctx, repAddress)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.AccAddress) *reportertypes.OracleReporter); ok {
		r0 = rf(ctx, repAddress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*reportertypes.OracleReporter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.AccAddress) error); ok {
		r1 = rf(ctx, repAddress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewReporterKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewReporterKeeper creates a new instance of ReporterKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewReporterKeeper(t mockConstructorTestingTNewReporterKeeper) *ReporterKeeper {
	mock := &ReporterKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
