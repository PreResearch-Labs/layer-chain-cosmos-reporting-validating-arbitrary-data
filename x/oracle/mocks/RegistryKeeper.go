// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	registrytypes "github.com/tellor-io/layer/x/registry/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// RegistryKeeper is an autogenerated mock type for the RegistryKeeper type
type RegistryKeeper struct {
	mock.Mock
}

// GetSpec provides a mock function with given fields: ctx, queryType
func (_m *RegistryKeeper) GetSpec(ctx types.Context, queryType string) (registrytypes.DataSpec, error) {
	ret := _m.Called(ctx, queryType)

	var r0 registrytypes.DataSpec
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Context, string) (registrytypes.DataSpec, error)); ok {
		return rf(ctx, queryType)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) registrytypes.DataSpec); ok {
		r0 = rf(ctx, queryType)
	} else {
		r0 = ret.Get(0).(registrytypes.DataSpec)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) error); ok {
		r1 = rf(ctx, queryType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegistryKeeper interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegistryKeeper creates a new instance of RegistryKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegistryKeeper(t mockConstructorTestingTNewRegistryKeeper) *RegistryKeeper {
	mock := &RegistryKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
