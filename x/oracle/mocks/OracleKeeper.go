// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	oracletypes "github.com/tellor-io/layer/x/oracle/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// OracleKeeper is an autogenerated mock type for the OracleKeeper type
type OracleKeeper struct {
	mock.Mock
}

// GetTotalTips provides a mock function with given fields: ctx
func (_m *OracleKeeper) GetTotalTips(ctx types.Context) types.Coin {
	ret := _m.Called(ctx)

	var r0 types.Coin
	if rf, ok := ret.Get(0).(func(types.Context) types.Coin); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Coin)
	}

	return r0
}

// GetUserTips provides a mock function with given fields: ctx, tipper
func (_m *OracleKeeper) GetUserTips(ctx types.Context, tipper types.AccAddress) oracletypes.UserTipTotal {
	ret := _m.Called(ctx, tipper)

	var r0 oracletypes.UserTipTotal
	if rf, ok := ret.Get(0).(func(types.Context, types.AccAddress) oracletypes.UserTipTotal); ok {
		r0 = rf(ctx, tipper)
	} else {
		r0 = ret.Get(0).(oracletypes.UserTipTotal)
	}

	return r0
}

// NewOracleKeeper creates a new instance of OracleKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOracleKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *OracleKeeper {
	mock := &OracleKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
