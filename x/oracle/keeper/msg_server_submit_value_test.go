package keeper_test

import (
	"github.com/cosmos/cosmos-sdk/crypto/keys/secp256k1"
	sdk "github.com/cosmos/cosmos-sdk/types"
	"github.com/tellor-io/layer/x/oracle/types"
	"github.com/tellor-io/layer/x/oracle/utils"
)

func (s *KeeperTestSuite) TestSubmitValue() {
	require := s.Require()

	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	// Commit value transaction first
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	var submitres types.MsgSubmitValueResponse
	// forward block by 1 and reveal value
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	// Submit value transaction with value revealed, this checks if the value is correctly hashed
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = salt
	res, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.Equal(&submitres, res)
	require.Nil(err)
	report, err := s.oracleKeeper.GetReportsbyQid(s.ctx, &types.QueryGetReportsbyQidRequest{QueryId: "83a7f3d48786ac2667503a61e8c415438ed2922eb86a2906e4ee66d9a2ce4992"})
	require.Nil(err)
	microReport := types.MicroReport{
		Reporter:        Addr.String(),
		Power:           1000000000000,
		QueryType:       "SpotPrice",
		QueryId:         "83a7f3d48786ac2667503a61e8c415438ed2922eb86a2906e4ee66d9a2ce4992",
		AggregateMethod: "weighted-median",
		Value:           value,
		BlockNumber:     s.ctx.BlockHeight(),
		Timestamp:       s.ctx.BlockTime(),
	}
	expectedReport := types.QueryGetReportsbyQidResponse{
		Reports: types.Reports{
			MicroReports: []*types.MicroReport{&microReport},
		},
	}
	require.Equal(&expectedReport, report)
}

func (s *KeeperTestSuite) TestSubmitFromWrongAddr() {
	require := s.Require()

	// submit from different address than commit
	randomPrivKey := secp256k1.GenPrivKey()
	randomPubKey := randomPrivKey.PubKey()
	randomAddr := sdk.AccAddress(randomPubKey.Address())
	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = randomAddr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = salt
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.Error(err)
}

func (s *KeeperTestSuite) TestSubmitWithBadQueryData() {
	require := s.Require()

	// submit value with bad query data
	badQueryData := "invalidQueryData"
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = badQueryData
	submitreq.Value = value
	submitreq.Salt = salt
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "failed to decode query data string")
}

func (s *KeeperTestSuite) TestSubmitWithBadValue() {
	require := s.Require()

	// submit wrong value but correct salt
	queryData := "0x
	badValue := "00000F4240"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = badValue
	submitreq.Salt = salt
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "submitted value doesn't match commitment, are you a cheater?")
}

func (s *KeeperTestSuite) TestSubmitWithWrongSalt() {
	require := s.Require()

	// submit correct value but wrong salt
	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	_ = s.TestCommitValue()
	badSalt, err := utils.Salt(32)
	require.Nil(err)
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = badSalt
	_, err = s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "submitted value doesn't match commitment, are you a cheater?")
}

func (s *KeeperTestSuite) TestSubmitAtWrongBlock() {
	require := s.Require()

	// try to submit value in same block as commit
	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = salt
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "missed commit reveal window")

	// try to submit value 2 blocks after commit
	height := s.ctx.BlockHeight() + 10
	s.ctx = s.ctx.WithBlockHeight(height)
	salt = s.TestCommitValue()
	height = s.ctx.BlockHeight() + 2
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = salt
	_, err = s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "missed commit reveal window")

}

func (s *KeeperTestSuite) TestSubmitWithNoCommit() {
	require := s.Require()

	// try to submit value without commit
	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	salt, err := utils.Salt(32)
	require.Nil(err)
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = salt
	_, err = s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "no commits to reveal found")
}

func (s *KeeperTestSuite) TestSubmitWithNoCreator() {
	require := s.Require()

	// submit value with no creator
	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.QueryData = queryData
	submitreq.Value = value
	submitreq.Salt = salt
	require.Panics(func() { s.msgServer.SubmitValue(s.ctx, &submitreq) }, "empty address string is not allowed")
}

func (s *KeeperTestSuite) TestSubmitWithNoQueryData() {
	require := s.Require()

	// submit value with no query data
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.Value = value
	submitreq.Salt = salt
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "no commits to reveal found")
}

func (s *KeeperTestSuite) TestSubmitWithNoValue() {
	require := s.Require()

	// submit value with no value
	queryData := "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706F745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003657468000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000"
	salt := s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Salt = salt
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "submitted value doesn't match commitment, are you a cheater?")
}

func (s *KeeperTestSuite) TestSubmitWithNoSalt() {
	require := s.Require()

	// submit value with no salt
	queryData := "0x
	value := "000000000000000000000000000000000000000000000058528649cf80ee0000"
	_ = s.TestCommitValue()
	var submitreq types.MsgSubmitValue
	height := s.ctx.BlockHeight() + 1
	s.ctx = s.ctx.WithBlockHeight(height)
	submitreq.Creator = Addr.String()
	submitreq.QueryData = queryData
	submitreq.Value = value
	_, err := s.msgServer.SubmitValue(s.ctx, &submitreq)
	require.ErrorContains(err, "submitted value doesn't match commitment, are you a cheater?")
}
