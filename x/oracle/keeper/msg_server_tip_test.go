package keeper_test

import (
	"github.com/cometbft/cometbft/crypto/secp256k1"
	"github.com/tellor-io/layer/x/oracle/types"

	"cosmossdk.io/math"

	sdk "github.com/cosmos/cosmos-sdk/types"
)

func (s *KeeperTestSuite) TestTip() {
	// require := s.Require()

	// queryData := "0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706F745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000C0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003657468000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000"
	// tip := sdk.NewCoin("loya", math.NewInt(1000))
	// msg := types.MsgTip{
	// 	Tipper:    Addr.String(),
	// 	QueryData: queryData,
	// 	Amount:    tip,
	// }
	// _, err := s.msgServer.Tip(s.ctx, &msg)
	// require.NoError(err)
}

func (s *KeeperTestSuite) TestTipWithInvalidDenom() {
	// require := s.Require()

	// queryData := "0x
	// tip := sdk.NewCoin("invalidDenom", math.NewInt(1000))
	// msg := types.MsgTip{
	// 	Tipper:    Addr.String(),
	// 	QueryData: queryData,
	// 	Amount:    tip,
	// }
	// _, err := s.msgServer.Tip(s.ctx, &msg)
	// require.ErrorContains(err, "invalid request")
}

func (s *KeeperTestSuite) TestTipWithZeroAmount() {
	require := s.Require()
	s.SetupTest()

	privKey := secp256k1.GenPrivKey()
	accountAddress := sdk.AccAddress(privKey.PubKey().Address())

	queryData := "0x
	tip := sdk.NewCoin("loya", math.NewInt(0))
	msg := types.MsgTip{
		Tipper:    accountAddress.String(),
		QueryData: []byte(queryData),
		Amount:    tip,
	}
	_, err := s.msgServer.Tip(s.ctx, &msg)
	require.ErrorContains(err, "invalid request")
}

func (s *KeeperTestSuite) TestTipWithNegativeAmount() {
	// require := s.Require()

	// queryData := "0x
	// require.Panics(func() {
	// 	tip := sdk.NewCoin("loya", math.NewInt(-1000))
	// 	msg := types.MsgTip{
	// 		Tipper:    Addr.String(),
	// 		QueryData: queryData,
	// 		Amount:    tip,
	// 	}
	// 	_, _ = s.msgServer.Tip(s.ctx, &msg)
	// }, "negative coin amount should panic")
}

func (s *KeeperTestSuite) TestTipWithInvalidQueryData() {
	// require := s.Require()

	// queryData := "badQueryData"
	// tip := sdk.NewCoin("loya", math.NewInt(1000))
	// msg := types.MsgTip{
	// 	Tipper:    Addr.String(),
	// 	QueryData: queryData,
	// 	Amount:    tip,
	// }
	// _, err := s.msgServer.Tip(s.ctx, &msg)
	// require.Error(err)
	// require.Panics(func() { _, _ = s.msgServer.Tip(s.ctx, &msg) }, "invalid query data should panic")
}
