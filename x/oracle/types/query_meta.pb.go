// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/query_meta.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryMeta struct {
	Id                    uint64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount                cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	Expiration            time.Time             `protobuf:"bytes,3,opt,name=expiration,proto3,stdtime" json:"expiration"`
	RegistrySpecTimeframe time.Duration         `protobuf:"bytes,4,opt,name=registry_spec_timeframe,json=registrySpecTimeframe,proto3,stdduration" json:"registry_spec_timeframe"`
	HasRevealedReports    bool                  `protobuf:"varint,5,opt,name=hasRevealedReports,proto3" json:"hasRevealedReports,omitempty"`
	QueryId               []byte                `protobuf:"bytes,6,opt,name=query_id,json=queryId,proto3" json:"query_id,omitempty"`
}

func (m *QueryMeta) Reset()         { *m = QueryMeta{} }
func (m *QueryMeta) String() string { return proto.CompactTextString(m) }
func (*QueryMeta) ProtoMessage()    {}
func (*QueryMeta) Descriptor() ([]byte, []int) {
	return fileDescriptor_072f14e329c22246, []int{0}
}
func (m *QueryMeta) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMeta) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMeta.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMeta) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMeta.Merge(m, src)
}
func (m *QueryMeta) XXX_Size() int {
	return m.Size()
}
func (m *QueryMeta) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMeta.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMeta proto.InternalMessageInfo

func (m *QueryMeta) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *QueryMeta) GetExpiration() time.Time {
	if m != nil {
		return m.Expiration
	}
	return time.Time{}
}

func (m *QueryMeta) GetRegistrySpecTimeframe() time.Duration {
	if m != nil {
		return m.RegistrySpecTimeframe
	}
	return 0
}

func (m *QueryMeta) GetHasRevealedReports() bool {
	if m != nil {
		return m.HasRevealedReports
	}
	return false
}

func (m *QueryMeta) GetQueryId() []byte {
	if m != nil {
		return m.QueryId
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryMeta)(nil), "layer.oracle.QueryMeta")
}

func init() { proto.RegisterFile("layer/oracle/query_meta.proto", fileDescriptor_072f14e329c22246) }

var fileDescriptor_072f14e329c22246 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xb3, 0xa1, 0x84, 0x74, 0x29, 0x48, 0x58, 0x54, 0x38, 0x91, 0xb0, 0x2d, 0x4e, 0x06,
	0xd4, 0x5d, 0x09, 0xde, 0x20, 0xed, 0x25, 0x07, 0x0e, 0x98, 0x9e, 0xb8, 0x84, 0x8d, 0x3d, 0x75,
	0x56, 0x78, 0x3d, 0x66, 0x77, 0x8d, 0x9a, 0xb7, 0xe8, 0x91, 0x47, 0xe0, 0xc8, 0x81, 0x87, 0xe8,
	0xb1, 0x82, 0x0b, 0xe2, 0xd0, 0xa0, 0xe4, 0xc0, 0x6b, 0x20, 0x7b, 0x6d, 0x09, 0x41, 0x2f, 0x96,
	0xff, 0xfd, 0x67, 0x7e, 0x7f, 0xe3, 0x1d, 0xfa, 0xb8, 0x10, 0x6b, 0xd0, 0x1c, 0xb5, 0x48, 0x0b,
	0xe0, 0x1f, 0x6a, 0xd0, 0xeb, 0x85, 0x02, 0x2b, 0x58, 0xa5, 0xd1, 0xa2, 0x77, 0xd0, 0xda, 0xcc,
	0xd9, 0xd3, 0x07, 0x42, 0xc9, 0x12, 0x79, 0xfb, 0x74, 0x05, 0xd3, 0x49, 0x8a, 0x46, 0xa1, 0x59,
	0xb4, 0x8a, 0x3b, 0xd1, 0x59, 0x0f, 0x73, 0xcc, 0xd1, 0x9d, 0x37, 0x6f, 0xdd, 0x69, 0x90, 0x23,
	0xe6, 0x05, 0xf0, 0x56, 0x2d, 0xeb, 0x33, 0x9e, 0xd5, 0x5a, 0x58, 0x89, 0x65, 0xe7, 0x87, 0xff,
	0xfa, 0x56, 0x2a, 0x30, 0x56, 0xa8, 0xca, 0x15, 0x3c, 0xf9, 0x3e, 0xa4, 0xfb, 0xaf, 0x1b, 0xce,
	0x57, 0x60, 0x85, 0x77, 0x9f, 0x0e, 0x65, 0xe6, 0x93, 0x88, 0xc4, 0x7b, 0xc9, 0x50, 0x66, 0xde,
	0x31, 0x1d, 0x09, 0x85, 0x75, 0x69, 0xfd, 0x61, 0x44, 0xe2, 0xfd, 0xd9, 0xf3, 0xcb, 0xeb, 0x70,
	0xf0, 0xf3, 0x3a, 0x3c, 0x74, 0x68, 0x26, 0x7b, 0xcf, 0x24, 0x72, 0x25, 0xec, 0x8a, 0xcd, 0x4b,
	0xfb, 0xed, 0xeb, 0x11, 0xed, 0x98, 0xe7, 0xa5, 0x4d, 0xba, 0x56, 0xef, 0x84, 0x52, 0x38, 0xaf,
	0xa4, 0xe3, 0xf2, 0x6f, 0x45, 0x24, 0xbe, 0xfb, 0x62, 0xca, 0x1c, 0x18, 0xeb, 0xc1, 0xd8, 0x69,
	0x0f, 0x36, 0x1b, 0x37, 0x1f, 0xb9, 0xd8, 0x84, 0x24, 0xf9, 0xab, 0xcf, 0x7b, 0x47, 0x1f, 0x69,
	0xc8, 0xa5, 0xb1, 0x7a, 0xbd, 0x30, 0x15, 0xa4, 0x8b, 0x66, 0x92, 0x33, 0x2d, 0x14, 0xf8, 0x7b,
	0x6d, 0xe4, 0xe4, 0xbf, 0xc8, 0x93, 0xee, 0x5f, 0xcc, 0xee, 0x35, 0x89, 0x9f, 0x36, 0x21, 0xf9,
	0xfc, 0xfb, 0xcb, 0x33, 0x92, 0x1c, 0xf6, 0x41, 0x6f, 0x2a, 0x48, 0x4f, 0xfb, 0x18, 0x8f, 0x51,
	0x6f, 0x25, 0x4c, 0x02, 0x1f, 0x41, 0x14, 0x90, 0x25, 0x50, 0xa1, 0xb6, 0xc6, 0xbf, 0x1d, 0x91,
	0x78, 0x9c, 0xdc, 0xe0, 0x78, 0x13, 0x3a, 0x76, 0x37, 0x2c, 0x33, 0x7f, 0x14, 0x91, 0xf8, 0x20,
	0xb9, 0xd3, 0xea, 0x79, 0x36, 0x3b, 0xbe, 0xdc, 0x06, 0xe4, 0x6a, 0x1b, 0x90, 0x5f, 0xdb, 0x80,
	0x5c, 0xec, 0x82, 0xc1, 0xd5, 0x2e, 0x18, 0xfc, 0xd8, 0x05, 0x83, 0xb7, 0x4f, 0x73, 0x69, 0x57,
	0xf5, 0x92, 0xa5, 0xa8, 0xb8, 0x85, 0xa2, 0x40, 0x7d, 0x24, 0x91, 0xbb, 0xb5, 0x39, 0xef, 0x17,
	0xc7, 0xae, 0x2b, 0x30, 0xcb, 0x51, 0x3b, 0xc8, 0xcb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8e,
	0x07, 0x2e, 0xd1, 0x55, 0x02, 0x00, 0x00,
}

func (m *QueryMeta) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMeta) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMeta) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQueryMeta(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x32
	}
	if m.HasRevealedReports {
		i--
		if m.HasRevealedReports {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.RegistrySpecTimeframe, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RegistrySpecTimeframe):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintQueryMeta(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Expiration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiration):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQueryMeta(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQueryMeta(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Id != 0 {
		i = encodeVarintQueryMeta(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQueryMeta(dAtA []byte, offset int, v uint64) int {
	offset -= sovQueryMeta(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryMeta) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQueryMeta(uint64(m.Id))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQueryMeta(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Expiration)
	n += 1 + l + sovQueryMeta(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.RegistrySpecTimeframe)
	n += 1 + l + sovQueryMeta(uint64(l))
	if m.HasRevealedReports {
		n += 2
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQueryMeta(uint64(l))
	}
	return n
}

func sovQueryMeta(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQueryMeta(x uint64) (n int) {
	return sovQueryMeta(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryMeta) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueryMeta
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMeta: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMeta: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueryMeta
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Expiration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegistrySpecTimeframe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueryMeta
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.RegistrySpecTimeframe, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasRevealedReports", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasRevealedReports = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQueryMeta
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQueryMeta
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = append(m.QueryId[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryId == nil {
				m.QueryId = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueryMeta(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQueryMeta
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueryMeta(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueryMeta
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueryMeta
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQueryMeta
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQueryMeta
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQueryMeta
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQueryMeta        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueryMeta          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQueryMeta = fmt.Errorf("proto: unexpected end of group")
)
