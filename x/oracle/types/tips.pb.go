// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/tips.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Tips is a struct that contains the query data and the amount it was tipped
type Tips struct {
	// query_data is the query data that was tipped
	QueryData []byte `protobuf:"bytes,1,opt,name=query_data,json=queryData,proto3" json:"query_data,omitempty"`
	// the amount that was tipped
	Amount cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	// totalTips is the total amount of tips for this query data so far
	TotalTips cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=total_tips,json=totalTips,proto3,customtype=cosmossdk.io/math.Int" json:"total_tips"`
}

func (m *Tips) Reset()         { *m = Tips{} }
func (m *Tips) String() string { return proto.CompactTextString(m) }
func (*Tips) ProtoMessage()    {}
func (*Tips) Descriptor() ([]byte, []int) {
	return fileDescriptor_1dd649bc410cbcce, []int{0}
}
func (m *Tips) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tips) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tips.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tips) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tips.Merge(m, src)
}
func (m *Tips) XXX_Size() int {
	return m.Size()
}
func (m *Tips) XXX_DiscardUnknown() {
	xxx_messageInfo_Tips.DiscardUnknown(m)
}

var xxx_messageInfo_Tips proto.InternalMessageInfo

func (m *Tips) GetQueryData() []byte {
	if m != nil {
		return m.QueryData
	}
	return nil
}

func init() {
	proto.RegisterType((*Tips)(nil), "layer.oracle.Tips")
}

func init() { proto.RegisterFile("layer/oracle/tips.proto", fileDescriptor_1dd649bc410cbcce) }

var fileDescriptor_1dd649bc410cbcce = []byte{
	// 264 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x49, 0xac, 0x4c,
	0x2d, 0xd2, 0xcf, 0x2f, 0x4a, 0x4c, 0xce, 0x49, 0xd5, 0x2f, 0xc9, 0x2c, 0x28, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x4b, 0xe8, 0x41, 0x24, 0xa4, 0x24, 0x93, 0xf3, 0x8b, 0x73,
	0xf3, 0x8b, 0xe3, 0xc1, 0x72, 0xfa, 0x10, 0x0e, 0x44, 0xa1, 0x94, 0x48, 0x7a, 0x7e, 0x7a, 0x3e,
	0x44, 0x1c, 0xc4, 0x82, 0x88, 0x2a, 0x6d, 0x63, 0xe4, 0x62, 0x09, 0xc9, 0x2c, 0x28, 0x16, 0x92,
	0xe5, 0xe2, 0x2a, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x4f, 0x49, 0x2c, 0x49, 0x94, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x09, 0xe2, 0x04, 0x8b, 0xb8, 0x24, 0x96, 0x24, 0x0a, 0x39, 0x73, 0xb1, 0x25, 0xe6,
	0xe6, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x3a, 0x69, 0x9f, 0xb8, 0x27, 0xcf,
	0x70, 0xeb, 0x9e, 0xbc, 0x28, 0xc4, 0x8e, 0xe2, 0x94, 0x6c, 0xbd, 0xcc, 0x7c, 0xfd, 0xdc, 0xc4,
	0x92, 0x0c, 0x3d, 0xcf, 0xbc, 0x92, 0x4b, 0x5b, 0x74, 0xb9, 0xa0, 0x96, 0x7b, 0xe6, 0x95, 0x04,
	0x41, 0xb5, 0x0a, 0x79, 0x71, 0x71, 0x95, 0xe4, 0x97, 0x24, 0xe6, 0xc4, 0x83, 0xdc, 0x2f, 0xc1,
	0x4c, 0xba, 0x41, 0x9c, 0x60, 0xed, 0x20, 0xf7, 0x3a, 0x39, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x66, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae,
	0x7e, 0x49, 0x6a, 0x4e, 0x4e, 0x7e, 0x91, 0x6e, 0x66, 0xbe, 0x3e, 0x24, 0xfc, 0x2a, 0xe0, 0x21,
	0x58, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x04, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xca, 0x9f, 0x2a, 0xd6, 0x5e, 0x01, 0x00, 0x00,
}

func (m *Tips) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tips) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tips) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalTips.Size()
		i -= size
		if _, err := m.TotalTips.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTips(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTips(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintTips(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTips(dAtA []byte, offset int, v uint64) int {
	offset -= sovTips(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tips) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovTips(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTips(uint64(l))
	l = m.TotalTips.Size()
	n += 1 + l + sovTips(uint64(l))
	return n
}

func sovTips(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTips(x uint64) (n int) {
	return sovTips(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tips) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTips
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tips: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tips: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTips
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTips
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTips
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData[:0], dAtA[iNdEx:postIndex]...)
			if m.QueryData == nil {
				m.QueryData = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTips
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTips
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTips
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTips", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTips
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTips
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTips
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalTips.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTips(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTips
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTips(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTips
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTips
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTips
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTips
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTips
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTips
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTips        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTips          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTips = fmt.Errorf("proto: unexpected end of group")
)
