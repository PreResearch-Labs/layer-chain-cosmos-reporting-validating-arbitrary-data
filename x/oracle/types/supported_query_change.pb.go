// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/supported_query_change.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SupportedQueryChangeProposal struct {
	Title       string        `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string        `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Changes     []QueryChange `protobuf:"bytes,3,rep,name=changes,proto3" json:"changes"`
}

func (m *SupportedQueryChangeProposal) Reset()      { *m = SupportedQueryChangeProposal{} }
func (*SupportedQueryChangeProposal) ProtoMessage() {}
func (*SupportedQueryChangeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3584441e2d07535, []int{0}
}
func (m *SupportedQueryChangeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedQueryChangeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedQueryChangeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedQueryChangeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedQueryChangeProposal.Merge(m, src)
}
func (m *SupportedQueryChangeProposal) XXX_Size() int {
	return m.Size()
}
func (m *SupportedQueryChangeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedQueryChangeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedQueryChangeProposal proto.InternalMessageInfo

type QueryChange struct {
	QueryData string `protobuf:"bytes,1,opt,name=queryData,proto3" json:"queryData,omitempty"`
}

func (m *QueryChange) Reset()         { *m = QueryChange{} }
func (m *QueryChange) String() string { return proto.CompactTextString(m) }
func (*QueryChange) ProtoMessage()    {}
func (*QueryChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3584441e2d07535, []int{1}
}
func (m *QueryChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryChange.Merge(m, src)
}
func (m *QueryChange) XXX_Size() int {
	return m.Size()
}
func (m *QueryChange) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryChange.DiscardUnknown(m)
}

var xxx_messageInfo_QueryChange proto.InternalMessageInfo

func (m *QueryChange) GetQueryData() string {
	if m != nil {
		return m.QueryData
	}
	return ""
}

type SupportedQueries struct {
	QueryData []*QueryChange `protobuf:"bytes,1,rep,name=queryData,proto3" json:"queryData,omitempty"`
}

func (m *SupportedQueries) Reset()         { *m = SupportedQueries{} }
func (m *SupportedQueries) String() string { return proto.CompactTextString(m) }
func (*SupportedQueries) ProtoMessage()    {}
func (*SupportedQueries) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3584441e2d07535, []int{2}
}
func (m *SupportedQueries) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedQueries) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedQueries.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedQueries) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedQueries.Merge(m, src)
}
func (m *SupportedQueries) XXX_Size() int {
	return m.Size()
}
func (m *SupportedQueries) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedQueries.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedQueries proto.InternalMessageInfo

func (m *SupportedQueries) GetQueryData() []*QueryChange {
	if m != nil {
		return m.QueryData
	}
	return nil
}

func init() {
	proto.RegisterType((*SupportedQueryChangeProposal)(nil), "layer.oracle.SupportedQueryChangeProposal")
	proto.RegisterType((*QueryChange)(nil), "layer.oracle.QueryChange")
	proto.RegisterType((*SupportedQueries)(nil), "layer.oracle.SupportedQueries")
}

func init() {
	proto.RegisterFile("layer/oracle/supported_query_change.proto", fileDescriptor_e3584441e2d07535)
}

var fileDescriptor_e3584441e2d07535 = []byte{
	// 355 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcc, 0x49, 0xac, 0x4c,
	0x2d, 0xd2, 0xcf, 0x2f, 0x4a, 0x4c, 0xce, 0x49, 0xd5, 0x2f, 0x2e, 0x2d, 0x28, 0xc8, 0x2f, 0x2a,
	0x49, 0x4d, 0x89, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x8c, 0x4f, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0xd5,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x01, 0x2b, 0xd5, 0x83, 0x28, 0x95, 0x12, 0x49, 0xcf,
	0x4f, 0xcf, 0x07, 0x4b, 0xe8, 0x83, 0x58, 0x10, 0x35, 0x52, 0x92, 0xc9, 0xf9, 0xc5, 0xb9, 0xf9,
	0xc5, 0xf1, 0x10, 0x09, 0x08, 0x07, 0x2a, 0x25, 0x98, 0x98, 0x9b, 0x99, 0x97, 0xaf, 0x0f, 0x26,
	0x21, 0x42, 0x4a, 0xfb, 0x18, 0xb9, 0x64, 0x82, 0x61, 0x56, 0x06, 0x82, 0x6c, 0x74, 0x06, 0x5b,
	0x18, 0x50, 0x94, 0x5f, 0x90, 0x5f, 0x9c, 0x98, 0x23, 0x24, 0xc2, 0xc5, 0x5a, 0x92, 0x59, 0x92,
	0x93, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x19, 0x04, 0xe1, 0x08, 0x29, 0x70, 0x71, 0xa7, 0xa4,
	0x16, 0x27, 0x17, 0x65, 0x16, 0x94, 0x64, 0xe6, 0xe7, 0x49, 0x30, 0x81, 0xe5, 0x90, 0x85, 0x84,
	0xec, 0xb8, 0xd8, 0x21, 0x4e, 0x2f, 0x96, 0x60, 0x56, 0x60, 0xd6, 0xe0, 0x36, 0x92, 0xd4, 0x43,
	0x76, 0xbc, 0x1e, 0x92, 0x5d, 0x4e, 0x9c, 0x27, 0xee, 0xc9, 0x33, 0xac, 0x78, 0xbe, 0x41, 0x8b,
	0x31, 0x08, 0xa6, 0xc9, 0x4a, 0xad, 0x63, 0x81, 0x3c, 0xc3, 0x8c, 0x05, 0xf2, 0x0c, 0xa7, 0xb6,
	0xe8, 0x4a, 0x41, 0x7d, 0x91, 0x9e, 0x5f, 0xa6, 0x57, 0x66, 0x98, 0x94, 0x5a, 0x92, 0x68, 0xa8,
	0xe7, 0x9c, 0x9f, 0x57, 0x92, 0x9a, 0x57, 0xa2, 0xa4, 0xcd, 0xc5, 0x8d, 0x64, 0x94, 0x90, 0x0c,
	0x17, 0x27, 0x38, 0xdc, 0x5c, 0x12, 0x4b, 0x12, 0xa1, 0x4e, 0x46, 0x08, 0x28, 0x79, 0x73, 0x09,
	0xa0, 0x78, 0x36, 0x33, 0xb5, 0x58, 0xc8, 0x1c, 0x55, 0x07, 0x7e, 0xa7, 0x22, 0x19, 0xe6, 0xe4,
	0xbe, 0xe2, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24,
	0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x69,
	0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x97, 0xa4, 0xe6, 0xe4, 0xe4,
	0x17, 0xe9, 0x66, 0xe6, 0xeb, 0x43, 0xa2, 0xba, 0x02, 0x16, 0xd9, 0x25, 0x95, 0x05, 0xa9, 0xc5,
	0x49, 0x6c, 0xe0, 0xa8, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x99, 0x3b, 0x43, 0x66, 0x09,
	0x02, 0x00, 0x00,
}

func (this *SupportedQueryChangeProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupportedQueryChangeProposal)
	if !ok {
		that2, ok := that.(SupportedQueryChangeProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Changes) != len(that1.Changes) {
		return false
	}
	for i := range this.Changes {
		if !this.Changes[i].Equal(&that1.Changes[i]) {
			return false
		}
	}
	return true
}
func (this *QueryChange) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*QueryChange)
	if !ok {
		that2, ok := that.(QueryChange)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.QueryData != that1.QueryData {
		return false
	}
	return true
}
func (this *SupportedQueries) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SupportedQueries)
	if !ok {
		that2, ok := that.(SupportedQueries)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.QueryData) != len(that1.QueryData) {
		return false
	}
	for i := range this.QueryData {
		if !this.QueryData[i].Equal(that1.QueryData[i]) {
			return false
		}
	}
	return true
}
func (m *SupportedQueryChangeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedQueryChangeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedQueryChangeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Changes) > 0 {
		for iNdEx := len(m.Changes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Changes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupportedQueryChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintSupportedQueryChange(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintSupportedQueryChange(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		i -= len(m.QueryData)
		copy(dAtA[i:], m.QueryData)
		i = encodeVarintSupportedQueryChange(dAtA, i, uint64(len(m.QueryData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SupportedQueries) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedQueries) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedQueries) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		for iNdEx := len(m.QueryData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.QueryData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSupportedQueryChange(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSupportedQueryChange(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupportedQueryChange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupportedQueryChangeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovSupportedQueryChange(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovSupportedQueryChange(uint64(l))
	}
	if len(m.Changes) > 0 {
		for _, e := range m.Changes {
			l = e.Size()
			n += 1 + l + sovSupportedQueryChange(uint64(l))
		}
	}
	return n
}

func (m *QueryChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryData)
	if l > 0 {
		n += 1 + l + sovSupportedQueryChange(uint64(l))
	}
	return n
}

func (m *SupportedQueries) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		for _, e := range m.QueryData {
			l = e.Size()
			n += 1 + l + sovSupportedQueryChange(uint64(l))
		}
	}
	return n
}

func sovSupportedQueryChange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupportedQueryChange(x uint64) (n int) {
	return sovSupportedQueryChange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SupportedQueryChangeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupportedQueryChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedQueryChangeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedQueryChangeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Changes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Changes = append(m.Changes, QueryChange{})
			if err := m.Changes[len(m.Changes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupportedQueryChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupportedQueryChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupportedQueryChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupportedQueries) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupportedQueryChange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedQueries: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedQueries: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData, &QueryChange{})
			if err := m.QueryData[len(m.QueryData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupportedQueryChange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSupportedQueryChange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupportedQueryChange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupportedQueryChange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupportedQueryChange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupportedQueryChange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupportedQueryChange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupportedQueryChange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupportedQueryChange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupportedQueryChange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupportedQueryChange = fmt.Errorf("proto: unexpected end of group")
)
