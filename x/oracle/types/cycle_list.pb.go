// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/oracle/cycle_list.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CycleListChangeProposal struct {
	Title       string   `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	NewList     []string `protobuf:"bytes,3,rep,name=newList,proto3" json:"newList,omitempty"`
}

func (m *CycleListChangeProposal) Reset()      { *m = CycleListChangeProposal{} }
func (*CycleListChangeProposal) ProtoMessage() {}
func (*CycleListChangeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff45f617fe1fc52a, []int{0}
}
func (m *CycleListChangeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CycleListChangeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CycleListChangeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CycleListChangeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CycleListChangeProposal.Merge(m, src)
}
func (m *CycleListChangeProposal) XXX_Size() int {
	return m.Size()
}
func (m *CycleListChangeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_CycleListChangeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_CycleListChangeProposal proto.InternalMessageInfo

type CycleList struct {
	QueryData []string `protobuf:"bytes,1,rep,name=queryData,proto3" json:"queryData,omitempty"`
}

func (m *CycleList) Reset()         { *m = CycleList{} }
func (m *CycleList) String() string { return proto.CompactTextString(m) }
func (*CycleList) ProtoMessage()    {}
func (*CycleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff45f617fe1fc52a, []int{1}
}
func (m *CycleList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CycleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CycleList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CycleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CycleList.Merge(m, src)
}
func (m *CycleList) XXX_Size() int {
	return m.Size()
}
func (m *CycleList) XXX_DiscardUnknown() {
	xxx_messageInfo_CycleList.DiscardUnknown(m)
}

var xxx_messageInfo_CycleList proto.InternalMessageInfo

func (m *CycleList) GetQueryData() []string {
	if m != nil {
		return m.QueryData
	}
	return nil
}

func init() {
	proto.RegisterType((*CycleListChangeProposal)(nil), "layer.oracle.CycleListChangeProposal")
	proto.RegisterType((*CycleList)(nil), "layer.oracle.CycleList")
}

func init() { proto.RegisterFile("layer/oracle/cycle_list.proto", fileDescriptor_ff45f617fe1fc52a) }

var fileDescriptor_ff45f617fe1fc52a = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4b, 0xc3, 0x40,
	0x1c, 0xc5, 0x73, 0x16, 0x95, 0x44, 0x17, 0x43, 0xc1, 0x58, 0xf4, 0x5a, 0x2a, 0x48, 0x2b, 0x34,
	0xa1, 0xb8, 0x39, 0xb6, 0x82, 0x8b, 0x83, 0x74, 0x74, 0x29, 0xd7, 0x78, 0xa4, 0x07, 0xd7, 0xfc,
	0xe3, 0xdd, 0xbf, 0xd5, 0x7c, 0x03, 0x47, 0x47, 0x27, 0xe9, 0xd8, 0xd1, 0xc1, 0x0f, 0x51, 0x9c,
	0x3a, 0x3a, 0x89, 0xa4, 0x83, 0x5f, 0x43, 0x92, 0x6b, 0xd5, 0xe5, 0xb8, 0xf7, 0x7e, 0xc7, 0xbb,
	0xc7, 0x73, 0x8e, 0x24, 0x4b, 0xb9, 0x0a, 0x40, 0xb1, 0x50, 0xf2, 0x20, 0x4c, 0x43, 0xc9, 0xfb,
	0x52, 0x68, 0xf4, 0x13, 0x05, 0x08, 0xee, 0x6e, 0x81, 0x7d, 0x83, 0x2b, 0xe5, 0x08, 0x22, 0x28,
	0x40, 0x90, 0xdf, 0xcc, 0x9b, 0xca, 0x41, 0x08, 0x7a, 0x04, 0xba, 0x6f, 0x80, 0x11, 0x2b, 0xb4,
	0xc7, 0x46, 0x22, 0x86, 0xa0, 0x38, 0x8d, 0x55, 0x7f, 0x21, 0xce, 0x7e, 0x37, 0xff, 0xe6, 0x4a,
	0x68, 0xec, 0x0e, 0x59, 0x1c, 0xf1, 0x6b, 0x05, 0x09, 0x68, 0x26, 0xdd, 0xb2, 0xb3, 0x89, 0x02,
	0x25, 0xf7, 0x48, 0x8d, 0x34, 0xec, 0x9e, 0x11, 0x6e, 0xcd, 0xd9, 0xb9, 0xe5, 0x3a, 0x54, 0x22,
	0x41, 0x01, 0xb1, 0xb7, 0x51, 0xb0, 0xff, 0x96, 0x7b, 0xec, 0x6c, 0xc7, 0xfc, 0x3e, 0x0f, 0xf4,
	0x4a, 0xb5, 0x52, 0xc3, 0xee, 0xd8, 0xf3, 0xcf, 0xaa, 0x35, 0xfb, 0x7e, 0x3d, 0x25, 0xbd, 0x35,
	0x39, 0x3f, 0x79, 0x9c, 0x56, 0xad, 0xe7, 0x69, 0xd5, 0x7a, 0x7f, 0x6b, 0x55, 0x56, 0x2d, 0x23,
	0x98, 0xf8, 0x93, 0xf6, 0x80, 0x23, 0x6b, 0xfb, 0x5d, 0x88, 0x91, 0xc7, 0x58, 0x6f, 0x3a, 0xf6,
	0x6f, 0x3f, 0xf7, 0xd0, 0xb1, 0xef, 0xc6, 0x5c, 0xa5, 0x17, 0x0c, 0x99, 0x47, 0xf2, 0xec, 0xde,
	0x9f, 0xd1, 0xb9, 0x9c, 0x65, 0x94, 0xcc, 0x33, 0x4a, 0x16, 0x19, 0x25, 0x5f, 0x19, 0x25, 0x4f,
	0x4b, 0x6a, 0x2d, 0x96, 0xd4, 0xfa, 0x58, 0x52, 0xeb, 0xa6, 0x19, 0x09, 0x1c, 0x8e, 0x07, 0x7e,
	0x08, 0xa3, 0x00, 0xb9, 0x94, 0xa0, 0x5a, 0x02, 0x02, 0xb3, 0xf7, 0xc3, 0x7a, 0x71, 0x4c, 0x13,
	0xae, 0x07, 0x5b, 0xc5, 0x36, 0x67, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xee, 0xef, 0xee,
	0x8e, 0x01, 0x00, 0x00,
}

func (this *CycleListChangeProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CycleListChangeProposal)
	if !ok {
		that2, ok := that.(CycleListChangeProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.NewList) != len(that1.NewList) {
		return false
	}
	for i := range this.NewList {
		if this.NewList[i] != that1.NewList[i] {
			return false
		}
	}
	return true
}
func (this *CycleList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CycleList)
	if !ok {
		that2, ok := that.(CycleList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.QueryData) != len(that1.QueryData) {
		return false
	}
	for i := range this.QueryData {
		if this.QueryData[i] != that1.QueryData[i] {
			return false
		}
	}
	return true
}
func (m *CycleListChangeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CycleListChangeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CycleListChangeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewList) > 0 {
		for iNdEx := len(m.NewList) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NewList[iNdEx])
			copy(dAtA[i:], m.NewList[iNdEx])
			i = encodeVarintCycleList(dAtA, i, uint64(len(m.NewList[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCycleList(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCycleList(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CycleList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CycleList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CycleList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		for iNdEx := len(m.QueryData) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.QueryData[iNdEx])
			copy(dAtA[i:], m.QueryData[iNdEx])
			i = encodeVarintCycleList(dAtA, i, uint64(len(m.QueryData[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintCycleList(dAtA []byte, offset int, v uint64) int {
	offset -= sovCycleList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CycleListChangeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCycleList(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCycleList(uint64(l))
	}
	if len(m.NewList) > 0 {
		for _, s := range m.NewList {
			l = len(s)
			n += 1 + l + sovCycleList(uint64(l))
		}
	}
	return n
}

func (m *CycleList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.QueryData) > 0 {
		for _, s := range m.QueryData {
			l = len(s)
			n += 1 + l + sovCycleList(uint64(l))
		}
	}
	return n
}

func sovCycleList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCycleList(x uint64) (n int) {
	return sovCycleList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CycleListChangeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycleList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CycleListChangeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CycleListChangeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycleList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycleList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycleList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycleList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycleList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycleList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewList", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycleList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycleList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycleList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewList = append(m.NewList, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycleList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCycleList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CycleList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycleList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CycleList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CycleList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryData", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycleList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycleList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycleList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryData = append(m.QueryData, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycleList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCycleList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCycleList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCycleList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCycleList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCycleList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCycleList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCycleList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCycleList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCycleList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCycleList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCycleList = fmt.Errorf("proto: unexpected end of group")
)
