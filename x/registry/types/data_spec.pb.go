// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/registry/data_spec.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ABIComponent is a specification for how to interpret abi_components
type ABIComponent struct {
	// name
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// consider taking this recursion out and make it once only
	NestedComponent []*ABIComponent `protobuf:"bytes,3,rep,name=nested_component,json=nestedComponent,proto3" json:"nested_component,omitempty"`
}

func (m *ABIComponent) Reset()         { *m = ABIComponent{} }
func (m *ABIComponent) String() string { return proto.CompactTextString(m) }
func (*ABIComponent) ProtoMessage()    {}
func (*ABIComponent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1d9edbb99f1378, []int{0}
}
func (m *ABIComponent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABIComponent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABIComponent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABIComponent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABIComponent.Merge(m, src)
}
func (m *ABIComponent) XXX_Size() int {
	return m.Size()
}
func (m *ABIComponent) XXX_DiscardUnknown() {
	xxx_messageInfo_ABIComponent.DiscardUnknown(m)
}

var xxx_messageInfo_ABIComponent proto.InternalMessageInfo

func (m *ABIComponent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ABIComponent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ABIComponent) GetNestedComponent() []*ABIComponent {
	if m != nil {
		return m.NestedComponent
	}
	return nil
}

// DataSpec is a specification for how to interpret and aggregate data
type DataSpec struct {
	// ipfs hash of the data spec
	DocumentHash string `protobuf:"bytes,1,opt,name=document_hash,json=documentHash,proto3" json:"document_hash,omitempty"`
	// the value's datatype for decoding the value
	ResponseValueType string `protobuf:"bytes,2,opt,name=response_value_type,json=responseValueType,proto3" json:"response_value_type,omitempty"`
	// the abi components for decoding
	AbiComponents []*ABIComponent `protobuf:"bytes,3,rep,name=abi_components,json=abiComponents,proto3" json:"abi_components,omitempty"`
	// how to aggregate the data (ie. average, median, mode, etc) for aggregating reports and arriving at final value
	AggregationMethod string `protobuf:"bytes,4,opt,name=aggregation_method,json=aggregationMethod,proto3" json:"aggregation_method,omitempty"`
	// address that originally registered the data spec
	Registrar string `protobuf:"bytes,5,opt,name=registrar,proto3" json:"registrar,omitempty"`
	// report_buffer_window specifies the duration of the time window following an initial report
	// during which additional reports can be submitted. This duration acts as a buffer, allowing
	// a collection of related reports in a defined time frame. The window ensures that all
	// pertinent reports are aggregated together before arriving at a final value. This defaults
	// to 0s if not specified.
	// extensions: treat as a golang time.duration, don't allow nil values, don't omit empty values
	ReportBufferWindow time.Duration `protobuf:"bytes,6,opt,name=report_buffer_window,json=reportBufferWindow,proto3,stdduration" json:"report_buffer_window"`
}

func (m *DataSpec) Reset()         { *m = DataSpec{} }
func (m *DataSpec) String() string { return proto.CompactTextString(m) }
func (*DataSpec) ProtoMessage()    {}
func (*DataSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c1d9edbb99f1378, []int{1}
}
func (m *DataSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataSpec.Merge(m, src)
}
func (m *DataSpec) XXX_Size() int {
	return m.Size()
}
func (m *DataSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DataSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DataSpec proto.InternalMessageInfo

func (m *DataSpec) GetDocumentHash() string {
	if m != nil {
		return m.DocumentHash
	}
	return ""
}

func (m *DataSpec) GetResponseValueType() string {
	if m != nil {
		return m.ResponseValueType
	}
	return ""
}

func (m *DataSpec) GetAbiComponents() []*ABIComponent {
	if m != nil {
		return m.AbiComponents
	}
	return nil
}

func (m *DataSpec) GetAggregationMethod() string {
	if m != nil {
		return m.AggregationMethod
	}
	return ""
}

func (m *DataSpec) GetRegistrar() string {
	if m != nil {
		return m.Registrar
	}
	return ""
}

func (m *DataSpec) GetReportBufferWindow() time.Duration {
	if m != nil {
		return m.ReportBufferWindow
	}
	return 0
}

func init() {
	proto.RegisterType((*ABIComponent)(nil), "layer.registry.ABIComponent")
	proto.RegisterType((*DataSpec)(nil), "layer.registry.DataSpec")
}

func init() { proto.RegisterFile("layer/registry/data_spec.proto", fileDescriptor_8c1d9edbb99f1378) }

var fileDescriptor_8c1d9edbb99f1378 = []byte{
	// 465 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xb1, 0x6e, 0xd4, 0x40,
	0x10, 0x3d, 0x27, 0x21, 0x22, 0x9b, 0x5c, 0x20, 0xcb, 0x15, 0x4e, 0x84, 0x9c, 0x53, 0x68, 0x4e,
	0xa0, 0xb3, 0xa5, 0x20, 0xd1, 0xc7, 0x09, 0x02, 0x0a, 0x9a, 0x0b, 0x02, 0x29, 0x8d, 0xb5, 0xb6,
	0xe7, 0xd6, 0x96, 0xec, 0x1d, 0x6b, 0x77, 0x4d, 0xb8, 0x8a, 0x5f, 0xa0, 0xe4, 0x13, 0x28, 0x29,
	0xf8, 0x88, 0x94, 0x11, 0x15, 0x15, 0xa0, 0xbb, 0x22, 0xbf, 0x81, 0xbc, 0x6b, 0xe7, 0x8e, 0x2e,
	0x8d, 0x35, 0xf3, 0xde, 0xec, 0xdb, 0xe7, 0x7d, 0x43, 0xbc, 0x82, 0xcd, 0x40, 0x06, 0x12, 0x78,
	0xae, 0xb4, 0x9c, 0x05, 0x29, 0xd3, 0x2c, 0x52, 0x15, 0x24, 0x7e, 0x25, 0x51, 0x23, 0xdd, 0x35,
	0xbc, 0xdf, 0xf1, 0x07, 0x7b, 0xac, 0xcc, 0x05, 0x06, 0xe6, 0x6b, 0x47, 0x0e, 0xf6, 0x13, 0x54,
	0x25, 0xaa, 0xc8, 0x74, 0x81, 0x6d, 0x5a, 0x6a, 0xc0, 0x91, 0xa3, 0xc5, 0x9b, 0xaa, 0x45, 0x3d,
	0x8e, 0xc8, 0x0b, 0x08, 0x4c, 0x17, 0xd7, 0xd3, 0x20, 0xad, 0x25, 0xd3, 0x39, 0x0a, 0xcb, 0x1f,
	0x7d, 0x26, 0x3b, 0x27, 0xe1, 0x9b, 0x53, 0x2c, 0x2b, 0x14, 0x20, 0x34, 0xa5, 0x64, 0x43, 0xb0,
	0x12, 0x5c, 0x67, 0xe8, 0x8c, 0xb6, 0x26, 0xa6, 0x6e, 0x30, 0x3d, 0xab, 0xc0, 0x5d, 0xb3, 0x58,
	0x53, 0xd3, 0x57, 0xe4, 0xa1, 0x00, 0xa5, 0x21, 0x8d, 0x92, 0xee, 0xac, 0xbb, 0x3e, 0x5c, 0x1f,
	0x6d, 0x1f, 0x3f, 0xf6, 0xff, 0xff, 0x0d, 0x7f, 0x55, 0x7f, 0xf2, 0xc0, 0x9e, 0xba, 0x05, 0x8e,
	0x6e, 0xd6, 0xc8, 0xfd, 0x33, 0xa6, 0xd9, 0x79, 0x05, 0x09, 0x7d, 0x42, 0xfa, 0x29, 0x26, 0x75,
	0x09, 0x42, 0x47, 0x19, 0x53, 0x59, 0x6b, 0x63, 0xa7, 0x03, 0x5f, 0x33, 0x95, 0x51, 0x9f, 0x3c,
	0x92, 0xa0, 0x2a, 0x14, 0x0a, 0xa2, 0x8f, 0xac, 0xa8, 0x21, 0x5a, 0x71, 0xb7, 0xd7, 0x51, 0xef,
	0x1b, 0xe6, 0x5d, 0x63, 0xf5, 0x94, 0xec, 0xb2, 0x38, 0x5f, 0xfa, 0x54, 0x77, 0x32, 0xda, 0x67,
	0x71, 0x7e, 0xdb, 0x29, 0x3a, 0x26, 0x94, 0x71, 0x2e, 0x81, 0x9b, 0xc7, 0x8b, 0x4a, 0xd0, 0x19,
	0xa6, 0xee, 0x86, 0xbd, 0x73, 0x85, 0x79, 0x6b, 0x08, 0xfa, 0x82, 0x6c, 0xb5, 0xb2, 0x4c, 0xba,
	0xf7, 0x9a, 0xa9, 0xd0, 0xfd, 0xf9, 0x63, 0x3c, 0x68, 0x13, 0x3b, 0x49, 0x53, 0x09, 0x4a, 0x9d,
	0x6b, 0x99, 0x0b, 0x3e, 0x59, 0x8e, 0xd2, 0x0b, 0x32, 0x90, 0x50, 0xa1, 0xd4, 0x51, 0x5c, 0x4f,
	0xa7, 0x20, 0xa3, 0xcb, 0x5c, 0xa4, 0x78, 0xe9, 0x6e, 0x0e, 0x9d, 0xd1, 0xf6, 0xf1, 0xbe, 0x6f,
	0xd3, 0xf4, 0xbb, 0x34, 0xfd, 0xb3, 0x36, 0xcd, 0xb0, 0x7f, 0xf5, 0xfb, 0xb0, 0xf7, 0xf5, 0xcf,
	0xa1, 0xf3, 0xed, 0xe6, 0xfb, 0x53, 0x67, 0x42, 0xad, 0x4a, 0x68, 0x44, 0x3e, 0x18, 0x8d, 0xf0,
	0xe5, 0xd5, 0xdc, 0x73, 0xae, 0xe7, 0x9e, 0xf3, 0x77, 0xee, 0x39, 0x5f, 0x16, 0x5e, 0xef, 0x7a,
	0xe1, 0xf5, 0x7e, 0x2d, 0xbc, 0xde, 0xc5, 0x33, 0x9e, 0xeb, 0xac, 0x8e, 0xfd, 0x04, 0xcb, 0x40,
	0x43, 0x51, 0xa0, 0x1c, 0xe7, 0x18, 0xd8, 0x6d, 0xfd, 0xb4, 0xdc, 0xd7, 0xe6, 0x99, 0x55, 0xbc,
	0x69, 0x2e, 0x7f, 0xfe, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x73, 0xf3, 0x1f, 0x76, 0xce, 0x02, 0x00,
	0x00,
}

func (m *ABIComponent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABIComponent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABIComponent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NestedComponent) > 0 {
		for iNdEx := len(m.NestedComponent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NestedComponent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintDataSpec(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintDataSpec(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.ReportBufferWindow, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ReportBufferWindow):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintDataSpec(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.Registrar) > 0 {
		i -= len(m.Registrar)
		copy(dAtA[i:], m.Registrar)
		i = encodeVarintDataSpec(dAtA, i, uint64(len(m.Registrar)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AggregationMethod) > 0 {
		i -= len(m.AggregationMethod)
		copy(dAtA[i:], m.AggregationMethod)
		i = encodeVarintDataSpec(dAtA, i, uint64(len(m.AggregationMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AbiComponents) > 0 {
		for iNdEx := len(m.AbiComponents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AbiComponents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataSpec(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ResponseValueType) > 0 {
		i -= len(m.ResponseValueType)
		copy(dAtA[i:], m.ResponseValueType)
		i = encodeVarintDataSpec(dAtA, i, uint64(len(m.ResponseValueType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DocumentHash) > 0 {
		i -= len(m.DocumentHash)
		copy(dAtA[i:], m.DocumentHash)
		i = encodeVarintDataSpec(dAtA, i, uint64(len(m.DocumentHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ABIComponent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovDataSpec(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovDataSpec(uint64(l))
	}
	if len(m.NestedComponent) > 0 {
		for _, e := range m.NestedComponent {
			l = e.Size()
			n += 1 + l + sovDataSpec(uint64(l))
		}
	}
	return n
}

func (m *DataSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DocumentHash)
	if l > 0 {
		n += 1 + l + sovDataSpec(uint64(l))
	}
	l = len(m.ResponseValueType)
	if l > 0 {
		n += 1 + l + sovDataSpec(uint64(l))
	}
	if len(m.AbiComponents) > 0 {
		for _, e := range m.AbiComponents {
			l = e.Size()
			n += 1 + l + sovDataSpec(uint64(l))
		}
	}
	l = len(m.AggregationMethod)
	if l > 0 {
		n += 1 + l + sovDataSpec(uint64(l))
	}
	l = len(m.Registrar)
	if l > 0 {
		n += 1 + l + sovDataSpec(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.ReportBufferWindow)
	n += 1 + l + sovDataSpec(uint64(l))
	return n
}

func sovDataSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataSpec(x uint64) (n int) {
	return sovDataSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ABIComponent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABIComponent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABIComponent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NestedComponent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NestedComponent = append(m.NestedComponent, &ABIComponent{})
			if err := m.NestedComponent[len(m.NestedComponent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DocumentHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DocumentHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResponseValueType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResponseValueType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AbiComponents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AbiComponents = append(m.AbiComponents, &ABIComponent{})
			if err := m.AbiComponents[len(m.AbiComponents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AggregationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Registrar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Registrar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReportBufferWindow", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataSpec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.ReportBufferWindow, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataSpec = fmt.Errorf("proto: unexpected end of group")
)
