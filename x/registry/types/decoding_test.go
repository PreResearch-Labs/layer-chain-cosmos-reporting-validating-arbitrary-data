package types

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/stretchr/testify/require"
)

func TestDecodeQueryType(t *testing.T) {
	testcases := []struct {
		name              string
		querydata         string
		expectedQueryType string
	}{
		{
			"Test case query type AmpleforthCustomSpotPrice",
			"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000019416d706c65666f727468437573746f6d53706f74507269636500000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
			"AmpleforthCustomSpotPrice",
		},
		{
			"Test case query type AmpleforthUSPCE",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f416d706c65666f72746855535043450000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
			"AmpleforthUSPCE",
		},
		{
			"Test case query type AutopayAddresses",
			"0x0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000104175746f70617941646472657373657300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000",
			"AutopayAddresses",
		},
		{
			"Test case query type BTCBalance",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a42544342616c616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000065aecd920000000000000000000000000000000000000000000000000000000000000022334379643245786141456f547a6d4c4e7969784a7842734a34583136743156655063000000000000000000000000000000000000000000000000000000000000",
			"BTCBalance",
		},
		{
			"Test case query type ChatGPTResponse",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000f43686174475054526573706f6e7365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000f576861742069732054656c6c6f723f0000000000000000000000000000000000",
			"ChatGPTResponse",
		},
		{
			"Test case query type ComboQuery",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000a436f6d626f517565727900000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000000000000000000000000000000000000000016000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000953706f745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cf745072696365000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000003657468000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037573640000000000000000000000000000000000000000000000000000000000",
			"ComboQuery",
		},
		{
			"Test case query type CrossChainBalance",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000001143726f7373436861696e42616c616e63650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000100000000000000000000000088df592f8eb5d7bd38bfef7deb0fbc02cf3778a00000000000000000000000000000000000000000000000000000000000f41e7e",
			"CrossChainBalance",
		},
		{
			"Test case query type CustomPrice",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000b437573746f6d50726963650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000000a73746f636b70726963650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000046e76646100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000375736400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
			"CustomPrice",
		},
		{
			"Test case query type EVMCall",
			"0x00000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000745564d43616c6c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000088df592f8eb5d7bd38bfef7deb0fbc02cf3778a00000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000418160ddd00000000000000000000000000000000000000000000000000000000",
			"EVMCall",
		},
	}
	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			querydataBytes := hexutil.MustDecode(tc.querydata)
			querytype, _, err := DecodeQueryType(querydataBytes)
			require.NoError(t, err)
			require.Equal(t, tc.expectedQueryType, querytype)
		})
	}
}

func TestValueDecoded(t *testing.T) {
	t.Parallel()
	value := func(val string) *big.Int {
		v, _ := new(big.Int).SetString(val, 10)
		return v
	}
	bytes32value := func(val string) [32]byte {
		return common.HexToHash(val)
	}
	testcases := []struct {
		name          string
		value         string
		valueType     string
		expectedValue []interface{}
	}{
		{
			"Test case uint256 response",
			"0x0000000000000000000000000000000000000000000000056a6418b505860000",
			"uint256",
			[]interface{}{value("99900000000000000000")},
		},
		{
			"Test case address[] response",
			"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000011ca06aa780ce89dbbf5d8f5fa8bf6965be942c9",
			"address[]",
			[]interface{}{[]common.Address{common.HexToAddress("0x11cA06aa780ce89dbBF5D8F5fA8bf6965Be942c9")}},
		},
		{
			"Test case bytes32 response",
			"0x3b696cbaa12880500df23f90cf5599987649df71fe24e830cc21fbb95891dbe7",
			"bytes32",
			[]interface{}{bytes32value("0x3b696cbaa12880500df23f90cf5599987649df71fe24e830cc21fbb95891dbe7")},
		},
		{
			"Test case bytes32[] response",
			"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000344086f750037db7f501cfaa2376284f303cc9cbcec36c3731a7d747870159e2644cb18d187a47004d889cdafd858a71ce79c7b1319ddfd84b2687afea72d9ec82b441e8e1579ab56cc5fd71bf32d096778ee7ef2c28fcba867766467c12e4607",
			"bytes32[]",
			[]interface{}{[][32]byte{bytes32value("0x44086f750037db7f501cfaa2376284f303cc9cbcec36c3731a7d747870159e26"), bytes32value("0x44cb18d187a47004d889cdafd858a71ce79c7b1319ddfd84b2687afea72d9ec8"), bytes32value("0x2b441e8e1579ab56cc5fd71bf32d096778ee7ef2c28fcba867766467c12e4607")}},
		},
		{
			"Test case bool response",
			"0x0000000000000000000000000000000000000000000000000000000000000001",
			"bool",
			[]interface{}{true},
		},
		{
			"Test case uint256[] response",
			"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000098a7d9b8314c000000000000000000000000000000000000000000000000243b597e7159180000000000000000000000000000000000000000000000000000008ac7230489e80000",
			"uint256[]",
			[]interface{}{[]*big.Int{value("11000000000000000000"), value("171100000000000001048576"), value("10000000000000000000")}},
		},
		{
			"Test case string response",
			"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002e516d645734464e4b7350533979796b4b4e357343375135337064574a527a325458675652476e5a48617750377165000000000000000000000000000000000000",
			"string",
			[]interface{}{"QmdW4FNKsPS9yykKN5sC7Q53pdWJRz2TXgVRGnZHawP7qe"},
		},
		{
			"Test case (bytes32,address,uint256,uint256) response",
			"0x240165a58dc0ace7184e6c49c06a510c7a31f40ebbcc6c5480eb9c98506b2d47000000000000000000000000dedc604896be034283365d65118cce2942f9939200000000000000000000000000000000000000000000000000000000627b5870000000000000000000000000000000000000000000000000000019a39a365a68",
			"(bytes32,address,uint256,uint256)",
			[]interface{}{
				struct {
					Value0 [32]uint8      `json:"Value0"`
					Value1 common.Address `json:"Value1"`
					Value2 *big.Int       `json:"Value2"`
					Value3 *big.Int       `json:"Value3"`
				}{
					Value0: bytes32value("0x240165a58dc0ace7184e6c49c06a510c7a31f40ebbcc6c5480eb9c98506b2d47"),
					Value1: common.HexToAddress("0xdedc604896be034283365d65118cce2942f99392"),
					Value2: value("1652250736"),
					Value3: value("28190457617000"),
				},
			},
		},
		{
			"Test case (uint256,uint256)[] response",
			"0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000001",
			"(uint256,uint256)[]",
			[]interface{}{
				[]struct {
					Value0 *big.Int `json:"Value0"`
					Value1 *big.Int `json:"Value1"`
				}{
					{
						Value0: value("2"),
						Value1: value("1"),
					},
				},
			},
		},
		{
			"Test case bytes[][][] response",
			a000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000d48656c6c6f2c20776f726c642100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f416e6f74686572206578616d706c65000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000094d6f72652064617461000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000b4279652c20776f726c6421000000000000000000000000000000000000000000",
			"bytes[][][]",
			[]interface{}{[][][][]byte{
				{
					{
						[]byte("Hello, world!"),
						[]byte("Another example"), // Second bytes array
						[]byte("More data"),
					},
					{
						[]byte("Bye, world!"),
					},
				},
			}},
		},
		{
			"Test case (string,address,bytes32,bool,uint256[])[]",
			"00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000089b420e2004f34b6ab3e4c824c60ec693c4569c0a6f013ee236804827b77696d350e9f0ac3e879328f2a3021d473a0b778ad78ac000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000000a68656c6c6f776f726c6400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000005",
			"(string,address,bytes32,bool,uint256[])[]",
			[]interface{}{
				[]struct {
					Value0 string         `json:"Value0"`
					Value1 common.Address `json:"Value1"`
					Value2 [32]byte       `json:"Value2"`
					Value3 bool           `json:"Value3"`
					Value4 []*big.Int     `json:"Value4"`
				}{
					{
						Value0: "helloworld",
						Value1: common.HexToAddress("0x89B420E2004F34b6ab3e4c824c60EC693c4569c0"),
						Value2: bytes32value("0xa6f013ee236804827b77696d350e9f0ac3e879328f2a3021d473a0b778ad78ac"),
						Value3: true,
						Value4: []*big.Int{value("1"), value("2"), value("3"), value("4"), value("5")},
					},
				},
			},
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			result, err := DecodeValue(tc.value, tc.valueType)
			require.NoError(t, err)
			require.Equal(t, tc.expectedValue, result)
		})
	}
}

func TestIsValueDecodable(t *testing.T) {
	val := "0x0000000000000000000000000000000000000000000000000000000000000009"
	err := IsValueDecodable(val, "int8")
	require.NoError(t, err)
}

func TestDecodeParamatypes(t *testing.T) {
	dataSpec := DataSpec{
		DocumentHash:      "",
		ResponseValueType: "uint256",
		AbiComponents: []*ABIComponent{
			{Name: "metric", FieldType: "string"},
			{Name: "currency", FieldType: "string"},
			{
				Name: "collection", FieldType: "tuple[]",
				NestedComponent: []*ABIComponent{
					{Name: "chainName", FieldType: "string"},
					{Name: "collectionAddress", FieldType: "address"},
				},
			},
			{
				Name: "tokens", FieldType: "tuple[]",
				NestedComponent: []*ABIComponent{
					{Name: "chainName", FieldType: "string"},
					{Name: "tokenName", FieldType: "string"},
					{Name: "tokenAddress", FieldType: "address"},
				},
			},
		},
	}
	encodedDataSpec, err := dataSpec.EncodeData("MimicryMacroMarketMashup",
		`[
	"market-cap",
	"usd",
	[
		["ethereum-mainnet","0x50f5474724e0Ee42D9a4e711ccFB275809Fd6d4a"],
		["ethereum-mainnet","0xF87E31492Faf9A91B02Ee0dEAAd50d51d56D5d4d"],
		["ethereum-mainnet","0x34d85c9CDeB23FA97cb08333b511ac86E1C4E258"]
	],
	[
		["ethereum-mainnet","sand","0x3845badAde8e6dFF049820680d1F14bD3903a5d0"],
		["ethereum-mainnet","mana","0x0F5D2fB29fb7d3CFeE444a200298f468908cC942"],
		["ethereum-mainnet","ape","0x4d224452801ACEd8B2F0aebE155379bb5D594381"]
	]
	]`)
	require.NoError(t, err)
	_, resultBytes, err := DecodeQueryType(encodedDataSpec)
	require.NoError(t, err)
	res, err := DecodeParamtypes(resultBytes, dataSpec.AbiComponents)
	require.NoError(t, err)
	expectedDecodedResult := `["market-cap","usd",[{"chainName":"ethereum-mainnet","collectionAddress":"0x50f5474724e0ee42d9a4e711ccfb275809fd6d4a"},{"chainName":"ethereum-mainnet","collectionAddress":"0xf87e31492faf9a91b02ee0deaad50d51d56d5d4d"},{"chainName":"ethereum-mainnet","collectionAddress":"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258"}],[{"chainName":"ethereum-mainnet","tokenName":"sand","tokenAddress":"0x3845badade8e6dff049820680d1f14bd3903a5d0"},{"chainName":"ethereum-mainnet","tokenName":"mana","tokenAddress":"0x0f5d2fb29fb7d3cfee444a200298f468908cc942"},{"chainName":"ethereum-mainnet","tokenName":"ape","tokenAddress":"0x4d224452801aced8b2f0aebe155379bb5d594381"}]]`
	require.Equal(t, res, expectedDecodedResult)
}
