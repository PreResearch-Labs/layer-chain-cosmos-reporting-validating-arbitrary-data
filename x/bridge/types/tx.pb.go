// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/bridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterOperatorPubkey struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OperatorPubkey string `protobuf:"bytes,2,opt,name=operatorPubkey,proto3" json:"operatorPubkey,omitempty"`
}

func (m *MsgRegisterOperatorPubkey) Reset()         { *m = MsgRegisterOperatorPubkey{} }
func (m *MsgRegisterOperatorPubkey) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOperatorPubkey) ProtoMessage()    {}
func (*MsgRegisterOperatorPubkey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{0}
}
func (m *MsgRegisterOperatorPubkey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOperatorPubkey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOperatorPubkey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOperatorPubkey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOperatorPubkey.Merge(m, src)
}
func (m *MsgRegisterOperatorPubkey) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOperatorPubkey) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOperatorPubkey.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOperatorPubkey proto.InternalMessageInfo

func (m *MsgRegisterOperatorPubkey) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterOperatorPubkey) GetOperatorPubkey() string {
	if m != nil {
		return m.OperatorPubkey
	}
	return ""
}

type MsgRegisterOperatorPubkeyResponse struct {
}

func (m *MsgRegisterOperatorPubkeyResponse) Reset()         { *m = MsgRegisterOperatorPubkeyResponse{} }
func (m *MsgRegisterOperatorPubkeyResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOperatorPubkeyResponse) ProtoMessage()    {}
func (*MsgRegisterOperatorPubkeyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{1}
}
func (m *MsgRegisterOperatorPubkeyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOperatorPubkeyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOperatorPubkeyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOperatorPubkeyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOperatorPubkeyResponse.Merge(m, src)
}
func (m *MsgRegisterOperatorPubkeyResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOperatorPubkeyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOperatorPubkeyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOperatorPubkeyResponse proto.InternalMessageInfo

type MsgSubmitBridgeValsetSignature struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgSubmitBridgeValsetSignature) Reset()         { *m = MsgSubmitBridgeValsetSignature{} }
func (m *MsgSubmitBridgeValsetSignature) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBridgeValsetSignature) ProtoMessage()    {}
func (*MsgSubmitBridgeValsetSignature) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{2}
}
func (m *MsgSubmitBridgeValsetSignature) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBridgeValsetSignature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBridgeValsetSignature.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBridgeValsetSignature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBridgeValsetSignature.Merge(m, src)
}
func (m *MsgSubmitBridgeValsetSignature) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBridgeValsetSignature) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBridgeValsetSignature.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBridgeValsetSignature proto.InternalMessageInfo

func (m *MsgSubmitBridgeValsetSignature) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitBridgeValsetSignature) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *MsgSubmitBridgeValsetSignature) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgSubmitBridgeValsetSignatureResponse struct {
}

func (m *MsgSubmitBridgeValsetSignatureResponse) Reset() {
	*m = MsgSubmitBridgeValsetSignatureResponse{}
}
func (m *MsgSubmitBridgeValsetSignatureResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBridgeValsetSignatureResponse) ProtoMessage()    {}
func (*MsgSubmitBridgeValsetSignatureResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{3}
}
func (m *MsgSubmitBridgeValsetSignatureResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBridgeValsetSignatureResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBridgeValsetSignatureResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBridgeValsetSignatureResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBridgeValsetSignatureResponse.Merge(m, src)
}
func (m *MsgSubmitBridgeValsetSignatureResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBridgeValsetSignatureResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBridgeValsetSignatureResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBridgeValsetSignatureResponse proto.InternalMessageInfo

type MsgSubmitOracleAttestation struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	QueryId   string `protobuf:"bytes,2,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature string `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *MsgSubmitOracleAttestation) Reset()         { *m = MsgSubmitOracleAttestation{} }
func (m *MsgSubmitOracleAttestation) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitOracleAttestation) ProtoMessage()    {}
func (*MsgSubmitOracleAttestation) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{4}
}
func (m *MsgSubmitOracleAttestation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitOracleAttestation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitOracleAttestation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitOracleAttestation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitOracleAttestation.Merge(m, src)
}
func (m *MsgSubmitOracleAttestation) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitOracleAttestation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitOracleAttestation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitOracleAttestation proto.InternalMessageInfo

func (m *MsgSubmitOracleAttestation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSubmitOracleAttestation) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *MsgSubmitOracleAttestation) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *MsgSubmitOracleAttestation) GetSignature() string {
	if m != nil {
		return m.Signature
	}
	return ""
}

type MsgSubmitOracleAttestationResponse struct {
}

func (m *MsgSubmitOracleAttestationResponse) Reset()         { *m = MsgSubmitOracleAttestationResponse{} }
func (m *MsgSubmitOracleAttestationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitOracleAttestationResponse) ProtoMessage()    {}
func (*MsgSubmitOracleAttestationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{5}
}
func (m *MsgSubmitOracleAttestationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitOracleAttestationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitOracleAttestationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitOracleAttestationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitOracleAttestationResponse.Merge(m, src)
}
func (m *MsgSubmitOracleAttestationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitOracleAttestationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitOracleAttestationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitOracleAttestationResponse proto.InternalMessageInfo

type MsgRequestAttestations struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	QueryId   string `protobuf:"bytes,2,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Timestamp string `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *MsgRequestAttestations) Reset()         { *m = MsgRequestAttestations{} }
func (m *MsgRequestAttestations) String() string { return proto.CompactTextString(m) }
func (*MsgRequestAttestations) ProtoMessage()    {}
func (*MsgRequestAttestations) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{6}
}
func (m *MsgRequestAttestations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestAttestations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestAttestations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestAttestations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestAttestations.Merge(m, src)
}
func (m *MsgRequestAttestations) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestAttestations) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestAttestations.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestAttestations proto.InternalMessageInfo

func (m *MsgRequestAttestations) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRequestAttestations) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *MsgRequestAttestations) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type MsgRequestAttestationsResponse struct {
}

func (m *MsgRequestAttestationsResponse) Reset()         { *m = MsgRequestAttestationsResponse{} }
func (m *MsgRequestAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRequestAttestationsResponse) ProtoMessage()    {}
func (*MsgRequestAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_cb4091a52ebadfca, []int{7}
}
func (m *MsgRequestAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRequestAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRequestAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRequestAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRequestAttestationsResponse.Merge(m, src)
}
func (m *MsgRequestAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRequestAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRequestAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRequestAttestationsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterOperatorPubkey)(nil), "layer.bridge.MsgRegisterOperatorPubkey")
	proto.RegisterType((*MsgRegisterOperatorPubkeyResponse)(nil), "layer.bridge.MsgRegisterOperatorPubkeyResponse")
	proto.RegisterType((*MsgSubmitBridgeValsetSignature)(nil), "layer.bridge.MsgSubmitBridgeValsetSignature")
	proto.RegisterType((*MsgSubmitBridgeValsetSignatureResponse)(nil), "layer.bridge.MsgSubmitBridgeValsetSignatureResponse")
	proto.RegisterType((*MsgSubmitOracleAttestation)(nil), "layer.bridge.MsgSubmitOracleAttestation")
	proto.RegisterType((*MsgSubmitOracleAttestationResponse)(nil), "layer.bridge.MsgSubmitOracleAttestationResponse")
	proto.RegisterType((*MsgRequestAttestations)(nil), "layer.bridge.MsgRequestAttestations")
	proto.RegisterType((*MsgRequestAttestationsResponse)(nil), "layer.bridge.MsgRequestAttestationsResponse")
}

func init() { proto.RegisterFile("layer/bridge/tx.proto", fileDescriptor_cb4091a52ebadfca) }

var fileDescriptor_cb4091a52ebadfca = []byte{
	// 451 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xbd, 0x8e, 0xd3, 0x40,
	0x10, 0xc7, 0xb3, 0x18, 0x71, 0xba, 0xd1, 0x89, 0xc2, 0x88, 0x3b, 0x63, 0x90, 0x75, 0x98, 0xd3,
	0x11, 0x50, 0xb0, 0xf9, 0xaa, 0xe8, 0x08, 0x15, 0x45, 0x14, 0x94, 0x48, 0x14, 0x74, 0xb6, 0x33,
	0x5a, 0x56, 0xb1, 0xb3, 0xce, 0xee, 0x1a, 0xc5, 0x25, 0x88, 0x07, 0xa0, 0xe6, 0x29, 0x78, 0x0c,
	0xca, 0x94, 0x74, 0xa0, 0xa4, 0xe0, 0x35, 0x90, 0xed, 0xd8, 0xe4, 0xcb, 0x56, 0x90, 0xa8, 0xa2,
	0x9d, 0xfd, 0x65, 0xe7, 0x37, 0xde, 0xbf, 0x16, 0x6e, 0x86, 0x5e, 0x8a, 0xc2, 0xf5, 0x05, 0x1b,
	0x51, 0x74, 0xd5, 0xcc, 0x89, 0x05, 0x57, 0x5c, 0x3f, 0xc9, 0xcb, 0x4e, 0x51, 0x36, 0xcf, 0x02,
	0x2e, 0x23, 0x2e, 0xdd, 0x48, 0x52, 0xf7, 0xc3, 0x93, 0xec, 0xa7, 0xc0, 0xec, 0x31, 0xdc, 0xea,
	0x49, 0x3a, 0x40, 0xca, 0xa4, 0x42, 0xd1, 0x8f, 0x51, 0x78, 0x8a, 0x8b, 0x37, 0x89, 0x3f, 0xc6,
	0x54, 0x37, 0xe0, 0x28, 0x10, 0x98, 0x15, 0x0c, 0x72, 0x4e, 0xda, 0xc7, 0x83, 0x72, 0xa9, 0x5f,
	0xc2, 0x75, 0xbe, 0xc1, 0x1a, 0x57, 0x72, 0x60, 0xab, 0xfa, 0xe2, 0xe4, 0xd3, 0xef, 0x6f, 0x0f,
	0xcb, 0x7f, 0xd9, 0xf7, 0xe0, 0x6e, 0x6d, 0xb3, 0x01, 0xca, 0x98, 0x4f, 0x24, 0xda, 0x9f, 0x09,
	0x58, 0x3d, 0x49, 0x87, 0x89, 0x1f, 0x31, 0xd5, 0xcd, 0xf5, 0xdf, 0x7a, 0xa1, 0x44, 0x35, 0x64,
	0x74, 0xe2, 0xa9, 0x44, 0x60, 0x83, 0xd7, 0x1d, 0x38, 0x56, 0x2c, 0x42, 0xa9, 0xbc, 0x28, 0x5e,
	0x29, 0xfd, 0x2d, 0x64, 0xbb, 0xb2, 0x3c, 0xc4, 0xd0, 0x8a, 0xdd, 0xaa, 0xb0, 0xe5, 0xda, 0x86,
	0xcb, 0x66, 0x8b, 0x4a, 0xf8, 0x2b, 0x01, 0xb3, 0x42, 0xfb, 0xc2, 0x0b, 0x42, 0x7c, 0xa9, 0x54,
	0xd6, 0x52, 0x31, 0x3e, 0x69, 0x90, 0x35, 0xe0, 0x68, 0x9a, 0xa0, 0x48, 0x5f, 0x8f, 0x56, 0xaa,
	0xe5, 0x72, 0x73, 0x0c, 0xad, 0x71, 0x8c, 0xab, 0xcd, 0x63, 0x5c, 0x80, 0x5d, 0xef, 0x56, 0x8d,
	0x30, 0x83, 0xd3, 0xfc, 0x62, 0xa6, 0x09, 0x4a, 0xb5, 0x06, 0xc8, 0xff, 0x6f, 0xbf, 0xe5, 0x77,
	0x9e, 0x5f, 0xf6, 0x9e, 0xce, 0xa5, 0xdb, 0xd3, 0x9f, 0x1a, 0x68, 0x3d, 0x49, 0x75, 0x01, 0xa7,
	0x35, 0x31, 0xbd, 0xef, 0xac, 0x67, 0xdd, 0xa9, 0x8d, 0x98, 0xe9, 0x1e, 0x08, 0x96, 0xbd, 0xf5,
	0x8f, 0x04, 0x6e, 0x37, 0x05, 0xb1, 0xb3, 0x73, 0x60, 0x03, 0x6d, 0x3e, 0xff, 0x17, 0xba, 0x72,
	0x48, 0xe0, 0xac, 0x2e, 0x5a, 0xed, 0x9a, 0x03, 0x77, 0x48, 0xf3, 0xf1, 0xa1, 0x64, 0xd5, 0x96,
	0xc1, 0x8d, 0x7d, 0x79, 0xb8, 0xd8, 0xf3, 0x09, 0x77, 0x28, 0xb3, 0x73, 0x08, 0x55, 0xb6, 0xea,
	0xbe, 0xfa, 0xbe, 0xb0, 0xc8, 0x7c, 0x61, 0x91, 0x5f, 0x0b, 0x8b, 0x7c, 0x59, 0x5a, 0xad, 0xf9,
	0xd2, 0x6a, 0xfd, 0x58, 0x5a, 0xad, 0x77, 0x0f, 0x28, 0x53, 0xef, 0x13, 0xdf, 0x09, 0x78, 0xe4,
	0x2a, 0x0c, 0x43, 0x2e, 0x1e, 0x31, 0xee, 0x16, 0x0f, 0xde, 0xac, 0x7a, 0xf2, 0xd2, 0x18, 0xa5,
	0x7f, 0x2d, 0x7f, 0xcf, 0x9e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x8d, 0x97, 0xe9, 0xad, 0x0f,
	0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterOperatorPubkey(ctx context.Context, in *MsgRegisterOperatorPubkey, opts ...grpc.CallOption) (*MsgRegisterOperatorPubkeyResponse, error)
	SubmitBridgeValsetSignature(ctx context.Context, in *MsgSubmitBridgeValsetSignature, opts ...grpc.CallOption) (*MsgSubmitBridgeValsetSignatureResponse, error)
	SubmitOracleAttestation(ctx context.Context, in *MsgSubmitOracleAttestation, opts ...grpc.CallOption) (*MsgSubmitOracleAttestationResponse, error)
	RequestAttestations(ctx context.Context, in *MsgRequestAttestations, opts ...grpc.CallOption) (*MsgRequestAttestationsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOperatorPubkey(ctx context.Context, in *MsgRegisterOperatorPubkey, opts ...grpc.CallOption) (*MsgRegisterOperatorPubkeyResponse, error) {
	out := new(MsgRegisterOperatorPubkeyResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Msg/RegisterOperatorPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitBridgeValsetSignature(ctx context.Context, in *MsgSubmitBridgeValsetSignature, opts ...grpc.CallOption) (*MsgSubmitBridgeValsetSignatureResponse, error) {
	out := new(MsgSubmitBridgeValsetSignatureResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Msg/SubmitBridgeValsetSignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitOracleAttestation(ctx context.Context, in *MsgSubmitOracleAttestation, opts ...grpc.CallOption) (*MsgSubmitOracleAttestationResponse, error) {
	out := new(MsgSubmitOracleAttestationResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Msg/SubmitOracleAttestation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RequestAttestations(ctx context.Context, in *MsgRequestAttestations, opts ...grpc.CallOption) (*MsgRequestAttestationsResponse, error) {
	out := new(MsgRequestAttestationsResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Msg/RequestAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterOperatorPubkey(context.Context, *MsgRegisterOperatorPubkey) (*MsgRegisterOperatorPubkeyResponse, error)
	SubmitBridgeValsetSignature(context.Context, *MsgSubmitBridgeValsetSignature) (*MsgSubmitBridgeValsetSignatureResponse, error)
	SubmitOracleAttestation(context.Context, *MsgSubmitOracleAttestation) (*MsgSubmitOracleAttestationResponse, error)
	RequestAttestations(context.Context, *MsgRequestAttestations) (*MsgRequestAttestationsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOperatorPubkey(ctx context.Context, req *MsgRegisterOperatorPubkey) (*MsgRegisterOperatorPubkeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperatorPubkey not implemented")
}
func (*UnimplementedMsgServer) SubmitBridgeValsetSignature(ctx context.Context, req *MsgSubmitBridgeValsetSignature) (*MsgSubmitBridgeValsetSignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBridgeValsetSignature not implemented")
}
func (*UnimplementedMsgServer) SubmitOracleAttestation(ctx context.Context, req *MsgSubmitOracleAttestation) (*MsgSubmitOracleAttestationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitOracleAttestation not implemented")
}
func (*UnimplementedMsgServer) RequestAttestations(ctx context.Context, req *MsgRequestAttestations) (*MsgRequestAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestAttestations not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOperatorPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterOperatorPubkey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOperatorPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Msg/RegisterOperatorPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOperatorPubkey(ctx, req.(*MsgRegisterOperatorPubkey))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitBridgeValsetSignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBridgeValsetSignature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBridgeValsetSignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Msg/SubmitBridgeValsetSignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBridgeValsetSignature(ctx, req.(*MsgSubmitBridgeValsetSignature))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitOracleAttestation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitOracleAttestation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitOracleAttestation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Msg/SubmitOracleAttestation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitOracleAttestation(ctx, req.(*MsgSubmitOracleAttestation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RequestAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRequestAttestations)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RequestAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Msg/RequestAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RequestAttestations(ctx, req.(*MsgRequestAttestations))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.bridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOperatorPubkey",
			Handler:    _Msg_RegisterOperatorPubkey_Handler,
		},
		{
			MethodName: "SubmitBridgeValsetSignature",
			Handler:    _Msg_SubmitBridgeValsetSignature_Handler,
		},
		{
			MethodName: "SubmitOracleAttestation",
			Handler:    _Msg_SubmitOracleAttestation_Handler,
		},
		{
			MethodName: "RequestAttestations",
			Handler:    _Msg_RequestAttestations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/bridge/tx.proto",
}

func (m *MsgRegisterOperatorPubkey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOperatorPubkey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOperatorPubkey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorPubkey) > 0 {
		i -= len(m.OperatorPubkey)
		copy(dAtA[i:], m.OperatorPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OperatorPubkey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOperatorPubkeyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOperatorPubkeyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOperatorPubkeyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBridgeValsetSignature) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBridgeValsetSignature) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBridgeValsetSignature) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBridgeValsetSignatureResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBridgeValsetSignatureResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBridgeValsetSignatureResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitOracleAttestation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitOracleAttestation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitOracleAttestation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitOracleAttestationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitOracleAttestationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitOracleAttestationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRequestAttestations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestAttestations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAttestations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRequestAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRequestAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRequestAttestationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterOperatorPubkey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OperatorPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterOperatorPubkeyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitBridgeValsetSignature) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitBridgeValsetSignatureResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitOracleAttestation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSubmitOracleAttestationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRequestAttestations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRequestAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterOperatorPubkey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOperatorPubkey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOperatorPubkey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOperatorPubkeyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOperatorPubkeyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOperatorPubkeyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBridgeValsetSignature) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBridgeValsetSignature: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBridgeValsetSignature: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBridgeValsetSignatureResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBridgeValsetSignatureResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBridgeValsetSignatureResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitOracleAttestation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitOracleAttestation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitOracleAttestation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitOracleAttestationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitOracleAttestationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitOracleAttestationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestAttestations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestAttestations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestAttestations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRequestAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRequestAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRequestAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
