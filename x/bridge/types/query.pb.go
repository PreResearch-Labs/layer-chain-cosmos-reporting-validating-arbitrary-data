// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: layer/bridge/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetEvmValidatorsRequest struct {
}

func (m *QueryGetEvmValidatorsRequest) Reset()         { *m = QueryGetEvmValidatorsRequest{} }
func (m *QueryGetEvmValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetEvmValidatorsRequest) ProtoMessage()    {}
func (*QueryGetEvmValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{2}
}
func (m *QueryGetEvmValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEvmValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEvmValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEvmValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEvmValidatorsRequest.Merge(m, src)
}
func (m *QueryGetEvmValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEvmValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEvmValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEvmValidatorsRequest proto.InternalMessageInfo

type QueryGetEvmValidatorsResponse struct {
	BridgeValidatorSet []*BridgeValidator `protobuf:"bytes,1,rep,name=bridgeValidatorSet,proto3" json:"bridgeValidatorSet,omitempty"`
}

func (m *QueryGetEvmValidatorsResponse) Reset()         { *m = QueryGetEvmValidatorsResponse{} }
func (m *QueryGetEvmValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetEvmValidatorsResponse) ProtoMessage()    {}
func (*QueryGetEvmValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{3}
}
func (m *QueryGetEvmValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEvmValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEvmValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEvmValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEvmValidatorsResponse.Merge(m, src)
}
func (m *QueryGetEvmValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEvmValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEvmValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEvmValidatorsResponse proto.InternalMessageInfo

func (m *QueryGetEvmValidatorsResponse) GetBridgeValidatorSet() []*BridgeValidator {
	if m != nil {
		return m.BridgeValidatorSet
	}
	return nil
}

type QueryGetValidatorCheckpointRequest struct {
}

func (m *QueryGetValidatorCheckpointRequest) Reset()         { *m = QueryGetValidatorCheckpointRequest{} }
func (m *QueryGetValidatorCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorCheckpointRequest) ProtoMessage()    {}
func (*QueryGetValidatorCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{4}
}
func (m *QueryGetValidatorCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorCheckpointRequest.Merge(m, src)
}
func (m *QueryGetValidatorCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorCheckpointRequest proto.InternalMessageInfo

type QueryGetValidatorCheckpointResponse struct {
	ValidatorCheckpoint string `protobuf:"bytes,1,opt,name=validatorCheckpoint,proto3" json:"validatorCheckpoint,omitempty"`
}

func (m *QueryGetValidatorCheckpointResponse) Reset()         { *m = QueryGetValidatorCheckpointResponse{} }
func (m *QueryGetValidatorCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorCheckpointResponse) ProtoMessage()    {}
func (*QueryGetValidatorCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{5}
}
func (m *QueryGetValidatorCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorCheckpointResponse.Merge(m, src)
}
func (m *QueryGetValidatorCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorCheckpointResponse proto.InternalMessageInfo

func (m *QueryGetValidatorCheckpointResponse) GetValidatorCheckpoint() string {
	if m != nil {
		return m.ValidatorCheckpoint
	}
	return ""
}

type BridgeValidator struct {
	EthereumAddress string `protobuf:"bytes,1,opt,name=ethereumAddress,proto3" json:"ethereumAddress,omitempty"`
	Power           uint64 `protobuf:"varint,2,opt,name=power,proto3" json:"power,omitempty"`
}

func (m *BridgeValidator) Reset()         { *m = BridgeValidator{} }
func (m *BridgeValidator) String() string { return proto.CompactTextString(m) }
func (*BridgeValidator) ProtoMessage()    {}
func (*BridgeValidator) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{6}
}
func (m *BridgeValidator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValidator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValidator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValidator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValidator.Merge(m, src)
}
func (m *BridgeValidator) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValidator) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValidator.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValidator proto.InternalMessageInfo

func (m *BridgeValidator) GetEthereumAddress() string {
	if m != nil {
		return m.EthereumAddress
	}
	return ""
}

func (m *BridgeValidator) GetPower() uint64 {
	if m != nil {
		return m.Power
	}
	return 0
}

type BridgeValidatorSet struct {
	BridgeValidatorSet []*BridgeValidator `protobuf:"bytes,1,rep,name=bridgeValidatorSet,proto3" json:"bridgeValidatorSet,omitempty"`
}

func (m *BridgeValidatorSet) Reset()         { *m = BridgeValidatorSet{} }
func (m *BridgeValidatorSet) String() string { return proto.CompactTextString(m) }
func (*BridgeValidatorSet) ProtoMessage()    {}
func (*BridgeValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{7}
}
func (m *BridgeValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValidatorSet.Merge(m, src)
}
func (m *BridgeValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValidatorSet proto.InternalMessageInfo

func (m *BridgeValidatorSet) GetBridgeValidatorSet() []*BridgeValidator {
	if m != nil {
		return m.BridgeValidatorSet
	}
	return nil
}

type BridgeValidatorSetParams struct {
	BridgeValidatorSet      *BridgeValidatorSet `protobuf:"bytes,1,opt,name=bridgeValidatorSet,proto3" json:"bridgeValidatorSet,omitempty"`
	ValidatorTimestamp      int64               `protobuf:"varint,2,opt,name=validatorTimestamp,proto3" json:"validatorTimestamp,omitempty"`
	ValidatorPowerThreshold int64               `protobuf:"varint,3,opt,name=validatorPowerThreshold,proto3" json:"validatorPowerThreshold,omitempty"`
	ValidatorSetHash        []byte              `protobuf:"bytes,4,opt,name=validatorSetHash,proto3" json:"validatorSetHash,omitempty"`
	ValidatorCheckpoint     []byte              `protobuf:"bytes,5,opt,name=validatorCheckpoint,proto3" json:"validatorCheckpoint,omitempty"`
}

func (m *BridgeValidatorSetParams) Reset()         { *m = BridgeValidatorSetParams{} }
func (m *BridgeValidatorSetParams) String() string { return proto.CompactTextString(m) }
func (*BridgeValidatorSetParams) ProtoMessage()    {}
func (*BridgeValidatorSetParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{8}
}
func (m *BridgeValidatorSetParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValidatorSetParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValidatorSetParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValidatorSetParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValidatorSetParams.Merge(m, src)
}
func (m *BridgeValidatorSetParams) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValidatorSetParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValidatorSetParams.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValidatorSetParams proto.InternalMessageInfo

func (m *BridgeValidatorSetParams) GetBridgeValidatorSet() *BridgeValidatorSet {
	if m != nil {
		return m.BridgeValidatorSet
	}
	return nil
}

func (m *BridgeValidatorSetParams) GetValidatorTimestamp() int64 {
	if m != nil {
		return m.ValidatorTimestamp
	}
	return 0
}

func (m *BridgeValidatorSetParams) GetValidatorPowerThreshold() int64 {
	if m != nil {
		return m.ValidatorPowerThreshold
	}
	return 0
}

func (m *BridgeValidatorSetParams) GetValidatorSetHash() []byte {
	if m != nil {
		return m.ValidatorSetHash
	}
	return nil
}

func (m *BridgeValidatorSetParams) GetValidatorCheckpoint() []byte {
	if m != nil {
		return m.ValidatorCheckpoint
	}
	return nil
}

type BridgeValidatorSetCheckpointParams struct {
	ValidatorTimestamp      int64  `protobuf:"varint,1,opt,name=validatorTimestamp,proto3" json:"validatorTimestamp,omitempty"`
	ValidatorPowerThreshold int64  `protobuf:"varint,2,opt,name=validatorPowerThreshold,proto3" json:"validatorPowerThreshold,omitempty"`
	ValidatorSetHash        []byte `protobuf:"bytes,3,opt,name=validatorSetHash,proto3" json:"validatorSetHash,omitempty"`
}

func (m *BridgeValidatorSetCheckpointParams) Reset()         { *m = BridgeValidatorSetCheckpointParams{} }
func (m *BridgeValidatorSetCheckpointParams) String() string { return proto.CompactTextString(m) }
func (*BridgeValidatorSetCheckpointParams) ProtoMessage()    {}
func (*BridgeValidatorSetCheckpointParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{9}
}
func (m *BridgeValidatorSetCheckpointParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValidatorSetCheckpointParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValidatorSetCheckpointParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValidatorSetCheckpointParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValidatorSetCheckpointParams.Merge(m, src)
}
func (m *BridgeValidatorSetCheckpointParams) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValidatorSetCheckpointParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValidatorSetCheckpointParams.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValidatorSetCheckpointParams proto.InternalMessageInfo

func (m *BridgeValidatorSetCheckpointParams) GetValidatorTimestamp() int64 {
	if m != nil {
		return m.ValidatorTimestamp
	}
	return 0
}

func (m *BridgeValidatorSetCheckpointParams) GetValidatorPowerThreshold() int64 {
	if m != nil {
		return m.ValidatorPowerThreshold
	}
	return 0
}

func (m *BridgeValidatorSetCheckpointParams) GetValidatorSetHash() []byte {
	if m != nil {
		return m.ValidatorSetHash
	}
	return nil
}

type BridgeValidatorSetCheckpoint struct {
	ValidatorCheckpoint []byte `protobuf:"bytes,1,opt,name=validatorCheckpoint,proto3" json:"validatorCheckpoint,omitempty"`
}

func (m *BridgeValidatorSetCheckpoint) Reset()         { *m = BridgeValidatorSetCheckpoint{} }
func (m *BridgeValidatorSetCheckpoint) String() string { return proto.CompactTextString(m) }
func (*BridgeValidatorSetCheckpoint) ProtoMessage()    {}
func (*BridgeValidatorSetCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{10}
}
func (m *BridgeValidatorSetCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BridgeValidatorSetCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BridgeValidatorSetCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BridgeValidatorSetCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BridgeValidatorSetCheckpoint.Merge(m, src)
}
func (m *BridgeValidatorSetCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *BridgeValidatorSetCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_BridgeValidatorSetCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_BridgeValidatorSetCheckpoint proto.InternalMessageInfo

func (m *BridgeValidatorSetCheckpoint) GetValidatorCheckpoint() []byte {
	if m != nil {
		return m.ValidatorCheckpoint
	}
	return nil
}

type QueryGetValidatorCheckpointParamsRequest struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetValidatorCheckpointParamsRequest) Reset() {
	*m = QueryGetValidatorCheckpointParamsRequest{}
}
func (m *QueryGetValidatorCheckpointParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorCheckpointParamsRequest) ProtoMessage()    {}
func (*QueryGetValidatorCheckpointParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{11}
}
func (m *QueryGetValidatorCheckpointParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorCheckpointParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorCheckpointParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorCheckpointParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorCheckpointParamsRequest.Merge(m, src)
}
func (m *QueryGetValidatorCheckpointParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorCheckpointParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorCheckpointParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorCheckpointParamsRequest proto.InternalMessageInfo

func (m *QueryGetValidatorCheckpointParamsRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetValidatorCheckpointParamsResponse struct {
	Checkpoint     string `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint,omitempty"`
	ValsetHash     string `protobuf:"bytes,2,opt,name=valsetHash,proto3" json:"valsetHash,omitempty"`
	Timestamp      int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	PowerThreshold int64  `protobuf:"varint,4,opt,name=powerThreshold,proto3" json:"powerThreshold,omitempty"`
}

func (m *QueryGetValidatorCheckpointParamsResponse) Reset() {
	*m = QueryGetValidatorCheckpointParamsResponse{}
}
func (m *QueryGetValidatorCheckpointParamsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetValidatorCheckpointParamsResponse) ProtoMessage() {}
func (*QueryGetValidatorCheckpointParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{12}
}
func (m *QueryGetValidatorCheckpointParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorCheckpointParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorCheckpointParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorCheckpointParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorCheckpointParamsResponse.Merge(m, src)
}
func (m *QueryGetValidatorCheckpointParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorCheckpointParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorCheckpointParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorCheckpointParamsResponse proto.InternalMessageInfo

func (m *QueryGetValidatorCheckpointParamsResponse) GetCheckpoint() string {
	if m != nil {
		return m.Checkpoint
	}
	return ""
}

func (m *QueryGetValidatorCheckpointParamsResponse) GetValsetHash() string {
	if m != nil {
		return m.ValsetHash
	}
	return ""
}

func (m *QueryGetValidatorCheckpointParamsResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *QueryGetValidatorCheckpointParamsResponse) GetPowerThreshold() int64 {
	if m != nil {
		return m.PowerThreshold
	}
	return 0
}

type QueryGetValidatorTimestampByIndexRequest struct {
	Index int64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetValidatorTimestampByIndexRequest) Reset() {
	*m = QueryGetValidatorTimestampByIndexRequest{}
}
func (m *QueryGetValidatorTimestampByIndexRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorTimestampByIndexRequest) ProtoMessage()    {}
func (*QueryGetValidatorTimestampByIndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{13}
}
func (m *QueryGetValidatorTimestampByIndexRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorTimestampByIndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorTimestampByIndexRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorTimestampByIndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorTimestampByIndexRequest.Merge(m, src)
}
func (m *QueryGetValidatorTimestampByIndexRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorTimestampByIndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorTimestampByIndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorTimestampByIndexRequest proto.InternalMessageInfo

func (m *QueryGetValidatorTimestampByIndexRequest) GetIndex() int64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGetValidatorTimestampByIndexResponse struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetValidatorTimestampByIndexResponse) Reset() {
	*m = QueryGetValidatorTimestampByIndexResponse{}
}
func (m *QueryGetValidatorTimestampByIndexResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetValidatorTimestampByIndexResponse) ProtoMessage() {}
func (*QueryGetValidatorTimestampByIndexResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{14}
}
func (m *QueryGetValidatorTimestampByIndexResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorTimestampByIndexResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorTimestampByIndexResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorTimestampByIndexResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorTimestampByIndexResponse.Merge(m, src)
}
func (m *QueryGetValidatorTimestampByIndexResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorTimestampByIndexResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorTimestampByIndexResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorTimestampByIndexResponse proto.InternalMessageInfo

func (m *QueryGetValidatorTimestampByIndexResponse) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetValsetSigsRequest struct {
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetValsetSigsRequest) Reset()         { *m = QueryGetValsetSigsRequest{} }
func (m *QueryGetValsetSigsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetSigsRequest) ProtoMessage()    {}
func (*QueryGetValsetSigsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{15}
}
func (m *QueryGetValsetSigsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetSigsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetSigsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetSigsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetSigsRequest.Merge(m, src)
}
func (m *QueryGetValsetSigsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetSigsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetSigsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetSigsRequest proto.InternalMessageInfo

func (m *QueryGetValsetSigsRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetValsetSigsResponse struct {
	Signatures []string `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (m *QueryGetValsetSigsResponse) Reset()         { *m = QueryGetValsetSigsResponse{} }
func (m *QueryGetValsetSigsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValsetSigsResponse) ProtoMessage()    {}
func (*QueryGetValsetSigsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{16}
}
func (m *QueryGetValsetSigsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValsetSigsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValsetSigsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValsetSigsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValsetSigsResponse.Merge(m, src)
}
func (m *QueryGetValsetSigsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValsetSigsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValsetSigsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValsetSigsResponse proto.InternalMessageInfo

func (m *QueryGetValsetSigsResponse) GetSignatures() []string {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type QueryGetOracleAttestationsRequest struct {
	QueryId   string `protobuf:"bytes,1,opt,name=queryId,proto3" json:"queryId,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *QueryGetOracleAttestationsRequest) Reset()         { *m = QueryGetOracleAttestationsRequest{} }
func (m *QueryGetOracleAttestationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetOracleAttestationsRequest) ProtoMessage()    {}
func (*QueryGetOracleAttestationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{17}
}
func (m *QueryGetOracleAttestationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOracleAttestationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOracleAttestationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOracleAttestationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOracleAttestationsRequest.Merge(m, src)
}
func (m *QueryGetOracleAttestationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOracleAttestationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOracleAttestationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOracleAttestationsRequest proto.InternalMessageInfo

func (m *QueryGetOracleAttestationsRequest) GetQueryId() string {
	if m != nil {
		return m.QueryId
	}
	return ""
}

func (m *QueryGetOracleAttestationsRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type QueryGetOracleAttestationsResponse struct {
	Attestations []string `protobuf:"bytes,1,rep,name=attestations,proto3" json:"attestations,omitempty"`
}

func (m *QueryGetOracleAttestationsResponse) Reset()         { *m = QueryGetOracleAttestationsResponse{} }
func (m *QueryGetOracleAttestationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetOracleAttestationsResponse) ProtoMessage()    {}
func (*QueryGetOracleAttestationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{18}
}
func (m *QueryGetOracleAttestationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetOracleAttestationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetOracleAttestationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetOracleAttestationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetOracleAttestationsResponse.Merge(m, src)
}
func (m *QueryGetOracleAttestationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetOracleAttestationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetOracleAttestationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetOracleAttestationsResponse proto.InternalMessageInfo

func (m *QueryGetOracleAttestationsResponse) GetAttestations() []string {
	if m != nil {
		return m.Attestations
	}
	return nil
}

type QueryGetEvmAddressByValidatorAddressRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validatorAddress,proto3" json:"validatorAddress,omitempty"`
}

func (m *QueryGetEvmAddressByValidatorAddressRequest) Reset() {
	*m = QueryGetEvmAddressByValidatorAddressRequest{}
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEvmAddressByValidatorAddressRequest) ProtoMessage() {}
func (*QueryGetEvmAddressByValidatorAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{19}
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEvmAddressByValidatorAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEvmAddressByValidatorAddressRequest.Merge(m, src)
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEvmAddressByValidatorAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEvmAddressByValidatorAddressRequest proto.InternalMessageInfo

func (m *QueryGetEvmAddressByValidatorAddressRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

type QueryGetEvmAddressByValidatorAddressResponse struct {
	EvmAddress string `protobuf:"bytes,1,opt,name=evmAddress,proto3" json:"evmAddress,omitempty"`
}

func (m *QueryGetEvmAddressByValidatorAddressResponse) Reset() {
	*m = QueryGetEvmAddressByValidatorAddressResponse{}
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetEvmAddressByValidatorAddressResponse) ProtoMessage() {}
func (*QueryGetEvmAddressByValidatorAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e48df680904493de, []int{20}
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetEvmAddressByValidatorAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetEvmAddressByValidatorAddressResponse.Merge(m, src)
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetEvmAddressByValidatorAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetEvmAddressByValidatorAddressResponse proto.InternalMessageInfo

func (m *QueryGetEvmAddressByValidatorAddressResponse) GetEvmAddress() string {
	if m != nil {
		return m.EvmAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "layer.bridge.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "layer.bridge.QueryParamsResponse")
	proto.RegisterType((*QueryGetEvmValidatorsRequest)(nil), "layer.bridge.QueryGetEvmValidatorsRequest")
	proto.RegisterType((*QueryGetEvmValidatorsResponse)(nil), "layer.bridge.QueryGetEvmValidatorsResponse")
	proto.RegisterType((*QueryGetValidatorCheckpointRequest)(nil), "layer.bridge.QueryGetValidatorCheckpointRequest")
	proto.RegisterType((*QueryGetValidatorCheckpointResponse)(nil), "layer.bridge.QueryGetValidatorCheckpointResponse")
	proto.RegisterType((*BridgeValidator)(nil), "layer.bridge.BridgeValidator")
	proto.RegisterType((*BridgeValidatorSet)(nil), "layer.bridge.BridgeValidatorSet")
	proto.RegisterType((*BridgeValidatorSetParams)(nil), "layer.bridge.BridgeValidatorSetParams")
	proto.RegisterType((*BridgeValidatorSetCheckpointParams)(nil), "layer.bridge.BridgeValidatorSetCheckpointParams")
	proto.RegisterType((*BridgeValidatorSetCheckpoint)(nil), "layer.bridge.BridgeValidatorSetCheckpoint")
	proto.RegisterType((*QueryGetValidatorCheckpointParamsRequest)(nil), "layer.bridge.QueryGetValidatorCheckpointParamsRequest")
	proto.RegisterType((*QueryGetValidatorCheckpointParamsResponse)(nil), "layer.bridge.QueryGetValidatorCheckpointParamsResponse")
	proto.RegisterType((*QueryGetValidatorTimestampByIndexRequest)(nil), "layer.bridge.QueryGetValidatorTimestampByIndexRequest")
	proto.RegisterType((*QueryGetValidatorTimestampByIndexResponse)(nil), "layer.bridge.QueryGetValidatorTimestampByIndexResponse")
	proto.RegisterType((*QueryGetValsetSigsRequest)(nil), "layer.bridge.QueryGetValsetSigsRequest")
	proto.RegisterType((*QueryGetValsetSigsResponse)(nil), "layer.bridge.QueryGetValsetSigsResponse")
	proto.RegisterType((*QueryGetOracleAttestationsRequest)(nil), "layer.bridge.QueryGetOracleAttestationsRequest")
	proto.RegisterType((*QueryGetOracleAttestationsResponse)(nil), "layer.bridge.QueryGetOracleAttestationsResponse")
	proto.RegisterType((*QueryGetEvmAddressByValidatorAddressRequest)(nil), "layer.bridge.QueryGetEvmAddressByValidatorAddressRequest")
	proto.RegisterType((*QueryGetEvmAddressByValidatorAddressResponse)(nil), "layer.bridge.QueryGetEvmAddressByValidatorAddressResponse")
}

func init() { proto.RegisterFile("layer/bridge/query.proto", fileDescriptor_e48df680904493de) }

var fileDescriptor_e48df680904493de = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xda, 0x49, 0x51, 0x4e, 0x02, 0xad, 0xa6, 0x06, 0x5c, 0xcb, 0xdd, 0xba, 0x03, 0x6a,
	0x9d, 0xb4, 0x78, 0x13, 0x23, 0x91, 0xa4, 0xaa, 0xa0, 0x75, 0x41, 0x24, 0x17, 0x40, 0xea, 0x54,
	0x20, 0xe0, 0xc2, 0x1a, 0xdb, 0xa3, 0xf5, 0x0a, 0x7b, 0x67, 0xbb, 0x33, 0x36, 0xf5, 0x2d, 0x4f,
	0x80, 0xd4, 0x07, 0xe0, 0x0d, 0x90, 0x10, 0x48, 0x48, 0x3c, 0x41, 0x2f, 0x83, 0xb8, 0xe1, 0xaa,
	0x42, 0x09, 0x0f, 0x82, 0x76, 0x76, 0xbc, 0xde, 0x7f, 0x3b, 0x15, 0x77, 0x9e, 0xf3, 0xfb, 0x7d,
	0x67, 0x66, 0xbe, 0x59, 0x43, 0x79, 0x48, 0xa6, 0xd4, 0x35, 0xba, 0xae, 0xd5, 0x37, 0xa9, 0xf1,
	0x74, 0x4c, 0xdd, 0x69, 0xc3, 0x71, 0x99, 0x60, 0x68, 0x53, 0x7a, 0x1a, 0xbe, 0xa7, 0x52, 0x32,
	0x99, 0xc9, 0xa4, 0xc3, 0xf0, 0x7e, 0xf9, 0x31, 0x95, 0xaa, 0xc9, 0x98, 0x39, 0xa4, 0x06, 0x71,
	0x2c, 0x83, 0xd8, 0x36, 0x13, 0x44, 0x58, 0xcc, 0xe6, 0xca, 0xbb, 0xdd, 0x63, 0x7c, 0xc4, 0xb8,
	0xd1, 0x25, 0x5c, 0x95, 0x36, 0x26, 0xbb, 0x5d, 0x2a, 0xc8, 0xae, 0xe1, 0x10, 0xd3, 0xb2, 0x65,
	0xb0, 0x8a, 0xbd, 0x16, 0xc1, 0xe1, 0x10, 0x97, 0x8c, 0x54, 0x19, 0x5c, 0x02, 0xf4, 0xd8, 0x4b,
	0x3e, 0x96, 0xc6, 0x36, 0x7d, 0x3a, 0xa6, 0x5c, 0xe0, 0x23, 0xb8, 0x1a, 0xb1, 0x72, 0x87, 0xd9,
	0x9c, 0xa2, 0x26, 0x5c, 0xf2, 0x93, 0xcb, 0x5a, 0x4d, 0xab, 0x6f, 0x34, 0x4b, 0x8d, 0x30, 0x8d,
	0x86, 0x1f, 0xdd, 0x5a, 0x7d, 0xf1, 0xf2, 0xc6, 0x4a, 0x5b, 0x45, 0x62, 0x1d, 0xaa, 0xb2, 0xd4,
	0xa7, 0x54, 0x7c, 0x32, 0x19, 0x7d, 0x49, 0x86, 0x56, 0x9f, 0x08, 0xe6, 0x06, 0xad, 0x6c, 0xb8,
	0x9e, 0xe1, 0x57, 0x4d, 0x3f, 0x03, 0xe4, 0xd7, 0x0f, 0x7c, 0x27, 0x54, 0x94, 0xb5, 0x5a, 0xb1,
	0xbe, 0xd1, 0xbc, 0x1e, 0x05, 0xd0, 0x8a, 0xc6, 0xb5, 0x53, 0x12, 0xf1, 0xbb, 0x80, 0x67, 0xfd,
	0x02, 0xfb, 0xa3, 0x01, 0xed, 0x7d, 0xe7, 0x30, 0xcb, 0x16, 0x33, 0x54, 0x5f, 0xc1, 0x3b, 0xb9,
	0x51, 0x0a, 0xdb, 0x0e, 0x5c, 0x9d, 0x24, 0xdd, 0x72, 0x3a, 0xeb, 0xed, 0x34, 0x17, 0x7e, 0x0c,
	0x97, 0x63, 0x28, 0x51, 0x1d, 0x2e, 0x53, 0x31, 0xa0, 0x2e, 0x1d, 0x8f, 0x1e, 0xf6, 0xfb, 0x2e,
	0xe5, 0x5c, 0x15, 0x88, 0x9b, 0x51, 0x09, 0xd6, 0x1c, 0xf6, 0x3d, 0x75, 0xcb, 0x85, 0x9a, 0x56,
	0x5f, 0x6d, 0xfb, 0x0b, 0xdc, 0x03, 0xd4, 0x4a, 0xf0, 0xfc, 0xbf, 0xc7, 0xf6, 0x5b, 0x01, 0xca,
	0xc9, 0x2e, 0xfe, 0x8e, 0xa3, 0xe3, 0x8c, 0x5e, 0xde, 0x19, 0xa9, 0xe5, 0xf6, 0x3a, 0xa1, 0x22,
	0xad, 0x1d, 0x6a, 0x00, 0x0a, 0xa6, 0xf7, 0xc4, 0x1a, 0x51, 0x2e, 0xc8, 0xc8, 0x91, 0xb4, 0x8b,
	0xed, 0x14, 0x0f, 0xda, 0x87, 0xb7, 0x03, 0xeb, 0xb1, 0x37, 0x95, 0x27, 0x03, 0x97, 0xf2, 0x01,
	0x1b, 0xf6, 0xcb, 0x45, 0x99, 0x94, 0xe5, 0x46, 0xdb, 0x70, 0x65, 0x12, 0xea, 0x7c, 0x48, 0xf8,
	0xa0, 0xbc, 0x5a, 0xd3, 0xea, 0x9b, 0xed, 0x84, 0x3d, 0x6b, 0xbb, 0xd7, 0x64, 0x78, 0xea, 0x76,
	0xff, 0xa1, 0x01, 0x4e, 0x52, 0x9e, 0x07, 0xa8, 0x01, 0xa6, 0xd3, 0xd5, 0x5e, 0x85, 0x6e, 0xe1,
	0xe2, 0x74, 0x8b, 0xe9, 0x74, 0xf1, 0x31, 0x54, 0xf3, 0xb0, 0xe7, 0x9d, 0xfe, 0x8c, 0x71, 0x1c,
	0x42, 0x3d, 0xe7, 0x5a, 0x45, 0x34, 0x08, 0x55, 0x61, 0x5d, 0xc4, 0x46, 0x31, 0x37, 0xe0, 0x5f,
	0x34, 0xd8, 0x5a, 0xa2, 0x94, 0xba, 0xa7, 0x3a, 0x40, 0x2f, 0x7e, 0x3d, 0x43, 0x16, 0xcf, 0x3f,
	0x21, 0x43, 0xae, 0xe6, 0x51, 0xf0, 0xfd, 0x73, 0x4b, 0x14, 0x4b, 0x31, 0x86, 0x05, 0xdd, 0x82,
	0x37, 0x9c, 0xe8, 0x26, 0xac, 0xca, 0x90, 0x98, 0x15, 0x3f, 0x48, 0x61, 0x1f, 0xec, 0x69, 0x6b,
	0x7a, 0x64, 0xf7, 0xe9, 0xb3, 0x19, 0xfb, 0x12, 0xac, 0x59, 0xde, 0x5a, 0x31, 0xf7, 0x17, 0xf8,
	0x28, 0x85, 0x74, 0xb2, 0x82, 0x22, 0x9d, 0x3f, 0xc0, 0x03, 0xb8, 0x16, 0x2a, 0xc5, 0xa9, 0x38,
	0xb1, 0xcc, 0x25, 0x67, 0x7f, 0x1f, 0x2a, 0x69, 0xa9, 0xf3, 0x59, 0x73, 0xcb, 0xb4, 0x89, 0x18,
	0xbb, 0x94, 0x4b, 0xc1, 0x59, 0x6f, 0x87, 0x2c, 0xf8, 0x5b, 0xb8, 0x39, 0xcb, 0xfe, 0xc2, 0x25,
	0xbd, 0x21, 0x7d, 0x28, 0x84, 0x57, 0x58, 0x3e, 0x6e, 0x33, 0x00, 0x65, 0x78, 0x4d, 0xbe, 0x69,
	0x47, 0x7d, 0xb5, 0x5b, 0xb3, 0x65, 0x14, 0x5a, 0x21, 0x0e, 0xed, 0x70, 0xae, 0xee, 0x69, 0xc5,
	0x15, 0x44, 0x0c, 0x9b, 0x24, 0x64, 0x57, 0x20, 0x23, 0x36, 0xfc, 0x35, 0xdc, 0x09, 0xbd, 0x4b,
	0x4a, 0x81, 0x5b, 0xd3, 0x60, 0xec, 0xca, 0x32, 0x03, 0x1c, 0xbe, 0x57, 0x51, 0x15, 0x4f, 0xd8,
	0xf1, 0xe7, 0x70, 0x77, 0xb9, 0xd2, 0xf3, 0x89, 0xd2, 0x49, 0xec, 0x6d, 0x08, 0x59, 0x9a, 0x3f,
	0x6f, 0xc0, 0x9a, 0x2c, 0x88, 0xc6, 0x70, 0x49, 0x29, 0x4a, 0x4c, 0x76, 0x93, 0x6f, 0x7c, 0xe5,
	0x66, 0x4e, 0x84, 0xdf, 0x18, 0xdf, 0xfa, 0xe1, 0xaf, 0x7f, 0x9f, 0x17, 0x6a, 0x48, 0x37, 0x04,
	0x1d, 0x0e, 0x99, 0xfb, 0x9e, 0xc5, 0x8c, 0x94, 0x4f, 0x09, 0xf4, 0x93, 0x06, 0x57, 0xe2, 0xef,
	0x37, 0xda, 0x4e, 0xa9, 0x9f, 0xf1, 0x11, 0x50, 0xb9, 0xb3, 0x54, 0xac, 0x42, 0xd5, 0x94, 0xa8,
	0xee, 0xa2, 0xed, 0x2c, 0x54, 0x26, 0x15, 0x1d, 0x3a, 0x19, 0x75, 0x26, 0x73, 0x30, 0xbf, 0x6b,
	0xf0, 0x56, 0xba, 0x52, 0xa0, 0x9d, 0xf4, 0xde, 0xd9, 0x1f, 0x07, 0x95, 0xdd, 0x0b, 0x64, 0x28,
	0xcc, 0xfb, 0x12, 0x73, 0x13, 0xed, 0xe4, 0x61, 0x0e, 0xf0, 0x76, 0x42, 0xd2, 0x74, 0xaa, 0x41,
	0x35, 0x4f, 0xe3, 0xd0, 0x07, 0x4b, 0xa3, 0x89, 0xee, 0xff, 0xde, 0x85, 0xf3, 0x14, 0x97, 0x8f,
	0x24, 0x97, 0x03, 0xb4, 0x77, 0x51, 0x2e, 0x1d, 0x75, 0x5c, 0xfe, 0x8c, 0x51, 0x8a, 0x2b, 0xd8,
	0x42, 0x4a, 0x19, 0xa2, 0xb9, 0x90, 0x52, 0x96, 0x54, 0xe2, 0x07, 0x92, 0xd2, 0x3d, 0xb4, 0xbf,
	0x1c, 0xa5, 0x40, 0x6f, 0x3a, 0xdd, 0x69, 0x47, 0x2a, 0x33, 0x7a, 0xae, 0xc1, 0xeb, 0x11, 0x3d,
	0x44, 0xb7, 0x33, 0xc1, 0x44, 0xc5, 0xb6, 0x52, 0x5f, 0x1c, 0xa8, 0x60, 0x1a, 0x12, 0xe6, 0x16,
	0xba, 0xbd, 0x00, 0x26, 0xa7, 0xa2, 0xc3, 0x3d, 0x0c, 0xbf, 0x6a, 0xf0, 0x66, 0xaa, 0x14, 0x22,
	0x23, 0xbd, 0x69, 0xa6, 0x22, 0x57, 0x76, 0x96, 0x4f, 0x50, 0x68, 0xf7, 0x24, 0xda, 0x5d, 0x64,
	0xe4, 0xa1, 0x65, 0x32, 0xbf, 0x13, 0x96, 0x5e, 0xf4, 0x52, 0x83, 0x1b, 0x0b, 0xb4, 0x11, 0x1d,
	0x64, 0x2a, 0xc6, 0x22, 0xa9, 0xae, 0xdc, 0x7b, 0x95, 0x54, 0xc5, 0xe9, 0x63, 0xc9, 0xe9, 0x43,
	0x74, 0x7f, 0x91, 0xf6, 0x10, 0x3f, 0xd1, 0x3b, 0x20, 0xf3, 0x73, 0xa3, 0x8c, 0xad, 0x47, 0x2f,
	0xce, 0x74, 0xed, 0xf4, 0x4c, 0xd7, 0xfe, 0x39, 0xd3, 0xb5, 0x1f, 0xcf, 0xf5, 0x95, 0xd3, 0x73,
	0x7d, 0xe5, 0xef, 0x73, 0x7d, 0xe5, 0x9b, 0x2d, 0xd3, 0x12, 0x83, 0x71, 0xb7, 0xd1, 0x63, 0xa3,
	0x44, 0x87, 0x67, 0xb3, 0x1e, 0x62, 0xea, 0x50, 0xde, 0xbd, 0x24, 0xff, 0xc0, 0xbd, 0xff, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7f, 0x3d, 0x70, 0x82, 0x65, 0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetEvmValidators items.
	GetEvmValidators(ctx context.Context, in *QueryGetEvmValidatorsRequest, opts ...grpc.CallOption) (*QueryGetEvmValidatorsResponse, error)
	GetValidatorCheckpoint(ctx context.Context, in *QueryGetValidatorCheckpointRequest, opts ...grpc.CallOption) (*QueryGetValidatorCheckpointResponse, error)
	GetValidatorCheckpointParams(ctx context.Context, in *QueryGetValidatorCheckpointParamsRequest, opts ...grpc.CallOption) (*QueryGetValidatorCheckpointParamsResponse, error)
	GetValidatorTimestampByIndex(ctx context.Context, in *QueryGetValidatorTimestampByIndexRequest, opts ...grpc.CallOption) (*QueryGetValidatorTimestampByIndexResponse, error)
	GetValsetSigs(ctx context.Context, in *QueryGetValsetSigsRequest, opts ...grpc.CallOption) (*QueryGetValsetSigsResponse, error)
	GetOracleAttestations(ctx context.Context, in *QueryGetOracleAttestationsRequest, opts ...grpc.CallOption) (*QueryGetOracleAttestationsResponse, error)
	GetEvmAddressByValidatorAddress(ctx context.Context, in *QueryGetEvmAddressByValidatorAddressRequest, opts ...grpc.CallOption) (*QueryGetEvmAddressByValidatorAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEvmValidators(ctx context.Context, in *QueryGetEvmValidatorsRequest, opts ...grpc.CallOption) (*QueryGetEvmValidatorsResponse, error) {
	out := new(QueryGetEvmValidatorsResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetEvmValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidatorCheckpoint(ctx context.Context, in *QueryGetValidatorCheckpointRequest, opts ...grpc.CallOption) (*QueryGetValidatorCheckpointResponse, error) {
	out := new(QueryGetValidatorCheckpointResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetValidatorCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidatorCheckpointParams(ctx context.Context, in *QueryGetValidatorCheckpointParamsRequest, opts ...grpc.CallOption) (*QueryGetValidatorCheckpointParamsResponse, error) {
	out := new(QueryGetValidatorCheckpointParamsResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetValidatorCheckpointParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidatorTimestampByIndex(ctx context.Context, in *QueryGetValidatorTimestampByIndexRequest, opts ...grpc.CallOption) (*QueryGetValidatorTimestampByIndexResponse, error) {
	out := new(QueryGetValidatorTimestampByIndexResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetValidatorTimestampByIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValsetSigs(ctx context.Context, in *QueryGetValsetSigsRequest, opts ...grpc.CallOption) (*QueryGetValsetSigsResponse, error) {
	out := new(QueryGetValsetSigsResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetValsetSigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetOracleAttestations(ctx context.Context, in *QueryGetOracleAttestationsRequest, opts ...grpc.CallOption) (*QueryGetOracleAttestationsResponse, error) {
	out := new(QueryGetOracleAttestationsResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetOracleAttestations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetEvmAddressByValidatorAddress(ctx context.Context, in *QueryGetEvmAddressByValidatorAddressRequest, opts ...grpc.CallOption) (*QueryGetEvmAddressByValidatorAddressResponse, error) {
	out := new(QueryGetEvmAddressByValidatorAddressResponse)
	err := c.cc.Invoke(ctx, "/layer.bridge.Query/GetEvmAddressByValidatorAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetEvmValidators items.
	GetEvmValidators(context.Context, *QueryGetEvmValidatorsRequest) (*QueryGetEvmValidatorsResponse, error)
	GetValidatorCheckpoint(context.Context, *QueryGetValidatorCheckpointRequest) (*QueryGetValidatorCheckpointResponse, error)
	GetValidatorCheckpointParams(context.Context, *QueryGetValidatorCheckpointParamsRequest) (*QueryGetValidatorCheckpointParamsResponse, error)
	GetValidatorTimestampByIndex(context.Context, *QueryGetValidatorTimestampByIndexRequest) (*QueryGetValidatorTimestampByIndexResponse, error)
	GetValsetSigs(context.Context, *QueryGetValsetSigsRequest) (*QueryGetValsetSigsResponse, error)
	GetOracleAttestations(context.Context, *QueryGetOracleAttestationsRequest) (*QueryGetOracleAttestationsResponse, error)
	GetEvmAddressByValidatorAddress(context.Context, *QueryGetEvmAddressByValidatorAddressRequest) (*QueryGetEvmAddressByValidatorAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetEvmValidators(ctx context.Context, req *QueryGetEvmValidatorsRequest) (*QueryGetEvmValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmValidators not implemented")
}
func (*UnimplementedQueryServer) GetValidatorCheckpoint(ctx context.Context, req *QueryGetValidatorCheckpointRequest) (*QueryGetValidatorCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorCheckpoint not implemented")
}
func (*UnimplementedQueryServer) GetValidatorCheckpointParams(ctx context.Context, req *QueryGetValidatorCheckpointParamsRequest) (*QueryGetValidatorCheckpointParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorCheckpointParams not implemented")
}
func (*UnimplementedQueryServer) GetValidatorTimestampByIndex(ctx context.Context, req *QueryGetValidatorTimestampByIndexRequest) (*QueryGetValidatorTimestampByIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorTimestampByIndex not implemented")
}
func (*UnimplementedQueryServer) GetValsetSigs(ctx context.Context, req *QueryGetValsetSigsRequest) (*QueryGetValsetSigsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValsetSigs not implemented")
}
func (*UnimplementedQueryServer) GetOracleAttestations(ctx context.Context, req *QueryGetOracleAttestationsRequest) (*QueryGetOracleAttestationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOracleAttestations not implemented")
}
func (*UnimplementedQueryServer) GetEvmAddressByValidatorAddress(ctx context.Context, req *QueryGetEvmAddressByValidatorAddressRequest) (*QueryGetEvmAddressByValidatorAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEvmAddressByValidatorAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEvmValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEvmValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEvmValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetEvmValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEvmValidators(ctx, req.(*QueryGetEvmValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidatorCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetValidatorCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorCheckpoint(ctx, req.(*QueryGetValidatorCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidatorCheckpointParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorCheckpointParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorCheckpointParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetValidatorCheckpointParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorCheckpointParams(ctx, req.(*QueryGetValidatorCheckpointParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidatorTimestampByIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorTimestampByIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorTimestampByIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetValidatorTimestampByIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorTimestampByIndex(ctx, req.(*QueryGetValidatorTimestampByIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValsetSigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValsetSigsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValsetSigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetValsetSigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValsetSigs(ctx, req.(*QueryGetValsetSigsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetOracleAttestations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetOracleAttestationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetOracleAttestations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetOracleAttestations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetOracleAttestations(ctx, req.(*QueryGetOracleAttestationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetEvmAddressByValidatorAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEvmAddressByValidatorAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetEvmAddressByValidatorAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/layer.bridge.Query/GetEvmAddressByValidatorAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetEvmAddressByValidatorAddress(ctx, req.(*QueryGetEvmAddressByValidatorAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "layer.bridge.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetEvmValidators",
			Handler:    _Query_GetEvmValidators_Handler,
		},
		{
			MethodName: "GetValidatorCheckpoint",
			Handler:    _Query_GetValidatorCheckpoint_Handler,
		},
		{
			MethodName: "GetValidatorCheckpointParams",
			Handler:    _Query_GetValidatorCheckpointParams_Handler,
		},
		{
			MethodName: "GetValidatorTimestampByIndex",
			Handler:    _Query_GetValidatorTimestampByIndex_Handler,
		},
		{
			MethodName: "GetValsetSigs",
			Handler:    _Query_GetValsetSigs_Handler,
		},
		{
			MethodName: "GetOracleAttestations",
			Handler:    _Query_GetOracleAttestations_Handler,
		},
		{
			MethodName: "GetEvmAddressByValidatorAddress",
			Handler:    _Query_GetEvmAddressByValidatorAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "layer/bridge/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetEvmValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEvmValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEvmValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetEvmValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEvmValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEvmValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeValidatorSet) > 0 {
		for iNdEx := len(m.BridgeValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorCheckpoint) > 0 {
		i -= len(m.ValidatorCheckpoint)
		copy(dAtA[i:], m.ValidatorCheckpoint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorCheckpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValidator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValidator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValidator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Power != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x10
	}
	if len(m.EthereumAddress) > 0 {
		i -= len(m.EthereumAddress)
		copy(dAtA[i:], m.EthereumAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EthereumAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BridgeValidatorSet) > 0 {
		for iNdEx := len(m.BridgeValidatorSet) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BridgeValidatorSet[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValidatorSetParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValidatorSetParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValidatorSetParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorCheckpoint) > 0 {
		i -= len(m.ValidatorCheckpoint)
		copy(dAtA[i:], m.ValidatorCheckpoint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorCheckpoint)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ValidatorSetHash) > 0 {
		i -= len(m.ValidatorSetHash)
		copy(dAtA[i:], m.ValidatorSetHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorSetHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ValidatorPowerThreshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorPowerThreshold))
		i--
		dAtA[i] = 0x18
	}
	if m.ValidatorTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.BridgeValidatorSet != nil {
		{
			size, err := m.BridgeValidatorSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValidatorSetCheckpointParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValidatorSetCheckpointParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValidatorSetCheckpointParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorSetHash) > 0 {
		i -= len(m.ValidatorSetHash)
		copy(dAtA[i:], m.ValidatorSetHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorSetHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ValidatorPowerThreshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorPowerThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorTimestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BridgeValidatorSetCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BridgeValidatorSetCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BridgeValidatorSetCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorCheckpoint) > 0 {
		i -= len(m.ValidatorCheckpoint)
		copy(dAtA[i:], m.ValidatorCheckpoint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorCheckpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorCheckpointParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorCheckpointParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorCheckpointParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorCheckpointParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorCheckpointParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorCheckpointParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PowerThreshold != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PowerThreshold))
		i--
		dAtA[i] = 0x20
	}
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValsetHash) > 0 {
		i -= len(m.ValsetHash)
		copy(dAtA[i:], m.ValsetHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValsetHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Checkpoint) > 0 {
		i -= len(m.Checkpoint)
		copy(dAtA[i:], m.Checkpoint)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Checkpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorTimestampByIndexRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorTimestampByIndexRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorTimestampByIndexRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorTimestampByIndexResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorTimestampByIndexResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorTimestampByIndexResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetSigsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetSigsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetSigsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValsetSigsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValsetSigsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValsetSigsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signatures[iNdEx])
			copy(dAtA[i:], m.Signatures[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Signatures[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOracleAttestationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOracleAttestationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOracleAttestationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if len(m.QueryId) > 0 {
		i -= len(m.QueryId)
		copy(dAtA[i:], m.QueryId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QueryId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetOracleAttestationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetOracleAttestationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetOracleAttestationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for iNdEx := len(m.Attestations) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Attestations[iNdEx])
			copy(dAtA[i:], m.Attestations[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.Attestations[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEvmAddressByValidatorAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEvmAddressByValidatorAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEvmAddressByValidatorAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetEvmAddressByValidatorAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetEvmAddressByValidatorAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetEvmAddressByValidatorAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EvmAddress) > 0 {
		i -= len(m.EvmAddress)
		copy(dAtA[i:], m.EvmAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.EvmAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetEvmValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetEvmValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeValidatorSet) > 0 {
		for _, e := range m.BridgeValidatorSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetValidatorCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetValidatorCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorCheckpoint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BridgeValidator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EthereumAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovQuery(uint64(m.Power))
	}
	return n
}

func (m *BridgeValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BridgeValidatorSet) > 0 {
		for _, e := range m.BridgeValidatorSet {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *BridgeValidatorSetParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BridgeValidatorSet != nil {
		l = m.BridgeValidatorSet.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ValidatorTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorTimestamp))
	}
	if m.ValidatorPowerThreshold != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorPowerThreshold))
	}
	l = len(m.ValidatorSetHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorCheckpoint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BridgeValidatorSetCheckpointParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorTimestamp != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorTimestamp))
	}
	if m.ValidatorPowerThreshold != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorPowerThreshold))
	}
	l = len(m.ValidatorSetHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *BridgeValidatorSetCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorCheckpoint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorCheckpointParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetValidatorCheckpointParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Checkpoint)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValsetHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	if m.PowerThreshold != 0 {
		n += 1 + sovQuery(uint64(m.PowerThreshold))
	}
	return n
}

func (m *QueryGetValidatorTimestampByIndexRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryGetValidatorTimestampByIndexResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetValsetSigsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetValsetSigsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for _, s := range m.Signatures {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetOracleAttestationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QueryId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovQuery(uint64(m.Timestamp))
	}
	return n
}

func (m *QueryGetOracleAttestationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attestations) > 0 {
		for _, s := range m.Attestations {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetEvmAddressByValidatorAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetEvmAddressByValidatorAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EvmAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEvmValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEvmValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEvmValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEvmValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEvmValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEvmValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeValidatorSet = append(m.BridgeValidatorSet, &BridgeValidator{})
			if err := m.BridgeValidatorSet[len(m.BridgeValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValidator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValidator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValidator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthereumAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EthereumAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BridgeValidatorSet = append(m.BridgeValidatorSet, &BridgeValidator{})
			if err := m.BridgeValidatorSet[len(m.BridgeValidatorSet)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValidatorSetParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValidatorSetParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValidatorSetParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BridgeValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BridgeValidatorSet == nil {
				m.BridgeValidatorSet = &BridgeValidatorSet{}
			}
			if err := m.BridgeValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorTimestamp", wireType)
			}
			m.ValidatorTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPowerThreshold", wireType)
			}
			m.ValidatorPowerThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPowerThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetHash = append(m.ValidatorSetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorSetHash == nil {
				m.ValidatorSetHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpoint = append(m.ValidatorCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorCheckpoint == nil {
				m.ValidatorCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValidatorSetCheckpointParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValidatorSetCheckpointParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValidatorSetCheckpointParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorTimestamp", wireType)
			}
			m.ValidatorTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorPowerThreshold", wireType)
			}
			m.ValidatorPowerThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorPowerThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetHash = append(m.ValidatorSetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorSetHash == nil {
				m.ValidatorSetHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BridgeValidatorSetCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BridgeValidatorSetCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BridgeValidatorSetCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCheckpoint", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorCheckpoint = append(m.ValidatorCheckpoint[:0], dAtA[iNdEx:postIndex]...)
			if m.ValidatorCheckpoint == nil {
				m.ValidatorCheckpoint = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorCheckpointParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorCheckpointParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorCheckpointParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Checkpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValsetHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValsetHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PowerThreshold", wireType)
			}
			m.PowerThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PowerThreshold |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorTimestampByIndexRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorTimestampByIndexRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorTimestampByIndexRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorTimestampByIndexResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorTimestampByIndexResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorTimestampByIndexResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetSigsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetSigsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetSigsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValsetSigsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValsetSigsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValsetSigsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOracleAttestationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOracleAttestationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOracleAttestationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QueryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QueryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetOracleAttestationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetOracleAttestationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetOracleAttestationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestations = append(m.Attestations, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEvmAddressByValidatorAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEvmAddressByValidatorAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEvmAddressByValidatorAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetEvmAddressByValidatorAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetEvmAddressByValidatorAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetEvmAddressByValidatorAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EvmAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EvmAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
