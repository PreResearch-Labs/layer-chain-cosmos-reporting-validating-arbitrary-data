syntax = "proto3";
package layer.reporter;

import "amino/amino.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "layer/reporter/distribution.proto";
import "layer/reporter/oracle_reporter.proto";
import "layer/reporter/params.proto";

option go_package = "github.com/tellor-io/layer/x/reporter/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/params";
  }
  // Reporters queries all the staked reporters.
  rpc Reporters(QueryReportersRequest) returns (QueryReportersResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/reporters";
  }
  // DelegatorReporter queries the reporter of a delegator.
  rpc DelegatorReporter(QueryDelegatorReporterRequest) returns (QueryDelegatorReporterResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/delegator-reporter/{delegator_address}";
  }
  // ReporterStake queries the total tokens of a reporter.
  rpc ReporterStake(QueryReporterStakeRequest) returns (QueryReporterStakeResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/reporter-stake/{reporter_address}";
  }
  // DelegationRewards queries the total rewards accrued by a delegation.
  rpc DelegationRewards(QueryDelegationRewardsRequest) returns (QueryDelegationRewardsResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/delegation-rewards/{delegator_address}/{reporter_address}";
  }
  // ReporterOutstandingRewards queries rewards of a reporter address.
  rpc ReporterOutstandingRewards(QueryReporterOutstandingRewardsRequest) returns (QueryReporterOutstandingRewardsResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/outstanding-rewards/{reporter_address}";
  }
  // ReporterCommission queries accumulated commission for a reporter.
  rpc ReporterCommission(QueryReporterCommissionRequest) returns (QueryReporterCommissionResponse) {
    option (google.api.http).get = "/tellor-io/layer/reporter/commission/{reporter_address}";
  }
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryReportersRequest is the request type for the Query/Reporters RPC method.
message QueryReportersRequest {}

// QueryReportersResponse is the response type for the Query/Reporters RPC method.
message QueryReportersResponse {
  // all the reporters.
  repeated OracleReporter reporters = 1;
}

// QueryDelegatorReporterRequest is the request type for the
// Query/DelegatorReporter RPC method.
message QueryDelegatorReporterRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // delegator_address defines the delegator address to query for.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryDelegatorReporterResponse is the response type for the
// Query/DelegatorReporter RPC method.
message QueryDelegatorReporterResponse {
  // reporter defines the reporter of a delegator.
  string reporter = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryReporterStakeRequest is the request type for the
// Query/ReporterStake RPC method.
message QueryReporterStakeRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // reporter_address defines the reporter address to query for.
  string reporter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryReporterStakeResponse is the response type for the
// Query/ReporterStake RPC method.
message QueryReporterStakeResponse {
  // stake defines the total tokens of a reporter.
  string stake = 1 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false
  ];
}

// QueryDelegationRewardsRequest is the request type for the
// Query/DelegationRewards RPC method.
message QueryDelegationRewardsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // delegator_address defines the delegator address to query for.
  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  // reporter_address defines the reporter address to query for.
  string reporter_address = 2 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryDelegationRewardsResponse is the response type for the
// Query/DelegationRewards RPC method.
message QueryDelegationRewardsResponse {
  // rewards defines the rewards accrued by a delegation.
  repeated cosmos.base.v1beta1.DecCoin rewards = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins"
  ];
}

// QueryReporterOutstandingRewardsRequest is the request type for the
// Query/ReporterOutstandingRewards RPC method.
message QueryReporterOutstandingRewardsRequest {
  // reporter_address defines the reporter address to query for.
  string reporter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryReporterOutstandingRewardsResponse is the response type for the
// Query/ReporterOutstandingRewards RPC method.
message QueryReporterOutstandingRewardsResponse {
  ReporterOutstandingRewards rewards = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// QueryReporterCommissionRequest is the request type for the
// Query/ReporterCommission RPC method
message QueryReporterCommissionRequest {
  // reporter_address defines the reporter address to query for.
  string reporter_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryReporterCommissionResponse is the response type for the
// Query/ReporterCommission RPC method
message QueryReporterCommissionResponse {
  // commission defines the commission the reporter received.
  ReporterAccumulatedCommission commission = 1 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}
