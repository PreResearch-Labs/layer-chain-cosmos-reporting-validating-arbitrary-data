syntax = "proto3";

package layer.oracle;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "layer/oracle/params.proto";
import "layer/oracle/reports.proto";
import "layer/oracle/micro_report.proto";
import "layer/oracle/tips.proto";
import "layer/oracle/user_tip.proto";
import "layer/oracle/aggregate.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/tellor-io/layer/x/oracle/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/layer/oracle/params";
  
  }
  
  // Queries a list of GetReportsbyQid items.
  rpc GetReportsbyQid         (QueryGetReportsbyQidRequest        ) returns (QueryGetReportsbyQidResponse     ) {
    option (google.api.http).get = "/layer/oracle/get_reportsby_qid/{queryId}";
  
  }
  rpc GetReportsbyReporter    (QueryGetReportsbyReporterRequest   ) returns (QueryGetReportsbyReporterResponse) {
    option (google.api.http).get = "/layer/oracle/get_reportsby_reporter/{reporter}";
  
  }
  rpc GetReportsbyReporterQid (QueryGetReportsbyReporterQidRequest) returns (QueryGetReportsbyQidResponse     ) {
    option (google.api.http).get = "/layer/oracle/get_reportsby_reporter_qid/{reporter}/{queryId}";
  
  }
  
  // Queries a list of GetCurrentTip items.
  rpc GetCurrentTip (QueryGetCurrentTipRequest) returns (QueryGetCurrentTipResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_current_tip/{queryData}";
  
  }
  
  // Queries a list of GetUserTipTotal items.
  rpc GetUserTipTotal (QueryGetUserTipTotalRequest) returns (QueryGetUserTipTotalResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_user_tip_total/{tipper}/{queryData}";
  
  }
  
  // Queries a list of GetAggregatedReport items.
  rpc GetAggregatedReport (QueryGetCurrentAggregatedReportRequest) returns (QueryGetAggregatedReportResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_aggregated_report/{queryId}";
  
  }
  
  // Queries a list of GetAggregatedReport items.
  rpc GetDataBefore (QueryGetDataBeforeRequest) returns (QueryGetAggregatedReportResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/GetDataBefore/{queryId}/{timestamp}";
  
  }
  
  // Queries a list of GetTimeBasedRewards items.
  rpc GetTimeBasedRewards (QueryGetTimeBasedRewardsRequest) returns (QueryGetTimeBasedRewardsResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/get_time_based_rewards";
  
  }
  
  // Queries a list of CurrentCyclelistQuery items.
  rpc CurrentCyclelistQuery (QueryCurrentCyclelistQueryRequest) returns (QueryCurrentCyclelistQueryResponse) {
    option (google.api.http).get = "/tellor-io/layer/oracle/current_cyclelist_query";
  
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetReportsbyQidRequest {
  string queryId = 1;
}

message QueryGetReportsbyQidResponse {
  Reports reports = 1 [(gogoproto.nullable) = false];
}

message QueryGetReportsbyReporterRequest {
  string reporter = 1;
}

message QueryGetReportsbyReporterResponse {
  repeated MicroReport microReports = 1 [(gogoproto.nullable) = false];
}

message QueryGetReportsbyReporterQidRequest {
  string reporter = 1;
  string queryId  = 2;
}

message QueryGetCurrentTipRequest {
  string queryData = 1;
}

message QueryGetCurrentTipResponse {
  Tips tips = 1;
}

message QueryGetUserTipTotalRequest {
  string tipper    = 1;
  string queryData = 2;
}

message QueryGetUserTipTotalResponse {
  UserTipTotal totalTips = 1;
}

message QueryGetCurrentAggregatedReportRequest {
  string queryId = 1;
}

message QueryGetAggregatedReportResponse {
  Aggregate report = 1;
}

message QueryGetDataBeforeRequest {
  string queryId   = 1;
  int64  timestamp = 2;
}

message QueryGetTimeBasedRewardsRequest {}

message QueryGetTimeBasedRewardsResponse {
  cosmos.base.v1beta1.Coin reward = 1 [(gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coin", (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message QueryCurrentCyclelistQueryRequest {}

message QueryCurrentCyclelistQueryResponse {
  string querydata = 1;
}

