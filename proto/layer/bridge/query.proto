syntax = "proto3";

package layer.bridge;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "layer/bridge/params.proto";

option go_package = "github.com/tellor-io/layer/x/bridge/types";

// Query defines the gRPC querier service.
service Query {
  
  // Parameters queries the parameters of the module.
  rpc Params (QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/tellor-io/layer/bridge/params";
  
  }

  // // BridgeValidators queries the bridge validator set and their powers
  // rpc BridgeValidators(QueryBridgeValidatorsRequest) returns (QueryBridgeValidatorsResponse) {
  //   option (google.api.http).get = "/tellor-io/layer/bridge/validators";
  // }
  
  // Queries a list of GetEvmValidators items.
  rpc GetEvmValidators (QueryGetEvmValidatorsRequest) returns (QueryGetEvmValidatorsResponse) {
    option (google.api.http).get = "/tellor-io/layer/bridge/get_evm_validators";
  }

  rpc GetValidatorCheckpoint (QueryGetValidatorCheckpointRequest) returns (QueryGetValidatorCheckpointResponse) {
    option (google.api.http).get = "/tellor-io/layer/bridge/get_validator_checkpoint";
  }
}
// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}


// message QueryBridgeValidatorsRequest {}

// message QueryBridgeValidatorsResponse {
//   repeated BridgeValidator bridge_validators = 1;
//   pagination.PageResponse page_response = 2;
// }
message QueryGetEvmValidatorsRequest {}

message QueryGetEvmValidatorsResponse {
  repeated BridgeValidator bridgeValidatorSet = 1;
}

message QueryGetValidatorCheckpointRequest {}

message QueryGetValidatorCheckpointResponse {
  string validatorCheckpoint = 1;
}

message BridgeValidator {
  string ethereumAddress = 1;
  uint64 power = 2;
}

message BridgeValidatorSet {
  repeated BridgeValidator bridgeValidatorSet = 1;
}

message BridgeValidatorSetParams {
  BridgeValidatorSet bridgeValidatorSet = 1;
  int64 validatorTimestamp = 2;
  int64 validatorPowerThreshold = 3;
  bytes validatorSetHash = 4;
  bytes validatorCheckpoint = 5;
}

message BridgeValidatorSetCheckpointParams {
  int64 validatorTimestamp = 1;
  int64 validatorPowerThreshold = 2;
  bytes validatorSetHash = 3;
}

message BridgeValidatorSetCheckpoint {
  bytes validatorCheckpoint = 1;
}

